{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Workspace ONE Software Development Kit Integration Samples","text":"<p>This repository contains sample code for integration of mobile applications with the VMware Workspace ONE\u00ae platform.</p> <p>Different sets of sample code will be published to this repository. At time of writing, the following set is available.</p>"},{"location":"#workspace-one-for-android-integration-guide-code","title":"Workspace ONE for Android Integration Guide Code","text":"<p>Android applications can be integrated with the VMware Workspace ONE\u00ae platform, by using its mobile software development kit. The Workspace ONE Integration Guide for Android is a set of documents that contain instructions for integration.</p>"},{"location":"#workspace-one-for-ios-integration-guide-code","title":"Workspace ONE for iOS Integration Guide Code","text":"<p>iOS applications can be integrated with the VMware Workspace ONE\u00ae platform, by using its mobile software development kit. The Workspace ONE Integration Guide for iOS provides a sample application that contain instructions for integration and usage.</p>"},{"location":"#workspace-one-sdk-for-apache-corodva-guide","title":"Workspace ONE SDK For Apache Corodva Guide","text":"<p>Use this document to install the VMware Workspace One SDK Plugin for Apache Cordova. The plugin helps enterprise app developers add enterprise- grade security, conditional access, and compliance capabilities to mobile applications.</p>"},{"location":"#workspace-one-sdk-plugin-for-flutter","title":"Workspace ONE SDK Plugin for Flutter","text":"<p>Use this document to install the VMware Workspace One SDK Plugin for Flutter. The plugin helps enterprise app developers add enterprise-grade security, conditional access, and compliance capabilities to mobile applications.</p>"},{"location":"#workspace-one-sdk-plugin-for-react-native","title":"Workspace ONE SDK Plugin for React-Native","text":"<p>Use this document to install the VMware Workspace One SDK Plugin for React-Native. The plugin helps enterprise app developers add enterprise- grade security, conditional access, and compliance capabilities to mobile applications.</p>"},{"location":"#workspace-one-sdk-for-xamarin-forms","title":"Workspace ONE SDK for Xamarin Forms","text":"<p>Use this documentation to install the Workspace ONE SDK for Xamarin Forms. The plugin helps enterprise app developers add enterprise- grade security, conditional access, and compliance capabilities to mobile applications.</p>"},{"location":"IntegrationGuideForCordova/","title":"Workspace ONE SDK For Apache Corodva","text":"<p>Use this document to install the VMware Workspace One SDK Plugin for Apache Cordova. The plugin helps enterprise app developers add enterprise- grade security, conditional access, and compliance capabilities to mobile applications.</p>"},{"location":"IntegrationGuideForCordova/#supported-components","title":"Supported Components","text":"<p>This plugin works with the listed component versions. * Workspace ONE UEM Console 2203+ (may need to be higher depending on specific features) * Android 8.0+ (for Android SDK component) / API level 23 OR above / Android Studio with the Gradle Android Build System (Gradle) 4.1.3 or later * iOS 14.0+ (for iOS SDK component) / Xcode 14.x</p>"},{"location":"IntegrationGuideForCordova/#build-example-application","title":"Build Example Application","text":"<p>Please refer following steps to run the example app. 1. Clone the repository. 2. Run this command <code>npm install</code>. 3. Build for iOS/android. Add the platforms that you want to target your app and ensure they get saved to config.xml and package.json.   * For iOS use <code>cordova platform add ios</code>.   * For Android use <code>cordova platform add android</code>.</p>"},{"location":"IntegrationGuideForCordova/#initial-setup","title":"Initial Setup","text":"<p>Please find the Prerequisites for using the Workspace One SDK Plugin for Apache Cordova.</p>"},{"location":"IntegrationGuideForCordova/#installation","title":"Installation","text":"<p>To install the plugin, type cordova plugin add airwatch-sdk-plugin at the command line. This should be added before any other plugin is added to the app. Note: The download from NPM, usually takes 2-3 minutes on average, over high speed internet connection.</p>"},{"location":"IntegrationGuideForCordova/#package-installation","title":"Package Installation","text":"<pre><code>npm i airwatch-sdk-plugin\n</code></pre>"},{"location":"IntegrationGuideForCordova/#feature-description","title":"Feature Description","text":"<p>Initialization of the SDK adds the listed features to your application, depending on the configurations set in the SDK profile in the Workspace One UEM Console.</p> <ul> <li>Application level passcode</li> <li>Application level tunneling of network traffic</li> <li>Integrated authentication / single sign on</li> <li>Data loss prevention</li> <li>Disable Screenshot (Android only)</li> <li>Restrict open-in for documents, web links, and email to approved applications only Restrict copy/paste (SDK provides flag value)</li> <li>Restrict access to app when device is offline</li> <li>Branding of VMware AirWatch splash screens when SDK application is launched on device.</li> </ul>"},{"location":"IntegrationGuideForCordova/#feature-implementation","title":"Feature Implementation","text":"<p>Please follow document at implementation GettingStarted.md.</p>"},{"location":"IntegrationGuideForCordova/#release-notes","title":"Release Notes","text":"<ol> <li>Latest versions of Workspace ONE SDKs (23.7.0 for iOS and 23.07 for Android).</li> </ol>"},{"location":"IntegrationGuideForCordova/#workspace-one-sdk-documentation","title":"Workspace One SDK Documentation","text":"<p>For further details about the Workspace One SDK, navigate to https://my.workspaceone.com/products/Workspace-ONE-SDK and select the required platform, SDK version and Workspace ONE UEM console version.</p>"},{"location":"IntegrationGuideForCordova/#questions-and-feedback","title":"Questions and Feedback","text":"<p>For any questions/feedback or to report an issue, please reach out to VMware support teams at https://secure.workspaceone.com/login</p>"},{"location":"IntegrationGuideForCordova/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForCordova/GettingStarted/","title":"VMware Workspace ONE Software Development Kit (SDK)","text":""},{"location":"IntegrationGuideForCordova/GettingStarted/#ios-and-android-getting-started","title":"iOS And Android - Getting Started","text":"<p>This document explains how to integrate the Workspace ONE SDKs into your Apache Cordova apps.</p> <p>For detailed information about the Workspace ONE SDK and managing internal apps, See the VMware Workspace ONE UEM Mobile Application Management Guide and the VMware Workspace ONE SDK Technical Implementation Guides located on the Workspace ONE Resources Portal at https://my.workspaceone.com/products/Workspace-ONE-SDK</p>"},{"location":"IntegrationGuideForCordova/GettingStarted/#ios-overview","title":"iOS Overview","text":"<p>In order to inject Workspace ONE SDK functionality into your Apache Cordova App, integrate the two systems.</p>"},{"location":"IntegrationGuideForCordova/GettingStarted/#requirements","title":"Requirements","text":"<ul> <li>iOS 14.0+ (for iOS SDK component) / Xcode 14.x</li> <li>Visual Studio Code </li> <li>Workspace ONE-enrolled iOS test device</li> <li>VMware Workspace One SDK Plugin for Apache Cordova from npm.</li> </ul>"},{"location":"IntegrationGuideForCordova/GettingStarted/#add-app-to-the-workspace-one-uem-console","title":"Add App to the Workspace ONE UEM Console","text":"<p>Upload your internal app to the Workspace ONE UEM Console to register it with the system. This step enables UEM Console to identify the app and to add functionality to it. The Workspace ONE UEM MAM Guide details how to upload an internal app.</p> <ol> <li>Export the app as a signed IPA.</li> <li>Log into the Workspace ONE UEM Console as an administrator.</li> <li>Navigate to Apps &amp; Books &gt; Applications &gt; List View &gt; Internal and then choose Add Application.</li> <li>Select Upload &gt; Local File, add the IPA file, and select Continue.</li> <li>Select More and choose SDK.</li> <li>Select the iOS Default Settings profile in the SDK Profile field.</li> <li>Select Save and Assign to continue to the Assignment page.</li> <li>Assign the app to a smart group and select a Push Mode.</li> <li>Select Add, and Save &amp; Publish the app to complete the upload process.</li> </ol>"},{"location":"IntegrationGuideForCordova/GettingStarted/#enable-communication-between-the-intelligent-hubformerly-airwatch-agent-and-the-apps-ipa-file","title":"Enable Communication Between the Intelligent Hub(formerly AirWatch Agent) and the app's IPA File","text":"<p>Expose a custom scheme in the Info.plist file in the Apache cordova project to enable the app to receive a call back from the Intelligent Hub. Your app receives communications from the Workspace ONE UEM Console through the Intelligent Hub. To expose the scheme, add a callback scheme registration and add a query scheme to your project.</p>"},{"location":"IntegrationGuideForCordova/GettingStarted/#add-callback-scheme-registration","title":"Add Callback Scheme Registration","text":"<ol> <li>In Xcode, navigate to Supporting Files.</li> <li>Select the file -Info.plist.</li> <li>Navigate to the URL Types section.</li> <li>If it does not exist, add it at the Information Property List root node of the PLIST.</li> <li>In the URL Types section, choose the Add URL Type button.</li> <li>Set the values of Identifier and URL Schemes to the desired callback scheme.</li> <li>Set the Role to Editor.</li> <li>Configure trust for all Workspace ONE UEM anchor application schemes under the LSApplicationQueriesSchemes entry in the Information Property List.</li> <li>Within the Array, Add following 3 values for anchor application.</li> <li>Type String and Value airwatch.</li> <li>Type String and Value awws1enroll.</li> <li>Type String and Value wsonesdk.</li> </ol>"},{"location":"IntegrationGuideForCordova/GettingStarted/#add-support-for-qr-scan-and-faceid","title":"Add Support for QR Scan and FaceId","text":""},{"location":"IntegrationGuideForCordova/GettingStarted/#qr-scan","title":"QR Scan","text":"<p>Include NSCameraUsageDescription in the application info.plist file to enable the SDK to scan QR codes with the device camera. Provide a description that devices prompt users to allow the application to enable this feature.</p>"},{"location":"IntegrationGuideForCordova/GettingStarted/#faceid","title":"FaceID","text":"<p>Include NSFaceIDUsageDescription in the application info.plist file to enable the SDK to use FaceID. Provide a description that devices prompt users to allow the application to enable this feature. Consider controlling the message users read. If you do not include a description, the iOS system prompts users with native messages that might not align with the capabilities of the application.</p>"},{"location":"IntegrationGuideForCordova/GettingStarted/#android-overview","title":"Android Overview","text":"<p>To integrate Workspace ONE SDKs into an existing Apache cordova app follow described steps.</p>"},{"location":"IntegrationGuideForCordova/GettingStarted/#requirements_1","title":"Requirements","text":"<ul> <li>Android 8.0+ (for Android SDK component) / API level 23 OR above / Android Studio with the Gradle Android Build System (Gradle) 4.1.3 or later </li> <li>Visual Studio Code </li> <li>VMware Workspace One SDK Plugin for Apache Cordova from npm.</li> <li>Android test device running Lollipop and above.</li> <li>Intelligent Hub for Android from Google Playstore.</li> <li>Whitelisted Release/Debug signing key as explained below should be used for signing the Apache cordova application.</li> </ul>"},{"location":"IntegrationGuideForCordova/GettingStarted/#whitelist-signing-key","title":"Whitelist Signing Key","text":"<p>Before you can begin using the Workspace ONE SDK, you must ensure your application signing key is whitelisted with your Workspace ONE UEM Console. When your SDK-integrated application starts up, the SDK checks the signing public key with which it is signed. It compared againt the list of whitelisted apps to determine whether your application is trusted.</p> <p>Workspace ONE allows whitelisting for both apps deployed internally or deployed through a public app store.</p>"},{"location":"IntegrationGuideForCordova/GettingStarted/#internally-deployed-applications","title":"Internally Deployed Applications","text":"<ol> <li>After building the application apk, sign it using your own specific app signing key.</li> <li>Upload the signed apk file to the Workspace ONE UEM Console as described below. Workspace ONE UEM Console extracts the application's public signing key and adds it to the whitelisted apps list   a) Log into the Workspace ONE UEM Console as an administrator.    b) Navigate to Apps &amp; Books &gt; Applications &gt; List View &gt; Internal and then choose Add Application.    c) Select Upload &gt; Local File, add the APK file, and select Continue.    d) Select More and choose SDK.    e) Select the Android Default Settings profile in the SDK Profile field.    f) Select Save and Assign to continue to the Assignment page.    g) Assign the app to a smart group and select a Push Mode.    h) Select Add, and Save &amp; Publish the app to complete the upload process.</li> </ol>"},{"location":"IntegrationGuideForCordova/GettingStarted/#publicly-deployed-applications","title":"Publicly Deployed Applications","text":"<p>For applications that are deployed publicly through the Play Store, send the public signing key of the application to AirWatch for whitelisting.</p>"},{"location":"IntegrationGuideForCordova/GettingStarted/#push-app-to-dev-device-using-app-catalog","title":"Push App to Dev Device using App Catalog","text":"<p>In order for the Intelligent Hub to manage an app, it needs to be sent to the device. This can be done via an installation policy of Automatic or by pushing the app down once using the Hub's APP CATALOG. Once the app is listed in the Managed Apps section of the Hub, it is ready for local management.</p>"},{"location":"IntegrationGuideForCordova/GettingStarted/#usage","title":"Usage","text":"<p>Adding following code in JS file will call setSDKEventListener API to set event handler to receive events from the SDK. And will be notified if SDK initialization is a success/failure by events 'initSuccess'/'initFailure'. <pre><code>document.addEventListener('deviceready', onDeviceReady, false);\n\nfunction onDeviceReady() {\n  console.log('Running cordova' + cordova.platformId + '@' + cordova.version);\n  initialiseSDK()\n}\n\nfunction initialiseSDK() {\n    window.plugins.airwatch.setSDKEventListener(function(event, error) {\n        if (event === \"initSuccess\") {\n            console.log('Init Success');\n        }\n        else if(event === \"initFailure\") {\n            alert(\"Init Failure\");\n        }\n    });\n}\n</code></pre></p>"},{"location":"IntegrationGuideForCordova/GettingStarted/#functions","title":"Functions","text":"<p>Functions available for Android and iOS</p> <p><pre><code>setSDKEventListener(listener)\n</code></pre> Sets an event-handler function to receive events from the SDK. See the \"Events\" section. This should be called once Cordova fires 'deviceready' event. The listener callback should have two parameters, event and info.</p> <p><pre><code>username(successCallback, errorCallback)\n</code></pre> Gets the enrolled user's username. The username is returned as a string parameter to the successCallback function. On iOS using this API may show a screen to enter username and password if the app gets registered to WSOne UEM console via managed settings.</p> <p><pre><code>groupId(successCallback, errorCallback)\n</code></pre> Gets the enrolled user's group ID. The group ID will be returned as a string parameter to the successCallback function.</p> <p><pre><code>serverName(successCallback, errorCallback)\n</code></pre> Get the name of the server to which the device is enrolled. The server name will be returned as a string parameter to the successCallback function.</p> <p><pre><code>allowCopyPaste(successCallback, errorCallback)\n</code></pre> Gets the \"allow offline use\" setting for the profile. If true, then the user can use managed apps when not connected to the network. If false, the user cannot use managed apps when not connected to the network. The value is returned as a boolean parameter to the successCallback function.</p> <p><pre><code>openFile (absolutepath, successCallback, errorCallback)\n</code></pre> Opens the file specified by the absolute path in accordance with the data loss prevention settings as configured on the Workspace One UEM Console. The plugin restricts the files only to those whitelisted applications. Applications can have a custom implementation using restrictDocumentToApps and allowedApplications APIs. A success callback is invoked when the plugin is successfully able to open the file. In all other cases, an error callback is invoked with the corresponding error code. To obtain the absolute path of the file (whether the file available bundled in the app or downloaded to the documents folder by the app), refer to the Cordova File plugin documentation, at https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-file/.</p> <p>Error code values for openFile   * 2 - File not found at the path   * 1 - Absolute path not specified   * 0 - No error</p> <p><pre><code>registerPushNotificationToken (token, successCallback, errorCallback)\n</code></pre> API to set the Push Notification token. The token will be sent to Workspace One UEM Console by the plugin. Applications has to get the Push Notification token before calling this and pass the token. A success callback is invoked when the plugin is successfully able to set the token. In all other cases, an error callback is invoked with the corresponding error code.</p> <p>Error code values for Push Notification token registration   * 1 - Token not specified   * 0 - No error</p>"},{"location":"IntegrationGuideForCordova/GettingStarted/#events","title":"Events","text":"<p>The Workspace One SDK sends event notifications to applications that use it when certain conditions arise. To receive these notifications in a Cordova app, call setSDKEventListener(listener). The listener is a function that accepts two parameters. The first parameter will be a string containing the name of the event, as listed below. The second is an object that contains additional data if relevant to that type of event.</p>"},{"location":"IntegrationGuideForCordova/GettingStarted/#events-available-for-android-and-ios","title":"Events available for Android and iOS","text":"<p><code>initSuccess</code></p> <p>Sent when the Workspace One SDK is successfully initialized. All the functions of the plugin, other than setSDKEventListener(listener), are available after this event is fired. See 'Functions' section above.</p> <p><code>initFailure</code></p> <p>Sent when the Workspace One SDK cannot be successfully initialized. Any future calls to the plugin fails.</p>"},{"location":"IntegrationGuideForCordova/GettingStarted/#events-available-for-ios-only","title":"Events available for iOS only","text":"<p><code>wipe</code></p> <p>Sent when the device receives a \"wipe\" instruction from the console.</p> <p><code>lock</code></p> <p>Sent when the device receives a \"lock\" instruction from the console.</p> <p><code>unlock</code></p> <p>Sent when the device receives an \"unlock\" instruction from the console.</p> <p><code>stopNetworkActivity</code></p> <p>Sent when the device receives a \"stopNetworkActivity\" instruction from the console. The event data parameter contains a property named status with a numeric value as specified in the table below.</p> <p><code>resumeNetworkActivity</code></p> <p>Sent when the device receives a \"resumeNetworkActivity\" instruction from the console.</p>"},{"location":"IntegrationGuideForCordova/GettingStarted/#network-status-values-for-stopnetworkactivity","title":"Network status values for stopNetworkActivity:","text":"Status Code Network State -2 initializing -1 normal 1 cellular data disabled 2 roaming 3 proxy failed 4 network not reachable"},{"location":"IntegrationGuideForCordova/GettingStarted/#best-practices","title":"Best Practices","text":""},{"location":"IntegrationGuideForCordova/GettingStarted/#add-business-logic-after-the-initsuccess-event-fires","title":"Add Business Logic After the initSuccess Event Fires","text":"<p>For applications using the Workspace One SDK, have all business logic of the application added after the SDK fires initSuccess event. This means the SDK successfully initialized and the user is authenticated successfully, if applicable.</p> <p>The application waits until the initSuccess or initFailure event fires. Until the Workspace One SDK completely loads and the initSuccess event fires, the application shows a waiting screen or a loading screen to give feedback to the user that the applicaiton is in the process of loading and starting.</p>"},{"location":"IntegrationGuideForCordova/GettingStarted/#do-not-add-business-logic-to-the-deviceready-event","title":"Do Not Add Business Logic to the deviceready Event","text":"<p>Unless there is a specific business requirement to perform operations before the Workspace One SDK is initialized, do not add logic to the deviceready event. The SDK shows an authentication screen above Cordova WebView which can block the application's UI until the SDK is initialized. The initFailure event fires when if SDK initialization somehow fails. The application listens to this event and shows the corresponding error in the application.</p>"},{"location":"IntegrationGuideForCordova/GettingStarted/#feature-implementation","title":"Feature Implementation","text":""},{"location":"IntegrationGuideForCordova/GettingStarted/#branding","title":"Branding","text":""},{"location":"IntegrationGuideForCordova/GettingStarted/#ios","title":"iOS","text":"<p>Once the plugin is added to the app, there will be a new bundle (AWSDKDefaults) that is also added to the app. This bundle has AWSDKDefaultSettings.plist that already has few entries in it. To enable branding , new entries has to be added to it. For details on the entries to be added to enable branding in your app, navigate to https://code.vmware.com/web/sdk/Native/airwatch-ios and search for Branding.</p>"},{"location":"IntegrationGuideForCordova/GettingStarted/#android","title":"Android","text":"<p>Please follow the steps mentioned in https://github.com/vmware-samples/workspace-ONE-SDK-integration-samples/blob/main/IntegrationGuideForAndroid/Guides/04Branding/WorkspaceONE_Android_Branding.md to brand the splash screen, the app logo gets branded as per the images from the WS1 UEM console branding payload.</p>"},{"location":"IntegrationGuideForCordova/GettingStarted/#sso","title":"SSO","text":""},{"location":"IntegrationGuideForCordova/GettingStarted/#ios_1","title":"iOS","text":"<p>To enable multiple apps built with the plugin share common authentication session and other SDK info, please follow the steps mentioned in the document at https://code.vmware.com/web/sdk/Native/airwatch-ios under section \"Keychain Access Group Entitlements\".</p>"},{"location":"IntegrationGuideForCordova/GettingStarted/#android_1","title":"Android","text":"<p>Nothing specific coding /configuration to be done on Android.</p>"},{"location":"IntegrationGuideForCordova/GettingStarted/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForCordova/LICENSE/","title":"VMware Workspace ONE Software Development Kit License Agreement","text":"<p>Note: By clicking \u201cI AGREE,\u201d downloading, installing, or using the SDK, you conclude and agree to the terms of this license agreement (the \u201cAgreement\u201d) in a legally binding manner with AirWatch LLC., 1155 Perimeter Center West, Suite 100, Atlanta, GA 30338 (\u201cAirWatch\u201d). If you disagree with any of the following terms, then do not use the SDK. In the following, the terms \u201cyou\u201d and \u201cCompany\u201d shall refer, jointly and severally, to you individually and any organization on whose behalf you act.</p> <ol> <li> <p>Purpose The \u201cSDK\u201d shall mean the VMware Workspace ONE software development kit, including any subsequent updates or upgrade made available to Company, and any associated documentation, software code, or other materials made available by AirWatch to assist Company in developing solution(s) (each a \u201cCompany Product\u201d) that interoperates with AirWatch product(s). This Agreement applies to any SDK provided by AirWatch or that includes, displays, or links to this Agreement, and to any updates, supplements or support services for this SDK. Company may only use this SDK to develop a Company Product that interoperates with one or more AirWatch product(s) and to certify compatibility of Company\u2019s Product(s) with AirWatch\u2019s product(s).</p> </li> <li> <p>Use Rights Subject to Company\u2019s compliance with the terms of this Agreement, Company may (i) download, install, and use the SDK on its devices solely to design, develop, and test Company Product(s), (ii) make a reasonable number of copies of the SDK as necessary to develop Company Product(s), provided that Company reproduces complete copies of the SDK, including without limitation all \"read me\" files, copyright notices, and other legal notices and terms, and (iii) use, reproduce, modify, and distribute the sample code included in the SDK only as embedded in a Company Product that complies with the technical limitations and the certification requirements set forth in the documentation (the \u201cCertification Requirements\u201d). AirWatch reserves the right to discontinue offering the SDK (or any updates thereto) or to modify the SDK at any time in its sole discretion. Free/open source software components distributed in this SDK are licensed to Company under the terms of the applicable free/open source license agreements. The free/open source software licenses can be found in the open_source_licenses.txt file included in the SDK or at http://www.vmware.com/download/open_source.html.</p> </li> <li> <p>Restrictions Except as set forth above, Company may not (1) modify, distribute, sell, lease, rent, lend, or sublicense the SDK (or any copy or portion thereof), (2) pre-install or embed applications created using this SDK on third-party devices, (3) charge users of the Company Product any fee to access or use any AirWatch offered services from the Company Product, (4) use the SDK to create, design, or develop anything other than Company Product(s), (5) create any alternate connections to the SDK other than through and with the AirWatch Console, (6) make any more copies of the SDK than are reasonably necessary for the authorized use, (7) modify, create derivative works of, reverse engineer, reverse compile, disassemble the SDK, or otherwise seek to ascertain the source code, except and only to the extent that applicable law expressly permits, despite this limitation (in which case Company shall provide AirWatch with prior notification and the opportunity to respond), (8) create or attempt to create a product that will understand and interpret the communications and commands between AirWatch\u2019s products, or (9) use the SDK in any manner to (a) circumvent any technical or licensing restrictions of AirWatch products, (b) upload or otherwise transmit any material containing software viruses or other computer code, files or programs designed to interrupt, destroy, or limit the functionality of any software or hardware, (c) use SDK or any of its features to invade the privacy of any person or otherwise violate any law, including, but not limited to, by usage of GPS functionality, location/tracking services, etc.</p> </li> <li> <p>License to Marks Subject to Company\u2019s compliance with the terms of this Agreement, AirWatch grants to Company a limited, revocable, non-exclusive, non-sublicensable, non-assignable, non-transferable right and license to display the AirWatch Marks solely in connection with marketing of Company Product(s) that meet the Certification Requirements in accordance with this Agreement and AirWatch\u2019s current Branding Guidelines which can be found at http://www.air-watch.com/BRANDINGGUIDELINES1111.pdf. \u201cAirWatch Marks\u201d means the AirWatch(R) by VMware(R) trademark indicated in the AirWatch Branding Guidelines. Company agrees and acknowledges that (i) the AirWatch Marks, whether or not registered, are the sole property of AirWatch or its suppliers; (ii) Company\u2019s reproduction of the AirWatch Marks inures to the benefit of AirWatch; and (iii) Company acquires no legal rights in the AirWatch Marks. Company agrees that it shall not adopt or use any AirWatch Marks or any word, company name, mark or design that is similar to or confusing with the AirWatch Marks. Company shall not use the AirWatch Marks in connection with any activity that (a) disparages AirWatch or its products or services; (b) violates or infringes any intellectual property of AirWatch; or (c) violates any local, state, federal, country, or international regulation or law.</p> </li> <li> <p>Feedback Company may, from time to time, provide feedback to AirWatch concerning the functionality and performance of the SDK or AirWatch products including, without limitation, identifying potential errors and improvements (\u201cFeedback\u201d). Feedback which is provided by Company to AirWatch in connection with this Agreement may be used by AirWatch and its affiliates to improve or enhance its products and, accordingly, AirWatch and its affiliates shall have a non-exclusive, perpetual, irrevocable, royalty-free, worldwide right and license to use, reproduce, disclose, sublicense, modify, make, have made, distribute, sell, offer for sale, display, perform, create derivative works, permit distribution and otherwise exploit such Feedback without restriction.</p> </li> <li> <p>Support AirWatch does not provide technical or other support for the SDK under this Agreement.</p> </li> <li> <p>Termination This Agreement shall continue as long as Company is in compliance with the terms specified herein or until otherwise terminated. Either party may terminate this Agreement upon thirty days written notice if the other party is in material breach of any term of this Agreement. Company agrees, upon termination, to immediately destroy all copies of the SDK within the Company\u2019s possession or control. The following Sections survive any termination of this Agreement: Sections 5, 8, 9, 10, 11, 12.</p> </li> <li> <p>Ownership The SDK is licensed, not sold. AirWatch reserves all other rights not granted herein. The parties acknowledge that, as between the parties, (a) AirWatch or its licensors retain complete ownership of all Intellectual Property Rights in and to the SDK and (b) Company or its licensors retain complete ownership of all Intellectual Property Rights in the Company Product(s) (subject to AirWatch\u2019s underlying ownership of the Intellectual Property Rights in and to the SDK). Nothing in this Agreement will be construed to transfer or assign any Intellectual Property Rights of either party to the other. \"Intellectual Property Rights\" means any and all rights under patent law, copyright law, trade secret law, trademark law, and any and all other proprietary rights.</p> </li> <li> <p>DISCLAIMER OF WARRANTIES &amp; LIABILITY THE SDK IS PROVIDED \u201cAS IS\u201d WITHOUT ANY WARRANTIES OF ANY KIND. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, AIRWATCH DISCLAIMS ANY IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, IN NO EVENT WILL AIRWATCH BE LIABLE FOR ANY LOST PROFITS OR BUSINESS OPPORTUNITIES, LOSS OF USE, BUSINESS INTERRUPTION, LOSS OF DATA, OR ANY OTHER INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES RELATING TO THE SDK OR THIS AGREEMENT, UNDER ANY THEORY OF LIABILITY, WHETHER BASED IN CONTRACT, TORT, NEGLIGENCE, PRODUCT LIABILITY, OR OTHERWISE. AIRWATCH\u2019S TOTAL LIABILITY RELATING TO THE SDK OR THIS AGREEMENT WILL NOT, IN ANY EVENT, EXCEED US$100.00. THE FOREGOING LIMITATIONS SHALL APPLY TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, REGARDLESS OF WHETHER AIRWATCH HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES AND REGARDLESS OF WHETHER ANY REMEDY FAILS OF ITS ESSENTIAL PURPOSE.</p> </li> <li> <p>INDEMNIFICATION Company shall defend, indemnify, and hold harmless AirWatch and its affiliates and their respective directors, officers, employees, contractors, agents, and end users (\u201cIndemnified Parties\u201d) against any third party claim, suit, or proceeding (\u201cClaim\u201d) and any liability, damage, loss, cost, and expenses (including attorney's fees) arising from the Claim (\u201cDamages\u201d) threatened or brought against any Indemnified Party alleging that any Company Product infringes (including contributory infringement) or misappropriates any third party intellectual property right. The Indemnified Party shall provide Company written notice of any Claim within a reasonable time after the Indemnified Party receives written notice of the Claim. The Indemnified Party\u2019s failure to provide timely written notice will not excuse Company\u2019s obligation under this Agreement unless lack of actual notice of the Claim has a substantially adverse effect on Company\u2019s ability to defend the Claim. The any Indemnified Party must allow Company sole control of the defense. Company shall not settle any Claim, and no settlement of a Claim will be binding on the Indemnified Party, without its prior written consent, which will not be unreasonably withheld or delayed.</p> </li> <li> <p>Confidentiality \u201cConfidential Information\u201d means information or material provided the discloser to the recipient that is in tangible form and labeled \u201cconfidential\u201d or the like, or, information, which a reasonable person knew or should have known to be confidential. The following information shall be considered Confidential Information whether or not marked or identified as such: (a) license keys; (b) information regarding AirWatch pricing, product roadmaps and strategic marketing plans; (c) non-public materials relating to the SDK or AirWatch products, and (d) the terms and conditions of this Agreement. Company shall keep all Confidential Information it receives confidential using the same protections that it applies to its own information of like importance, but in no event less than reasonable care, and may use such information solely for the purposes contemplated by this Agreement or as otherwise agreed in writing. Confidential Information may be disclosed solely to employees, contractors and consultants who have a legitimate need to know the Confidential Information and are bound to confidentiality restrictions substantially equivalent to this Section 11 and who are not working on Company products or services that are competitive with AirWatch\u2019s and its affiliates\u2019 products and services. This Section will not apply to information that: (a) was rightfully in possession of the recipient prior to receipt of such Confidential Information from the discloser; (b) is or becomes a matter of public knowledge through no fault of the party receiving such Confidential Information hereunder; (c) is rightfully received from a third party without a duty of confidentiality; (d) is independently developed by recipient without breach of any confidentiality obligations; or (e) is disclosed by recipient with discloser\u2019s written approval; (f) the recipient is required to disclose by applicable law or court order, or (g) in confidence, in connection with an actual or proposed merger, acquisition, or similar transaction. In addition, recipient will be allowed to disclose (i) discloser\u2019s Confidential Information to the extent that such disclosure is required by law or by the order of a court or similar judicial or administrative body, provided that recipient notifies discloser of such required disclosure promptly and in writing and cooperates with discloser, at discloser\u2019s request and expense, in any lawful action to contest or limit the scope of such required disclosure, (ii) the terms and conditions of this Agreement in confidence in connection with an actual or proposed merger, acquisition, or similar transaction. The parties acknowledge that breach of this Section 11 may cause irreparable damage to the discloser for which monetary damages will be an inadequate remedy. Accordingly, the discloser will be entitled to seek and obtain injunctive and any relief (legal or equitable) to restrain any breach or anticipated breach of this Section 11. No party has the right to issue media releases, public announcements or public disclosures relating to the existence of or the terms of this Agreement or use the other party\u2019s name in any promotional or marketing material (other than as required by legal, accounting or regulatory requirements).</p> </li> </ol> <p>General.</p> <p>12.1 Governing Law/Venue This Agreement will be governed and interpreted in accordance with the laws of the State of California, without regard to conflict of law principles. Venue for any legal action is proper in the state courts of Santa Clara County, California, and the federal courts of the Northern District of California and each party expressly consents to venue and jurisdiction of those courts.</p> <p>12.2 Assignment This Agreement may not be assigned in whole or in part, by operation of law or otherwise, by either party without the prior written consent of the other party. Notwithstanding the forgoing, AirWatch may assign this Agreement in connection with merger, a corporate reorganization, or the transfer of substantially all of the assets of the business to which this Agreement relates. This Agreement will bind and inure to the benefit of the parties and their permitted assigns.</p> <p>12.3 Entire Agreement. This Agreement constitutes the entire agreement between the parties pertaining to the subject matter hereof, and supersedes entirely all written or oral agreements previously existing between the parties with respect to that subject matter. Each of the parties acknowledges that it is not entering into this Agreement on the basis of any representations other than those representations contained expressly in this Agreement. Any modifications of this Agreement must be in writing and signed by both parties hereto. If any provision of this Agreement is held to be illegal, invalid, or unenforceable, the parties agree to comply with the provision to the maximum extent permissible so as to affect the intent of the parties, and the remaining provisions of this Agreement remain in full force and effect.</p> <p>12.4 Export Control. Company acknowledges that the SDK is of United States origin, is provided subject to the U.S. Export Administration Regulations, may be subject to the export control laws of the applicable territory, and that diversion contrary to applicable export control laws is prohibited. Company represents, warrants and covenants that (1) Company is not, and is not acting on behalf of, (a) any person who is a citizen, national, or resident of, or who is controlled by the government of any country to which the United States has prohibited export transactions; or (b) any person or entity listed on the U.S. Treasury Department list of Specially Designated Nationals and Blocked Persons, or the U.S. Commerce Department Denied Persons List or Entity List; and (2) Company will not permit the SDK to be used for any purposes prohibited by law, including, any prohibited development, design, manufacture or production of missiles or nuclear, chemical or biological weapons.</p> <p>12.5 Data Privacy. Company agrees that AirWatch may periodically collect, process and store technical and related information about Company\u2019s device, system, application, peripherals and Company\u2019s use of the SDK, including without limitation: internet protocol address, hardware identification, operating system, application software, peripheral hardware, number of active plugins and software development kits, the successful installation and launch of SDK, and SDK usage statistics (collectively, \u201cTechnical Data\u201d). AirWatch will use Technical Data for internal statistical and analytical purposes to facilitate support, invoicing or online services, the provisioning of updates, and the development of AirWatch products and services. AirWatch may transfer Technical Data to other companies in the AirWatch worldwide group of companies from time to time.  Company acknowledges that correspondence and log files generated in conjunction with a request for support services may contain sensitive, confidential or personal information. Company is solely responsible for taking the steps necessary to protect such data, including obfuscating the logs or otherwise guarding such information prior to sending it to AirWatch.</p> <p>12.6 Relationship of Parties. The relationship of the parties during the term of this Agreement is that of independent third parties. Neither party has, nor no party has the right to represent that it has any power, right or authority to bind the other party, or to assume or create any obligation or responsibility, express or implied, on behalf of the other party or in the other party\u2019s name. Nothing stated in this Agreement may be construed as creating a partnership between the parties, creating the relationships of employer/employee, franchiser/franchisee, or principal/agent between the parties. 12.7 Notices. Notices to either party must be in writing and must be delivered in person, by United States mail, first\u2011class certified mail, postage prepaid, return receipt requested, or by a express courier service addressed as stated at the beginning of this Agreement.</p> <ol> <li>Open Source Licenses https://www.vmware.com/content/dam/aw-microsites/open-source/assets/open_source_license_VMware_Cordova_23.07_GA.txt</li> </ol>"},{"location":"IntegrationGuideForFlutter/","title":"ws1-sdk-flutter","text":"<p>Use this document to install the VMware Workspace One SDK Plugin for Flutter. The plugin helps enterprise app developers add enterprise-grade security, conditional access, and compliance capabilities to mobile applications.</p>"},{"location":"IntegrationGuideForFlutter/#package-installation","title":"Package installation","text":"<p>Add plugin as dependency to the application pubspec.yaml</p> <pre><code>dependencies:\n  flutter:\n    sdk: flutter\n\n  workspaceone_sdk_flutter:^23.10.0\n</code></pre> <p><code>$  dart pub get</code></p>"},{"location":"IntegrationGuideForFlutter/#supported-components","title":"Supported Components","text":"<p>This plugin works with the listed component versions.</p> <ul> <li>Workspace ONE UEM Console 2109+ (may need to be higher depending on specific features)</li> <li>Android 5.0+ (for Android SDK component) / API level 21 OR above / Android Studio with the Gradle Android Build System (Gradle) 3.3.0 or later / Workspace ONE Intelligent Hub for Android version 21.9 or later</li> <li>iOS 14.0+ (for iOS SDK component) / Xcode 14.0.1 or later</li> </ul>"},{"location":"IntegrationGuideForFlutter/#initial-setup","title":"Initial Setup","text":"<p>Please find the Prerequisites for using the Flutter SDK </p>"},{"location":"IntegrationGuideForFlutter/#additional-setup","title":"Additional Setup","text":""},{"location":"IntegrationGuideForFlutter/#ios","title":"iOS","text":"<ol> <li> <p>Add the AWSDK through Swift Package Manager.    Click here for integrating the AWSDK framework through Swift Package Manager</p> </li> <li> <p>Add following code in AppDelegate <pre><code>-(BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary&lt;UIApplicationOpenURLOptionsKey,id&gt; *)options\n{\n  //Add following code for posting Notification for URL\n  NSNotification *info = [[NSNotification alloc]initWithName:@\"UIApplicationOpenURLOptionsSourceApplicationKey\" object:url userInfo:options];\n  [[NSNotificationCenter defaultCenter] postNotification:info];\n\n  return YES;\n}\n</code></pre></p> </li> <li>Add Post Install script in Podfile.</li> </ol> <pre><code>post_install do |installer|\n  installer.pods_project.targets.each do |target|\n    flutter_additional_ios_build_settings(target)\n  end\n  # Add this line to get the AWSDK Swift Package from SPM\n  $workspaceone_sdk_flutter.post_install(installer)\nend\n</code></pre>"},{"location":"IntegrationGuideForFlutter/#android","title":"Android","text":"<ol> <li>Modify AndroidManifest.xml for Main Launcher <pre><code>     &lt;activity\n        android:name=\".MainActivity\"\n        android:label=\"@string/app_name\"\n        android:configChanges=\"keyboard|keyboardHidden|orientation|screenSize|uiMode\"\n        android:launchMode=\"singleTask\"\n        android:windowSoftInputMode=\"adjustResize\"&gt;\n    &lt;/activity&gt;\n    &lt;activity\n        android:name=\"com.airwatch.login.ui.activity.SDKSplashActivity\" android:label=\"@string/app_name\"&gt;\n        &lt;intent-filter&gt;\n            &lt;action android:name=\"android.intent.action.MAIN\" /&gt;\n            &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt; \n        &lt;/intent-filter&gt;\n    &lt;/activity&gt;\n</code></pre></li> <li>Update your Main Activity <pre><code>    import com.vmware.workspaceone_sdk_flutter.WorkspaceOneSdkActivity\n    class MainActivity: WorkspaceOneSdkActivity() {\n    }\n</code></pre></li> <li> <p>Add WS1EventImpl <pre><code>import android.content.Context\nimport android.os.Bundle\nimport android.util.Log\nimport com.airwatch.sdk.profile.AnchorAppStatus\nimport com.airwatch.sdk.profile.ApplicationProfile\nimport com.airwatch.sdk.shareddevice.ClearReasonCode\nimport com.airwatch.event.WS1AnchorEvents\nimport org.koin.core.component.KoinComponent\n\nclass WS1EventImpl : WS1AnchorEvents,KoinComponent {\noverride fun onApplicationConfigurationChange(bundle: Bundle?, context: Context) {}\noverride fun onApplicationProfileReceived(context: Context, s: String, applicationProfile: ApplicationProfile) {\nLog.d(\"SDK Init\", \"onApplicationProfileReceived\")\n}\n\n    override fun onClearAppDataCommandReceived(context: Context, clearReasonCode: ClearReasonCode) {\n        Log.d(\"SDK Init\", \"onClearAppDataCommandReceived\")\n    }\n\n    override fun onAnchorAppStatusReceived(context: Context, anchorAppStatus: AnchorAppStatus) {}\n    override fun onAnchorAppUpgrade(context: Context, b: Boolean) {}\n}\n</code></pre></p> </li> <li> <p>Update your Android Application subclass as follows</p> <ul> <li>Declare that the class implements the WorkspaceOneSDKApplication interface.</li> <li>Move the code from the body of your onCreate method, if any, to an override of the AWSDKApplication onPostCreate method.</li> <li>Override the AWSDKApplication getMainActivityIntent() method to return an Intent for the application\u2019s main Activity.</li> <li>Override the following Android Application methods:<ul> <li>attachBaseContext</li> </ul> </li> </ul> </li> </ol> <pre><code>    import com.vmware.workspaceone_sdk_flutter.WorkspaceOneSdkApplication\n    class MainApplication : WorkspaceOneSdkApplication() {\n\n        // Application-specific overrides : Comment onCreate() out and move the code to onPostCreate()\n\n        //  @Override\n        //  public void onCreate() {\n        //    super.onCreate();\n        //  }\n\n        // Application-specific overrides : Copy all the code from onCreate() to onPostCreate()\n        override fun onPostCreate() {\n            super.onPostCreate()\n        }\n\n        override fun attachBaseContext(base: Context?) {\n            super.attachBaseContext(base)\n            attachBaseContext(this)\n        }\n\n        override fun getMainActivityIntent(): Intent {\n            return Intent(this,MainActivity::class.java)\n        }\n\n        override fun getEventHandler(): WS1AnchorEvents {\n            return WS1EventImpl()\n        }\n    }\n</code></pre>"},{"location":"IntegrationGuideForFlutter/#feature-description","title":"Feature Description","text":"<p>Initialization of the SDK adds the listed features to your application, depending on the configurations set in the SDK profile in the Workspace One UEM Console.</p> <ul> <li>Application level passcode</li> <li>Application level tunneling of network traffic</li> <li>Integrated authentication / single sign on</li> <li>Data loss prevention<ul> <li>Disable Screenshot (Android only)</li> <li>Restrict open-in for documents, web links, and email to approved applications only Restrict copy/paste (SDK provides flag value)</li> <li>Restrict access to app when device is offline</li> <li>Branding of VMware AirWatch splash screens when SDK application is launched on device</li> </ul> </li> </ul>"},{"location":"IntegrationGuideForFlutter/#feature-implementation","title":"Feature Implementation","text":"<p>Please follow document at implementation.</p>"},{"location":"IntegrationGuideForFlutter/#release-notes","title":"Release Notes","text":"<ul> <li>First release of Workspace One SDK for Flutter support.</li> <li>Latest versions of Workspace One SDKs (23.4.0 for iOS and 23.04 for Android).</li> </ul>"},{"location":"IntegrationGuideForFlutter/#workspace-one-sdk-documentation","title":"Workspace One SDK Documentation","text":"<p>For further details about the Workspace One SDK, navigate to https://my.workspaceone.com/products/Workspace-ONE-SDK and select the required platform, SDK version and Workspace ONE UEM console version.</p>"},{"location":"IntegrationGuideForFlutter/#questions-and-feedback","title":"Questions and Feedback","text":"<p>For any questions/feedback or to report an issue, please reach out to VMware support teams at https://secure.workspaceone.com/login</p>"},{"location":"IntegrationGuideForFlutter/GettingStarted/","title":"VMware Workspace ONE Software Development Kit (SDK)","text":""},{"location":"IntegrationGuideForFlutter/GettingStarted/#ios-and-android-getting-started","title":"iOS And Android - Getting Started","text":"<p>This document explains how to integrate the Workspace ONE SDKs into your Flutter-built apps.</p> <p>For detailed information about the Workspace ONE SDK and managing internal apps, See the VMware Workspace ONE UEM Mobile Application Management Guide and the VMware Workspace ONE SDK Technical Implementation Guides located on the Workspace ONE Resources Portal at https://my.workspaceone.com/products/Workspace-ONE-SDK</p>"},{"location":"IntegrationGuideForFlutter/GettingStarted/#ios-overview","title":"iOS Overview","text":"<p>In order to inject Workspace ONE SDK functionality into your  Flutter AWSDK App, integrate the two systems.</p>"},{"location":"IntegrationGuideForFlutter/GettingStarted/#requirements","title":"Requirements","text":"<ul> <li>iOS 14.0+ (for iOS SDK component) / Xcode 14.x</li> <li>Visual Studio Code </li> <li>Workspace ONE-enrolled iOS test device</li> <li>The Workspace ONE Flutter SDK  package from pub.dev.</li> <li>A Flutter iOS app to integrate with the Workspace ONE SDK ** If you do not have a suitable application, you can create a new application and integrate the SDK into that.</li> </ul>"},{"location":"IntegrationGuideForFlutter/GettingStarted/#add-app-to-the-workspace-one-uem-console","title":"Add App to the Workspace ONE UEM Console","text":"<p>Upload your internal app to the Workspace ONE UEM Console to register it with the system. This step enables UEM Console to identify the app and to add functionality to it. The Workspace ONE UEM MAM Guide details how to upload an internal app.</p> <ol> <li>In Flutter, export the app as a signed IPA.</li> <li>Log into the Workspace ONE UEM Console as an administrator.</li> <li>Navigate to Apps &amp; Books &gt; Applications &gt; List View &gt; Internal and then choose Add Application.</li> <li>Select Upload &gt; Local File, add the IPA file, and select Continue.</li> <li>Select More and choose SDK.</li> <li>Select the iOS Default Settings profile in the SDK Profile field.</li> <li>Select Save and Assign to continue to the Assignment page.</li> <li>Assign the app to a smart group and select a Push Mode.</li> <li>Select Add, and Save &amp; Publish the app to complete the upload process.</li> </ol>"},{"location":"IntegrationGuideForFlutter/GettingStarted/#enable-communication-between-the-intelligent-hubformerly-airwatch-agent-and-the-fltter-ipa-file","title":"Enable Communication Between the Intelligent Hub(formerly AirWatch Agent) and the Fltter IPA File","text":"<p>Expose a custom scheme in the Info.plist file in the Flutter project to enable the app to receive a call back from the Intelligent Hub. Your app receives communications from the Workspace ONE UEM Console through the Intelligent Hub. To expose the scheme, add a callback scheme registration and add a query scheme to your Flutter project.</p>"},{"location":"IntegrationGuideForFlutter/GettingStarted/#add-callback-scheme-registration","title":"Add Callback Scheme Registration","text":"<ol> <li>In Xcode, navigate to Supporting Files.</li> <li>Select the file  -Info.plist. <li>Navigate to the URL Types section.</li> <li>If it does not exist, add it at the Information Property List root node of the PLIST.</li> <li>In the URL Types section, choose the Add URL Type button.</li> <li>Set the values of Identifier and URL Schemes to the desired callback scheme.</li> <li>Set the Role to Editor.</li> <li>Configure trust for all Workspace ONE UEM anchor application schemes under the LSApplicationQueriesSchemes entry in the Information Property List.</li> <li>Within the Array,  Add following 3 values for  anchor application.</li> <li>Type String  and Value airwatch.</li> <li>Type String  and Value  awws1enroll.</li> <li>Type String  and Value   wsonesdk.</li>"},{"location":"IntegrationGuideForFlutter/GettingStarted/#add-support-for-qr-scan-and-faceid","title":"Add Support for QR Scan and FaceId","text":""},{"location":"IntegrationGuideForFlutter/GettingStarted/#qr-scan","title":"QR Scan","text":"<p>Include NSCameraUsageDescription in the application info.plist file to enable the SDK to scan QR codes with the device camera. Provide a description that devices prompt users to allow the application to enable this feature.</p>"},{"location":"IntegrationGuideForFlutter/GettingStarted/#faceid","title":"FaceID","text":"<p>Include NSFaceIDUsageDescription in the application info.plist file to enable the SDK to use FaceID. Provide a description that devices prompt users to allow the application to enable this feature. Consider controlling the message users read. If you do not include a description, the iOS system prompts users with native messages that might not align with the capabilities of the application.</p>"},{"location":"IntegrationGuideForFlutter/GettingStarted/#android-overview","title":"Android Overview","text":"<p>To integrate Workspace ONE Android SDK Flutter components into an existing Flutter Android app follow described steps.</p>"},{"location":"IntegrationGuideForFlutter/GettingStarted/#requirements_1","title":"Requirements","text":"<ul> <li>Android 8.0+ (for Android SDK component) / API level 23 OR above / Android Studio with the Gradle Android Build System (Gradle) 4.1.3 or later </li> <li>Visual Studio Code </li> <li>Android test device running Lollipop and above.</li> <li>Intelligent Hub for Android from Google Playstore.</li> <li>Whitelisted Release/Debug signing key as explained below should be used for signing the Flutter android application.</li> </ul>"},{"location":"IntegrationGuideForFlutter/GettingStarted/#whitelist-signing-key","title":"Whitelist Signing Key","text":"<p>Before you can begin using the Workspace ONE SDK, you must ensure your application signing key is whitelisted with your Workspace ONE UEM Console. When your SDK-integrated application starts up, the SDK checks the signing public key with which it is signed. It compared againt the list of whitelisted apps to determine whether your application is trusted.</p> <p>Workspace ONE allows whitelisting for both apps deployed internally or deployed through a public app store.</p>"},{"location":"IntegrationGuideForFlutter/GettingStarted/#internally-deployed-applications","title":"Internally Deployed Applications","text":"<ol> <li>After building the application apk, sign it using your own specific app signing key.</li> <li>Upload the signed apk file to the Workspace ONE UEM Console as described below. Workspace ONE UEM Console extracts the application's public signing key and adds it to the whitelisted apps list     a) Log into the Workspace ONE UEM Console as an administrator.     b) Navigate to Apps &amp; Books &gt; Applications &gt; List View &gt; Internal and then choose Add Application.     c) Select Upload &gt; Local File, add the APK file, and select Continue.     d) Select More and choose SDK.     e) Select the Android Default Settings profile in the SDK Profile field.     f) Select Save and Assign to continue to the Assignment page.     g) Assign the app to a smart group and select a Push Mode.     h) Select Add, and Save &amp; Publish the app to complete the upload process.</li> </ol>"},{"location":"IntegrationGuideForFlutter/GettingStarted/#publicly-deployed-applications","title":"Publicly Deployed Applications","text":"<p>For applications that are deployed publicly through the Play Store, send the public signing key of the application to AirWatch for whitelisting.</p> <p>Note: Contact your professional services representative for the process of whitelisting the public signing key.</p>"},{"location":"IntegrationGuideForFlutter/GettingStarted/#push-app-to-dev-device-using-app-catalog","title":"Push App to Dev Device using App Catalog","text":"<p>In order for the Intelligent Hub to manage an app, it needs to be sent to the device.  This can be done via an installation policy of Automatic or by pushing the app down once using the Hub's APP CATALOG.  Once the app is listed in the Managed Apps section of the Hub, it is ready for local management.</p>"},{"location":"IntegrationGuideForFlutter/GettingStarted/#usage","title":"Usage","text":""},{"location":"IntegrationGuideForFlutter/GettingStarted/#initialize-the-sdk","title":"Initialize the SDK","text":"<p>```dart to initialize the SDK import 'package:flutter/material.dart'; import 'dart:async';</p> <p>import 'package:flutter/services.dart'; import 'package:workspaceone_sdk_flutter/workspaceone_sdk_flutter.dart';</p> <p>class MyApp extends StatefulWidget {   @override   _MyAppState createState() =&gt; _MyAppState(); }</p> <p>class _MyAppState extends State {   @override   void initState() {     super.initState();     initSDK(); <pre><code>const channel = EventChannel('workspaceone_sdk_event');\nchannel.receiveBroadcastStream().listen((dynamic event) {\n  print('Received event: $event'); //initSuccess or initFailure\n}, onError: (dynamic error) {\n  print('Received error: ${error.message}');\n\n});\n</code></pre> <p>}</p> <p>// Platform messages are asynchronous, so we initialize in an async method.   Future initSDK() async {     // Platform messages may fail, so we use a try/catch PlatformException.     try {       await WorkspaceoneSdkFlutter.startSDK;     } on PlatformException {       print('SDK Init Failed with Exception');     }   } } <pre><code>### Access Environment information\n```dart to access Environment info\nimport 'package:flutter/material.dart';\nimport 'dart:async';\n\nimport 'package:flutter/services.dart';\nimport 'package:workspaceone_sdk_flutter/workspaceone_sdk_flutter.dart';\n\nclass Information extends StatefulWidget {\n  @override\n  _Information createState() =&gt; _Information();\n\n}\n\nclass _Information extends State&lt;Information&gt; {\n\n  String _userName = \"Unknown\";\n  String _groupId = \"Unknown\";\n  String _serverName = \"Unknown\";\n\n @override\n  void initState() {\n    super.initState();\n    getUser();\n    getGroupID();\n    getServer();\n  }\n// Platform messages are asynchronous, so we initialize in an async method.\n  Future&lt;void&gt; getUser() async {\n    String user;\n    // Platform messages may fail, so we use a try/catch PlatformException.\n    try {\n      user = await WorkspaceoneSdkFlutter.userName;\n    } on PlatformException {\n      print('Failed to get user name.');\n    }\n\n    // If the widget was removed from the tree while the asynchronous platform\n    // message was in flight, we want to discard the reply rather than calling\n    // setState to update our non-existent appearance.\n    if (!mounted) return;\n\n    setState(() {\n      _userName = user;\n    });\n  }\n\n// Platform messages are asynchronous, so we initialize in an async method.\n  Future&lt;void&gt; getGroupID() async {\n    String groupId;\n    // Platform messages may fail, so we use a try/catch PlatformException.\n    try {\n      groupId = await WorkspaceoneSdkFlutter.groupId;\n    } on PlatformException {\n      print('Failed to get group id.');\n    }\n\n    // If the widget was removed from the tree while the asynchronous platform\n    // message was in flight, we want to discard the reply rather than calling\n    // setState to update our non-existent appearance.\n    if (!mounted) return;\n\n    setState(() {\n      _groupId = groupId;\n    });\n  }\n\n\n// Platform messages are asynchronous, so we initialize in an async method.\n  Future&lt;void&gt; getServer() async {\n    String serverName;\n    // Platform messages may fail, so we use a try/catch PlatformException.\n    try {\n      serverName = await WorkspaceoneSdkFlutter.serverName;\n    } on PlatformException {\n      print('Failed to get server name.');\n    }\n\n    // If the widget was removed from the tree while the asynchronous platform\n    // message was in flight, we want to discard the reply rather than calling\n    // setState to update our non-existent appearance.\n    if (!mounted) return;\n\n    setState(() {\n      _serverName = serverName;\n    });\n  }\n\n}\n</code></pre>"},{"location":"IntegrationGuideForFlutter/GettingStarted/#functions","title":"Functions","text":"<p>Functions available for Android and iOS</p> <p><pre><code>WorkspaceoneSdkFlutter.startSDK()\n</code></pre> This will start the SDK initailization and will be notified if SDK initialization is success/failure by events 'initSuccess'/'initFailure'.</p> <p><pre><code>WorkspaceoneSdkFlutter.userName\n</code></pre> Gets the enrolled user's username. The username is returned as a string. On iOS using this API may show a screen to enter username and password if the app gets registered to WSOne UEM console via managed settings.</p> <p><pre><code>WorkspaceOneSdk.groupId\n</code></pre> Gets the enrolled user's group ID. The group ID will be returned as a string.</p> <p><pre><code>WorkspaceOneSdk.serverName\n</code></pre> Get the name of the server to which the device is enrolled. The server name will be returned as a string.</p> <p><pre><code>WorkspaceOneSdk.allowCopyPaste\n</code></pre> Gets the \"allow copy/paste\" setting for the profile. If true, then the user can copy and paste between managed apps. If false then the user cannot copy and paste between managed apps. The value is returned as a boolean.</p> <p><pre><code>WorkspaceOneSdk.customSettings\n</code></pre> Gets any custom settings provided in the app's profile. The value will be returned as a string parameter.</p>"},{"location":"IntegrationGuideForFlutter/GettingStarted/#feature-implementation","title":"Feature Implementation","text":""},{"location":"IntegrationGuideForFlutter/GettingStarted/#branding","title":"Branding","text":""},{"location":"IntegrationGuideForFlutter/GettingStarted/#ios","title":"iOS","text":"<p>To enable brancding add AWSDKDefaultSettings.plist to app bundle and add new entries to the plist. For details on the entries to be added to enable branding in your app, navigate to https://code.vmware.com/web/sdk/Native/airwatch-ios and search for Branding.</p>"},{"location":"IntegrationGuideForFlutter/GettingStarted/#android","title":"Android","text":"<p>Please follow the steps mentioned in https://github.com/vmware-samples/workspace-ONE-SDK-integration-samples/blob/main/IntegrationGuideForAndroid/Guides/04Branding/WorkspaceONE_Android_Branding.md to brand the splash screen, the app logo gets branded as per the images from the WS1 UEM console branding payload.</p>"},{"location":"IntegrationGuideForFlutter/GettingStarted/#sso","title":"SSO","text":""},{"location":"IntegrationGuideForFlutter/GettingStarted/#ios_1","title":"iOS","text":"<p>To enable multiple apps built with the plugin share common authentication session and other SDK info, please follow the steps mentioned in the document at https://code.vmware.com/web/sdk/Native/airwatch-ios under section \"Keychain Access Group Entitlements\".</p>"},{"location":"IntegrationGuideForFlutter/GettingStarted/#android_1","title":"Android","text":"<p>Nothing specific coding /configuration to be done on Android.</p>"},{"location":"IntegrationGuideForFlutter/GettingStarted/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForFlutter/ios/Runner/Assets.xcassets/LaunchImage.imageset/","title":"Launch Screen Assets","text":"<p>You can customize the launch screen with your own desired assets by replacing the image files in this directory.</p> <p>You can also do it by opening your Flutter project's Xcode project with <code>open ios/Runner.xcworkspace</code>, selecting <code>Runner/Assets.xcassets</code> in the Project Navigator and dropping in the desired images.</p>"},{"location":"IntegrationGuideForReactNative/","title":"ws1-sdk-react-native","text":"<p>Use this document to install the VMware Workspace One SDK Plugin for React-Native. The plugin helps enterprise app developers add enterprise- grade security, conditional access, and compliance capabilities to mobile applications.</p>"},{"location":"IntegrationGuideForReactNative/#supported-components","title":"Supported Components","text":"<p>This plugin works with the listed component versions.</p> <ul> <li>Workspace ONE UEM Console 2203+ (may need to be higher depending on specific features)</li> <li>Android 8.0+ (for Android SDK component) / API level 23 OR above / Android Studio with the Gradle Android Build System (Gradle) 4.1.3 or later</li> <li>iOS 14.0+ (for iOS SDK component) / Xcode 14.x</li> </ul>"},{"location":"IntegrationGuideForReactNative/#initial-setup","title":"Initial Setup","text":"<p>Please find the Prerequisites for using the React Native SDK </p>"},{"location":"IntegrationGuideForReactNative/#package-installation","title":"Package installation","text":"<p><code>$ npm install ws1-sdk-react-native --save</code></p>"},{"location":"IntegrationGuideForReactNative/#mostly-automatic-installation","title":"Mostly automatic installation","text":"<p><code>$ react-native link ws1-sdk-react-native</code></p>"},{"location":"IntegrationGuideForReactNative/#additional-setup","title":"Additional Setup","text":""},{"location":"IntegrationGuideForReactNative/#ios","title":"iOS","text":"<p>Add following code in AppDelegate <pre><code>-(BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary&lt;UIApplicationOpenURLOptionsKey,id&gt; *)options\n{\n  //Add following code for posting Notification for URL\n  NSNotification *info = [[NSNotification alloc]initWithName:@\"UIApplicationOpenURLOptionsSourceApplicationKey\" object:url userInfo:options];\n  [[NSNotificationCenter defaultCenter] postNotification:info];\n\n  return YES;\n}\n</code></pre></p>"},{"location":"IntegrationGuideForReactNative/#android","title":"Android","text":"<ol> <li> <p>Add the library files location to the application build configuration <pre><code>    repositories {\n    //Old implementation\n    // flatDir {\n    //     dirs \"$rootDir/../node_modules/ws1-sdk-react-native/android/libs\"\n    // }\n    //Change to new Maven URL\n    jcenter()\n        maven {\n            url 'https://vmwaresaas.jfrog.io/artifactory/Workspace-ONE-Android-SDK/'\n        }\n    }\n</code></pre></p> </li> <li> <p>Modify AndroidManifest.xml for Main Launcher <pre><code>        &lt;activity\n            android:name=\".MainActivity\"\n            android:label=\"@string/app_name\"\n            android:configChanges=\"keyboard|keyboardHidden|orientation|screenSize|uiMode\"\n            android:launchMode=\"singleTask\"\n            android:windowSoftInputMode=\"adjustResize\"&gt;\n\n        &lt;/activity&gt;\n        &lt;activity\n            android:name=\"com.airwatch.login.ui.activity.SDKSplashActivity\" android:label=\"@string/app_name\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"android.intent.action.MAIN\" /&gt;\n                &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt; \n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n</code></pre></p> </li> <li> <p>Update your Main Activity  <pre><code>import com.workspaceonesdk.WorkspaceOneSdkActivity;\npublic class MainActivity extends WorkspaceOneSdkActivity {\n\n  /**\n   * Returns the name of the main component registered from JavaScript. This is used to schedule\n   * rendering of the component.\n   */\n  @Override\n  protected String getMainComponentName() {\n    return \"example\";\n  }\n}\n</code></pre></p> </li> <li> <p>Add SDKEventImplClass as below</p> </li> </ol> <p><pre><code>import com.workspaceonesdk.WorkspaceOneSdkApplication;\npublic class MainApplication extends WorkspaceOneSdkApplication implements ReactApplication {\n\n    // Application-specific overrides : Comment onCreate() out and move the code to onPostCreate()\n\n    //  @Override\n    //  public void onCreate() {\n    //    super.onCreate();\n    //  }\n\n    // Application-specific overrides : Copy all the code from onCreate() to onPostCreate()\n    @Override\n    public void onPostCreate() {\n        super.onPostCreate();\n        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());\n        preferences.edit().putString(\"debug_http_host\", \"localhost:8088\").apply();\n        SoLoader.init(this, /* native exopackage */ false);\n        initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n\n        // Code from the application's original onCreate() would go here\n    }\n\n\n    public void attachBaseContext(@NotNull Context base) {\n        super.attachBaseContext(base);\n        attachBaseContext(this);\n    }\n\n\n    @NotNull\n    @Override\n    public Intent getMainActivityIntent() {\n        // Replace MainActivity with application's original main activity\n        return new Intent(getApplicationContext(), MainActivity.class);\n    }\n\n    @NotNull\n    @Override\n    public WS1AnchorEvents getEventHandler() {\n        return new SDKEventImpl();\n    }\n}\n</code></pre> 4. Update your Android Application subclass as follows     -  Declare that the class implements the WorkspaceOneSDKApplication interface.     -  Move the code from the body of your onCreate method, if any, to an override of the AWSDKApplication onPostCreate method.     -  Override the AWSDKApplication getMainActivityIntent() method to return an Intent for the application\u2019s main Activity.     -  Override the following Android Application methods:         - attachBaseContext</p> <pre><code>import com.workspaceonesdk.WorkspaceOneSdkApplication;\npublic class MainApplication extends WorkspaceOneSdkApplication implements ReactApplication {\n\n    // Application-specific overrides : Comment onCreate() out and move the code to onPostCreate()\n\n    //  @Override\n    //  public void onCreate() {\n    //    super.onCreate();\n    //  }\n\n    // Application-specific overrides : Copy all the code from onCreate() to onPostCreate()\n    @Override\n    public void onPostCreate() {\n        super.onPostCreate();\n        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());\n        preferences.edit().putString(\"debug_http_host\", \"localhost:8088\").apply();\n        SoLoader.init(this, /* native exopackage */ false);\n        initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n\n        // Code from the application's original onCreate() would go here\n    }\n\n\n    public void attachBaseContext(@NotNull Context base) {\n        super.attachBaseContext(base);\n        attachBaseContext(this);\n    }\n\n\n    @NotNull\n    @Override\n    public Intent getMainActivityIntent() {\n        // Replace MainActivity with application's original main activity\n        return new Intent(getApplicationContext(), MainActivity.class);\n    }\n\n    @NotNull\n    @Override\n    public WS1AnchorEvents getEventHandler() {\n        return new SDKEventImpl();\n    }\n}\n</code></pre>"},{"location":"IntegrationGuideForReactNative/#feature-description","title":"Feature Description","text":"<p>Initialization of the SDK adds the listed features to your application, depending on the configurations set in the SDK profile in the Workspace One UEM Console.</p> <ul> <li>Application level passcode</li> <li>Application level tunneling of network traffic</li> <li>Integrated authentication / single sign on</li> <li>Data loss prevention<ul> <li>Disable Screenshot (Android only)</li> <li>Restrict open-in for documents, web links, and email to approved applications only Restrict copy/paste (SDK provides flag value)</li> <li>Restrict access to app when device is offline</li> <li>Branding of VMware AirWatch splash screens when SDK application is launched on device</li> </ul> </li> </ul> <p>## Feature Implementation  Please follow document at implementation.</p>"},{"location":"IntegrationGuideForReactNative/#release-notes","title":"Release Notes","text":"<ul> <li>Updated Version of WorkspaceOne SDKs(23.7 for iOS and Android)<ul> <li>Change build.gradle for Maven URL as mentioned above in Android Implementation</li> </ul> </li> </ul>"},{"location":"IntegrationGuideForReactNative/#workspace-one-sdk-documentation","title":"Workspace One SDK Documentation","text":"<p>For further details about the Workspace One SDK, navigate to Workspace-ONE-SDK and select the required platform, SDK version and Workspace ONE UEM console version.</p>"},{"location":"IntegrationGuideForReactNative/#questions-and-feedback","title":"Questions and Feedback","text":"<p>For any questions/feedback or to report an issue, please reach out to VMware support teams</p>"},{"location":"IntegrationGuideForReactNative/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForReactNative/GettingStarted/","title":"VMware Workspace ONE Software Development Kit (SDK)","text":""},{"location":"IntegrationGuideForReactNative/GettingStarted/#ios-and-android-getting-started","title":"iOS And Android - Getting Started","text":"<p>This document explains how to integrate the Workspace ONE SDKs into your React-Native-built apps.</p> <p>For detailed information about the Workspace ONE SDK and managing internal apps, See the VMware Workspace ONE UEM Mobile Application Management Guide and the VMware Workspace ONE SDK Technical Implementation Guides located on the Workspace ONE Resources Portal at https://my.workspaceone.com/products/Workspace-ONE-SDK</p>"},{"location":"IntegrationGuideForReactNative/GettingStarted/#ios-overview","title":"iOS Overview","text":"<p>In order to inject Workspace ONE SDK functionality into your  React-Native AWSDK App, integrate the two systems.</p>"},{"location":"IntegrationGuideForReactNative/GettingStarted/#requirements","title":"Requirements","text":"<ul> <li>iOS 14.0+ (for iOS SDK component) / Xcode 14.x</li> <li>Visual Studio Code </li> <li>Workspace ONE-enrolled iOS test device</li> <li>The Workspace ONE React-Native SDK  package from npm.</li> <li>A React-Native iOS app to integrate with the Workspace ONE SDK ** If you do not have a suitable application, you can create a new application and integrate the SDK into that.</li> </ul>"},{"location":"IntegrationGuideForReactNative/GettingStarted/#add-app-to-the-workspace-one-uem-console","title":"Add App to the Workspace ONE UEM Console","text":"<p>Upload your internal app to the Workspace ONE UEM Console to register it with the system. This step enables UEM Console to identify the app and to add functionality to it. The Workspace ONE UEM MAM Guide details how to upload an internal app.</p> <ol> <li>In React-Native, export the app as a signed IPA.</li> <li>Log into the Workspace ONE UEM Console as an administrator.</li> <li>Navigate to Apps &amp; Books &gt; Applications &gt; List View &gt; Internal and then choose Add Application.</li> <li>Select Upload &gt; Local File, add the IPA file, and select Continue.</li> <li>Select More and choose SDK.</li> <li>Select the iOS Default Settings profile in the SDK Profile field.</li> <li>Select Save and Assign to continue to the Assignment page.</li> <li>Assign the app to a smart group and select a Push Mode.</li> <li>Select Add, and Save &amp; Publish the app to complete the upload process.</li> </ol>"},{"location":"IntegrationGuideForReactNative/GettingStarted/#enable-communication-between-the-intelligent-hubformerly-airwatch-agent-and-the-react-native-ipa-file","title":"Enable Communication Between the Intelligent Hub(formerly AirWatch Agent) and the React-Native IPA File","text":"<p>Expose a custom scheme in the Info.plist file in the React-Native project to enable the app to receive a call back from the Intelligent Hub. Your app receives communications from the Workspace ONE UEM Console through the Intelligent Hub. To expose the scheme, add a callback scheme registration and add a query scheme to your React-Native project.</p>"},{"location":"IntegrationGuideForReactNative/GettingStarted/#add-callback-scheme-registration","title":"Add Callback Scheme Registration","text":"<ol> <li>In Xcode, navigate to Supporting Files.</li> <li>Select the file  -Info.plist. <li>Navigate to the URL Types section.</li> <li>If it does not exist, add it at the Information Property List root node of the PLIST.</li> <li>In the URL Types section, choose the Add URL Type button.</li> <li>Set the values of Identifier and URL Schemes to the desired callback scheme.</li> <li>Set the Role to Editor.</li> <li>Configure trust for all Workspace ONE UEM anchor application schemes under the LSApplicationQueriesSchemes entry in the Information Property List.</li> <li>Within the Array,  Add following 3 values for  anchor application.</li> <li>Type String  and Value airwatch.</li> <li>Type String  and Value  awws1enroll.</li> <li>Type String  and Value   wsonesdk.</li>"},{"location":"IntegrationGuideForReactNative/GettingStarted/#add-support-for-qr-scan-and-faceid","title":"Add Support for QR Scan and FaceId","text":""},{"location":"IntegrationGuideForReactNative/GettingStarted/#qr-scan","title":"QR Scan","text":"<p>Include NSCameraUsageDescription in the application info.plist file to enable the SDK to scan QR codes with the device camera. Provide a description that devices prompt users to allow the application to enable this feature.</p>"},{"location":"IntegrationGuideForReactNative/GettingStarted/#faceid","title":"FaceID","text":"<p>Include NSFaceIDUsageDescription in the application info.plist file to enable the SDK to use FaceID. Provide a description that devices prompt users to allow the application to enable this feature. Consider controlling the message users read. If you do not include a description, the iOS system prompts users with native messages that might not align with the capabilities of the application.</p>"},{"location":"IntegrationGuideForReactNative/GettingStarted/#android-overview","title":"Android Overview","text":"<p>To integrate Workspace ONE Android SDK React-Native components into an existing React-Native Android app follow described steps.</p>"},{"location":"IntegrationGuideForReactNative/GettingStarted/#requirements_1","title":"Requirements","text":"<ul> <li>Android 8.0+ (for Android SDK component) / API level 23 OR above / Android Studio with the Gradle Android Build System (Gradle) 4.1.3 or later </li> <li>Visual Studio Code</li> <li>The Workspace ONE React-Native SDK  package from npm</li> <li>Android test device running Lollipop and above.</li> <li>Intelligent Hub for Android from Google Playstore.</li> <li>Whitelisted Release/Debug signing key as explained below should be used for signing the React-Native android application.</li> </ul>"},{"location":"IntegrationGuideForReactNative/GettingStarted/#whitelist-signing-key","title":"Whitelist Signing Key","text":"<p>Before you can begin using the Workspace ONE SDK, you must ensure your application signing key is whitelisted with your Workspace ONE UEM Console. When your SDK-integrated application starts up, the SDK checks the signing public key with which it is signed. It compared againt the list of whitelisted apps to determine whether your application is trusted.</p> <p>Workspace ONE allows whitelisting for both apps deployed internally or deployed through a public app store.</p>"},{"location":"IntegrationGuideForReactNative/GettingStarted/#internally-deployed-applications","title":"Internally Deployed Applications","text":"<ol> <li>After building the application apk, sign it using your own specific app signing key.</li> <li>Upload the signed apk file to the Workspace ONE UEM Console as described below. Workspace ONE UEM Console extracts the application's public signing key and adds it to the whitelisted apps list     a) Log into the Workspace ONE UEM Console as an administrator.     b) Navigate to Apps &amp; Books &gt; Applications &gt; List View &gt; Internal and then choose Add Application.     c) Select Upload &gt; Local File, add the APK file, and select Continue.     d) Select More and choose SDK.     e) Select the Android Default Settings profile in the SDK Profile field.     f) Select Save and Assign to continue to the Assignment page.     g) Assign the app to a smart group and select a Push Mode.     h) Select Add, and Save &amp; Publish the app to complete the upload process.</li> </ol>"},{"location":"IntegrationGuideForReactNative/GettingStarted/#publicly-deployed-applications","title":"Publicly Deployed Applications","text":"<p>For applications that are deployed publicly through the Play Store, send the public signing key of the application to AirWatch for whitelisting.</p> <p>Note: Contact your professional services representative for the process of whitelisting the public signing key.</p>"},{"location":"IntegrationGuideForReactNative/GettingStarted/#push-app-to-dev-device-using-app-catalog","title":"Push App to Dev Device using App Catalog","text":"<p>In order for the Intelligent Hub to manage an app, it needs to be sent to the device.  This can be done via an installation policy of Automatic or by pushing the app down once using the Hub's APP CATALOG.  Once the app is listed in the Managed Apps section of the Hub, it is ready for local management.</p>"},{"location":"IntegrationGuideForReactNative/GettingStarted/#usage","title":"Usage","text":"<p>```javascript to initialize the SDK import { NativeModules} from 'react-native'; const {WorkspaceOneSdk } = NativeModules;</p> <p>export default class App extends Component { componentDidMount() {</p> <pre><code> // Start SDK.\n  WorkspaceOneSdk.startSDK()\n  const eventEmitter = new NativeEventEmitter(NativeModules.WorkspaceOneSdk);\n  this.eventListner = eventEmitter.addListener('initSuccess',(event) =&gt; {\n    console.log(\"SDK Init Success\",event);\n  });\n  this.eventListner = eventEmitter.addListener('initFailure',(event) =&gt; {\n    console.log(\"SDK Init Failed\",event);\n  });\n</code></pre> <p>} } <pre><code>```javascript to access Environment info\nimport React, { Component } from 'react';\nimport { NativeModules,StyleSheet, View, Button,Platform, Text} from 'react-native';\nconst {WorkspaceOneSdk } = NativeModules;\nexport default class Information extends Component {\n\n    constructor(){\n\n        super();\n\n        this.state = {\n\n            UserName:'User Not Found',\n            GroupId: 'GroupId Not Found',\n            ServerName: 'Server Name Not Found'\n        }\n\n    }\n\n\n    componentDidMount = async() =&gt; {\n\n          try {\n           const  useName = await WorkspaceOneSdk.userName();\n            this.setState({\n                      UserName: 'User Name : ' + useName\n                  });\n          } catch (error) {\n            console.error(error);\n          }\n\n          try {\n            var groupId = await WorkspaceOneSdk.groupId();\n            this.setState({\n                      GroupId:  'Group Id : ' + groupId \n                  });\n          } catch (error) {\n            console.error(error);\n          }\n\n          try {\n            const serverName = await WorkspaceOneSdk.serverName();\n            this.setState({\n              ServerName: 'Server Name : ' + serverName \n                  });\n          } catch (error) {\n            console.error(error);\n          }\n\n    }\n\n}\n</code></pre></p>"},{"location":"IntegrationGuideForReactNative/GettingStarted/#functions","title":"Functions","text":"<p>Functions available for Android and iOS</p> <p><pre><code>WorkspaceOneSdk.startSDK()\n</code></pre> This will start the SDK initailization and will be notified if SDK initialization is success/failure by events 'initSuccess'/'initFailure'.</p> <p><pre><code>WorkspaceOneSdk.userName()\n</code></pre> Gets the enrolled user's username. The username is returned as a string. On iOS using this API may show a screen to enter username and password if the app gets registered to WSOne UEM console via managed settings.</p> <p><pre><code>WorkspaceOneSdk.groupId()\n</code></pre> Gets the enrolled user's group ID. The group ID will be returned as a string.</p> <p><pre><code>WorkspaceOneSdk.serverName()\n</code></pre> Get the name of the server to which the device is enrolled. The server name will be returned as a string.</p> <p><pre><code>WorkspaceOneSdk.allowCopyPaste()\n</code></pre> Gets the \"allow copy/paste\" setting for the profile. If true, then the user can copy and paste between managed apps. If false then the user cannot copy and paste between managed apps. The value is returned as a boolean.</p> <p><pre><code>WorkspaceOneSdk.customSettings()\n</code></pre> Gets any custom settings provided in the app's profile. The value will be returned as a string parameter.</p>"},{"location":"IntegrationGuideForReactNative/GettingStarted/#feature-implementation","title":"Feature Implementation","text":""},{"location":"IntegrationGuideForReactNative/GettingStarted/#branding","title":"Branding","text":""},{"location":"IntegrationGuideForReactNative/GettingStarted/#ios","title":"iOS","text":"<p>To enable brancding add AWSDKDefaultSettings.plist to app bundle and add new entries to the plist. For details on the entries to be added to enable branding in your app, navigate here and search for Branding.</p>"},{"location":"IntegrationGuideForReactNative/GettingStarted/#android","title":"Android","text":"<p>Please follow the steps mentioned in GitHub to brand the splash screen, the app logo gets branded as per the images from the WS1 UEM console branding payload.</p>"},{"location":"IntegrationGuideForReactNative/GettingStarted/#sso","title":"SSO","text":""},{"location":"IntegrationGuideForReactNative/GettingStarted/#ios_1","title":"iOS","text":"<p>To enable multiple apps built with the plugin share common authentication session and other SDK info, please follow the steps mentioned in the document here under section \"Keychain Access Group Entitlements\".</p>"},{"location":"IntegrationGuideForReactNative/GettingStarted/#android_1","title":"Android","text":"<p>Nothing specific coding /configuration to be done on Android.</p>"},{"location":"IntegrationGuideForReactNative/GettingStarted/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForXamarinForms/","title":"VMware Workspace ONE SDK for Xamarin.Forms","text":"<p>This documentation will cover the installation, setup and usage of the VMware Workspace ONE SDK for Xamarin Forms.</p> <p>WorkspaceOne SDK for Xamarin Forms is dependent on AWSDK version 23.7.00 or higher.Please find the Prerequisites for using the WS1 Forms SDK </p>"},{"location":"IntegrationGuideForXamarinForms/#installation","title":"Installation","text":"<p>The SDK should be installed using Nuget package manager.</p> <ul> <li>WorkspaceOne.Forms is the package to be added in the Xamarin Forms app to enable it with Workspace One SDK funtionalities.The package provides interfaces to initialize / setup and enable the WS1 SDK security features.</li> </ul> <p>Add this package to your Xamarin.Forms project and to your iOS and Android project of the Xamarin.Forms app as well.</p> <p>Add the appropriate packages to your solution for each app project. Then continue to the setup step for Android and iOS.</p>"},{"location":"IntegrationGuideForXamarinForms/#setup","title":"Setup","text":"<p>Before using the Workspace ONE SDK, just like many other Xamarin Forms packages it's dependencies need to be initialized first. In addition to adding the Forms package, each target platform needs to add the SDKs package for that specific platform as well. If you target only one of the two supported platforms, skip all steps for the one you don't support.  For Android platform along with Workspace SDK Forms package, add the below packages if not already present 1. Xamarin.AndroidX.Legacy.Support.V4 (v1.0.0.1) 2. Xamarin.AndroidX.Browser (v1.0.0.1) 3. Xamarin.GooglePlayServices.Base (v71.1610.x) 4. Xamarin.GooglePlayServices.Safetynet (v71.1600.x) 5. Xamarin.AndroidX.Core.SplashScreen (v1.0.0) 6. Xamarin.AndroidX.Lifecycle.Process (v2.5.1.2) 7. Xamarin.AndroidX.Startup.StartupRuntime (v1.0.0)</p>"},{"location":"IntegrationGuideForXamarinForms/#ios","title":"iOS","text":""},{"location":"IntegrationGuideForXamarinForms/#procedure","title":"Procedure","text":"<ol> <li>In the <code>AppDelegate.cs</code>'s <code>FinishedLaunching</code> (just where most other packages get initialized as well) add the following code <code>WorkspaceOne.iOS.WorkspaceOne.Init(\"wsoexample\");</code>. </li> </ol> <p>For example like this:</p> <pre><code>public override bool FinishedLaunching(UIApplication app, NSDictionary options)\n{\n    global::Xamarin.Forms.Forms.Init();\n\n    WorkspaceOne.iOS.WorkspaceOne.Init(\"wsoexample\");//Replace \"wsoexample\" with the name of your iOS app url scheme\n\n    //APNS Registeration\n    if (UIDevice.CurrentDevice.CheckSystemVersion(10, 0))\n    {\n        UNUserNotificationCenter.Current.RequestAuthorization(UNAuthorizationOptions.Alert | UNAuthorizationOptions.Badge | UNAuthorizationOptions.Sound,\n                                                                           (granted, error) =&gt;\n                        InvokeOnMainThread(UIApplication.SharedApplication.RegisterForRemoteNotifications));\n    }\n    else if (UIDevice.CurrentDevice.CheckSystemVersion (8, 0)) \n    {\n        var pushSettings = UIUserNotificationSettings.GetSettingsForTypes(\n                    UIUserNotificationType.Alert | UIUserNotificationType.Badge | UIUserNotificationType.Sound,\n                    new NSSet());\n\n        UIApplication.SharedApplication.RegisterUserNotificationSettings(pushSettings);\n        UIApplication.SharedApplication.RegisterForRemoteNotifications();\n    } \n    else\n    {\n        UIRemoteNotificationType notificationTypes = UIRemoteNotificationType.Alert | UIRemoteNotificationType.Badge | UIRemoteNotificationType.Sound;\n        UIApplication.SharedApplication.RegisterForRemoteNotificationTypes(notificationTypes);\n    }\n    LoadApplication(new App());\n\n    return base.FinishedLaunching(app, options);\n}\n</code></pre> <p>Replace \"wsoexample\" with the name of your iOS app url scheme. See the documentation for the WorkspaceOne SDK for iOS about details for the app url scheme.</p> <ol> <li>Ensure WorkspaceOne.OnActivated() is called.</li> </ol> <p>Something like this</p> <pre><code>public override void OnActivated(UIApplication uiApplication)\n{\n    WorkspaceOne.iOS.WorkspaceOne.OnActivated();\n}\n</code></pre> <ol> <li>Implement the code to handle the callback from the Workspace ONE Intelligent Hub or Container app.</li> </ol> <p>Code for Handling Open Url</p> <pre><code>public override bool HandleOpenURL(UIApplication application, NSUrl url)\n{\n    return WorkspaceOne.iOS.WorkspaceOne.HandleOpenUrl(url, \"\");\n}\n</code></pre> <ol> <li>Implement Remote Notification Delegate callbacks and register the APNS token with SDK.</li> </ol> <p>Code for token registeration with SDK</p> <pre><code>//Delegate callbacks for Remote Notification\npublic override void RegisteredForRemoteNotifications(UIApplication application, NSData deviceToken)\n{\n    System.Diagnostics.Debug.WriteLine(\"Token: {0}\", deviceToken.ToString());\n    byte[] result = new byte[deviceToken.Length];\n    Marshal.Copy(deviceToken.Bytes, result, 0, (int)deviceToken.Length);\n    var token = BitConverter.ToString(result).Replace(\"-\", \"\"); //Remove \"-\" character from token string\n    System.Diagnostics.Debug.WriteLine(\"Token: {0}\", token);\n    WorkspaceOne.iOS.WorkspaceOne.regisgterToken(token); //Register for Push Notification with SDK\n}\n\n//Delegate callback for Remote Notification Failure\npublic override void FailedToRegisterForRemoteNotifications(UIApplication application, NSError error)\n{\n    System.Diagnostics.Debug.WriteLine(\"Token Error: {0}\", error.ToString());\n}\n</code></pre>"},{"location":"IntegrationGuideForXamarinForms/#android","title":"Android","text":"<ol> <li>In the <code>MainActivity.cs</code>'s <code>OnCreate</code> (where most other packages get initialized as well) add the following code <code>WorkspaceOne.Android.WorkspaceOne.Instance.Init(this);</code> and <code>WorkspaceOne.Android.WorkspaceOne.Instance.OnCreate(savedInstanceState)</code>. </li> </ol> <p>For example:</p> <pre><code>public class MainActivity : global::Xamarin.Forms.Platform.Android.FormsAppCompatActivity, SDKGatewayActivityDelegate.ICallback\n{\n    protected override void OnCreate(Bundle savedInstanceState)\n    {\n        System.Diagnostics.Debug.WriteLine($\"{this.GetType()}  OnCreate(Bundle)\");\n        TabLayoutResource = Resource.Layout.Tabbar;\n        ToolbarResource = Resource.Layout.Toolbar;\n\n        base.OnCreate(savedInstanceState);\n        Xamarin.Essentials.Platform.Init(this, savedInstanceState);\n        global::Xamarin.Forms.Forms.Init(this, savedInstanceState);\n\n        Exception workspaceOneException = null;\n\n        try\n        {\n            WorkspaceOne.Android.WorkspaceOne.Instance.Init(this);\n            WorkspaceOne.Android.WorkspaceOne.Instance.OnCreate(savedInstanceState);\n\n\n\n        }\n        catch (Exception e)\n        {\n            System.Diagnostics.Debug.WriteLine($\"{this.GetType()} {e}\");\n            workspaceOneException = e;\n        }\n\n        var app = new App();\n\n        LoadApplication(app);\n\n        if (workspaceOneException != null)\n        {\n            app.MainPage.DisplayAlert($\"Error: {workspaceOneException.GetType()}\", workspaceOneException.Message, \"Ok\");\n        }\n    }\n</code></pre> <ol> <li> <p><code>MainActivity</code> should conform to <code>SDKGatewayActivityDelegate.ICallback</code> and implement the following method.</p> <pre><code>public void OnTimeOut(SDKBaseActivityDelegate p0)\n{\n    System.Diagnostics.Debug.WriteLine($\"{this.GetType()}  OnTimeOut(SDKBaseActivityDelegate)\");\n    App.Current.MainPage.DisplayAlert($\"Error: {p0.GetType()}\", \"OnTimeOut\", \"Ok\");\n}\n</code></pre> </li> <li> <p>Add respective methods calls  for WorkspaceOne instance in MainActivity methods <code>OnResume()</code>, <code>OnPause()</code>, <code>OnStart()</code>,<code>OnStop()</code>,<code>OnDestroy()</code>, <code>OnUserInteraction()</code>, <code>DispatchKeyEvent(KeyEvent e)</code>,<code>DispatchKeyShortcutEvent(KeyEvent e)</code>,<code>DispatchTouchEvent(MotionEvent ev)</code>,<code>DispatchTrackballEvent(MotionEvent ev)</code></p> <pre><code>protected override void OnResume()\n{\n    System.Diagnostics.Debug.WriteLine($\"{this.GetType()}  OnResume())\");\n    base.OnResume();\n    WorkspaceOne.Android.WorkspaceOne.Instance.OnResume();\n}\n\nprotected override void OnPause()\n{\n    base.OnPause();\n    WorkspaceOne.Android.WorkspaceOne.Instance.OnPause();\n}\n\nprotected override void OnStart()\n{\n    base.OnStart();\n    WorkspaceOne.Android.WorkspaceOne.Instance.OnStart();\n}\n\nprotected override void OnStop()\n{\n    base.OnStop();\n    WorkspaceOne.Android.WorkspaceOne.Instance.OnStop();\n}\n\nprotected override void OnDestroy()\n{\n    base.OnDestroy();\n    WorkspaceOne.Android.WorkspaceOne.Instance.OnDestroy();\n}\npublic override void OnUserInteraction()\n{\n    base.OnUserInteraction();\n    WorkspaceOne.Android.WorkspaceOne.Instance.OnUserInteraction();\n}\n\npublic override bool DispatchKeyEvent(KeyEvent e)\n{\n    WorkspaceOne.Android.WorkspaceOne.Instance.DispatchKeyEvent(e);\n    return base.DispatchKeyEvent(e);\n}\n\npublic override bool DispatchKeyShortcutEvent(KeyEvent e)\n{\n    WorkspaceOne.Android.WorkspaceOne.Instance.DispatchKeyShortcutEvent(e);\n    return base.DispatchKeyShortcutEvent(e);\n}\n\npublic override bool DispatchTouchEvent(MotionEvent ev)\n{\n    WorkspaceOne.Android.WorkspaceOne.Instance.DispatchTouchEvent(ev);\n    return base.DispatchTouchEvent(ev);\n}\n\npublic override bool DispatchTrackballEvent(MotionEvent ev)\n{\n    WorkspaceOne.Android.WorkspaceOne.Instance.DispatchTrackballEvent(ev);\n    return base.DispatchTrackballEvent(ev);\n}\n</code></pre> </li> <li> <p>Add <code>WorkspaceOneApplication.cs</code>    with following content </p> <pre><code>using System;\nusing Android.App;\nusing Android.Content;\nusing Android.Runtime;\nusing WorkspaceOne.Android;\n\nnamespace WorkspaceOne.Example.Droid\n{\n    [Application]\n    public class Application : WorkspaceOneApplication\n    {\n        public Application(IntPtr javaReference, JniHandleOwnership transfer) : base(javaReference, transfer)\n        {\n            global::Android.Util.Log.Debug(this.GetType().ToString(), \"ctor(IntPtr, JniHandleOwnership)\");\n        }\n\n        public override Intent MainActivityIntent\n        {\n            get\n            {\n                return new Intent(AwAppContext, typeof(MainActivity));\n            }\n        }\n\n        public override void OnCreate()\n        {\n            System.Diagnostics.Debug.WriteLine($\"{this.GetType()} OnCreate()\");\n            base.OnCreate(this);\n        }\n\n    }\n}\n</code></pre> </li> <li> <p>For Firebase Cloud Message support complete the  FCM Integration as per Firebase Console and then add following code.</p> <pre><code>[Service]\n[IntentFilter(new[] { \"com.google.firebase.INSTANCE_ID_EVENT\" })]\npublic class FirebaseInstanceIDService: FirebaseMessagingService\n{\n\n    public override void OnNewToken(string p0)\n    {\n        System.Console.WriteLine(p0);\n        base.OnNewToken(p0);\n\n        WorkspaceOne.Android.WorkspaceOne.regisgterToken(p0);\n\n    }\n\n    public override void OnMessageReceived(RemoteMessage p0)\n    {\n        base.OnMessageReceived(p0);\n\n        var notification = p0.GetNotification();\n        if (notification != null)\n        {\n            WorkspaceOne.Android.WorkspaceOne.processMessage(notification.Title, notification.Body, null);\n        }\n    }\n}\n</code></pre> </li> </ol>"},{"location":"IntegrationGuideForXamarinForms/#forms","title":"Forms","text":"<p>Wherever reasonable in your Xamarin.Forms app when you would like to set up the SDK, get an instance of the <code>IWorkspaceOne</code> service and assign the delegate property. This can be done in your <code>App.xaml.cs</code> for example.</p>"},{"location":"IntegrationGuideForXamarinForms/#procedure_1","title":"Procedure","text":"<ol> <li>Import the <code>WorkspaceOne.Forms</code> &amp; <code>WorkspaceOne.Forms.Interfaces</code>  associated with <code>IAWSDKDelegate</code> to <code>App.xaml.cs</code></li> </ol> <p>Import <code>using</code> </p> <pre><code>using WorkspaceOne.Forms;\nusing WorkspaceOne.Forms.Interfaces;\n</code></pre> <ol> <li>Inside the class App( ) constructor add the following </li> </ol> <p>Contructor code </p> <pre><code>public App()\n{\n    InitializeComponent(); \n    var ws = DependencyService.Get&lt;IWorkspaceOne&gt;();\n    ws.FormsDelegate = this;\n    MainPage = new NavigationPage(new MainPage());\n}\n</code></pre> <ol> <li>Make sure the instance of the class you assign as the delegate implements <code>IAWSDKDelegate</code>.</li> </ol>"},{"location":"IntegrationGuideForXamarinForms/#delegate-implementation","title":"Delegate Implementation","text":"<pre><code>public partial class App : Application, IAWSDKDelegate\n</code></pre> <p>Make class <code>App</code> conform to <code>IAWSDKDelegate</code> </p> <pre><code>void IAWSDKDelegate.InitialCheckFinished(bool isChecked)\n</code></pre> <p>This delegate method is invoked when the SDK initializes. This method is ALWAYS called after the SDK passes through the initialization flow.</p> <pre><code>void IAWSDKDelegate.ProfilesReceived(AWProfile[] profiles)\n</code></pre> <p>This delegate method is invoked when settings of an SDK profile assigned to this application update on the Workspace ONE UEM console. It notifies the app that new settings are available. The profiles array contains the list of AWProfile objects that contain configuration payloads.</p> <pre><code>void IAWSDKDelegate.Unlock()\n</code></pre> <p>This delegate method is invoked immediately after you initiate a new SSO session by inputting the correct password/passcode.</p> <pre><code>void IAWSDKDelegate.Lock()\n</code></pre> <p>This method is invoked when the SSO session has expired and the SDK passcode input view is displayed. It is intended for use as an indicator of when a user no longer has to access the app. This lock allows the developer to implement the necessary logic to take the proper action for when the app is locked.</p> <pre><code>void IAWSDKDelegate.Wipe()\n</code></pre> <p>This method is invoked when the SDK identifies that the device has been wiped or unenrolled from the Workspace ONE UEM console. This method is also invoked when a user reaches the limit of failed passcode attempts defined in the SDK profile.</p> <pre><code>void IAWSDKDelegate.StopNetworkActivity(AWNetworkActivityStatus status)\n</code></pre> <p>This method is invoked when the device connects to an SSID that is blacklisted in the SDK profile.</p> <pre><code> void IAWSDKDelegate.ResumeNetworkActivity()\n</code></pre> <p>This method is invoked when the device connections to a valid SSID after network activity is already stopped.</p>"},{"location":"IntegrationGuideForXamarinForms/#usage","title":"Usage","text":"<p>The following components are available in Xamarin.Forms.</p>"},{"location":"IntegrationGuideForXamarinForms/#openinurl-calls","title":"OpenInURL calls","text":"<p>Request the device to open the Uri.</p> <pre><code>WorkspaceOne.Forms.Device.OpenUri(Uri uri)\n</code></pre>"},{"location":"IntegrationGuideForXamarinForms/#on-device-cryptography","title":"On-Device Cryptography","text":"<p>To encrypt custom data and to secure storage data, use the data encryption API set to encrypt and decrypt data.</p> <pre><code>var ws = DependencyService.Get&lt;IWorkspaceOne&gt;();\n\nbyte[] encryptedBytes = ws.EncodeAndEncrypt(bytes);\n\nbyte[] bytes = ws.DecodeAndDecrypt(encryptedBytes);\n</code></pre> <p>Note that the data is not stored by SDK by default, App needs to handle the storage by itself.</p>"},{"location":"IntegrationGuideForXamarinForms/#send-log-to-console","title":"Send Log to Console","text":"<pre><code>var wso = DependencyService.Get&lt;IWorkspaceOne&gt;().SharedInstance;\nvar not = wso != null ? \"not\" : \"\";\nDebug.WriteLine($\"[{this.GetType()}] wso is {not} null\");\nwso?.sendLogs();\n</code></pre>"},{"location":"IntegrationGuideForXamarinForms/#dlp-on-ios","title":"DLP on iOS","text":"<p>On iOS, to enable the WSOne SDK app with DLP restrictions follow the below instructions:</p>"},{"location":"IntegrationGuideForXamarinForms/#procedure_2","title":"Procedure","text":"<ol> <li> <p>Create a bundle named AWSDKDefaults.</p> </li> <li> <p>Create a PLIST named AWSDKDefaultSettings.plist and put it in the AWSDKDefaults bundle. </p> </li> <li> <p>Inside the AWURLSchemeConfiguration dictionary, create a new Boolean entry with the key name enabled and set the Boolean value to Yes.</p> <p>If you set the Boolean value to No, then the HTTP and HTTPS links open in Safari. If set to Yes, then your SDK app opens in Workspace ONE Web.</p> </li> <li> <p>Configure the AWMailtoSchemeConfiguration dictionary, create a new Boolean entry with the key name as enabled and set the Boolean value to Yes.</p> <pre><code>If you set the Boolean value as No, then MAILTO links open in the native mail. If set to Yes, then your SDK app looks to see if you enabled data loss prevention in the SDK profile.\n\n    DLP Enabled \u2013 The app opens in Workspace ONE Boxer.\n    DLP Disabled \u2013 The app opens in the iOS Mail app.\n</code></pre> </li> </ol>"},{"location":"IntegrationGuideForXamarinForms/#copy-paste","title":"Copy-Paste","text":"<ol> <li>In the PLIST, create a Boolean named AWClipboardEnabled and set it to YES.</li> </ol> <p>After you add the local flag, and your admin sets the default or custom SDK policies for these features in the console, the SDK enforces the restriction. It enforces it across your application\u2019s user interfaces that use cut, copy, and paste in the listed classes and subclasses.</p> <pre><code>UITextField \nUITextView \nUIWebView\nWKWebView\n</code></pre>"},{"location":"IntegrationGuideForXamarinForms/#enable-links-for-workspace-one-web","title":"Enable Links for Workspace ONE Web","text":"<ol> <li>In the PLIST, create a dictionary named AWURLSchemeConfiguration.</li> </ol>"},{"location":"IntegrationGuideForXamarinForms/#enable-links-for-workspace-one-boxer","title":"Enable Links for Workspace ONE Boxer","text":"<ol> <li>In the PLIST, create a dictionary named AWMailtoSchemeConfiguration.</li> </ol>"},{"location":"IntegrationGuideForXamarinForms/#branding-on-ios","title":"Branding on iOS","text":"<ol> <li>To enable branding on iOS Forms app, create the AWSDKDefaults and add AWSDKDefaultSettings.plist inside the AWSDKDefaults bundle as in above steps. </li> <li>Add enteries as per below structure:<pre><code>    Root (Dictionary)\n    - Branding (Dictionary)\n        Colors (Dictionary)\n            EnableBranding (Boolean = YES)\n                PrimaryHighlight (Dictionary) \n                Red (Number = 238)\n                Green (Number = 139) \n                Blue (Number = 48) \n                Alpha (Number = 255)\n        AppLogo_1x (String = logoFileName) \n        AppLogo_2x (String = logoFileName) \n        SplashLogo_1x (String = splashLogoFileName) \n        SplashLogo_2x (String = splashLogoFileName)\n</code></pre> </li> </ol>"},{"location":"IntegrationGuideForXamarinForms/#branding-on-android","title":"Branding on Android","text":"<p>Modify the styles.xml in the Android Project for static branding. Following is the snippet for styles.xml</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;resources&gt;\n    &lt;style name=\"SDKBaseTheme\" parent=\"VisionTheme.DayNight\"&gt;\n        &lt;!-- Set theme colors from http://www.google.com/design/spec/style/color.html#color-color-palette --&gt;\n        &lt;!-- colorPrimary is used for the default action bar background --&gt;\n        &lt;item name=\"colorPrimary\"&gt;#2196F3&lt;/item&gt;\n        &lt;!-- colorPrimaryDark is used for the status bar --&gt;\n        &lt;item name=\"colorPrimaryDark\"&gt;#1976D2&lt;/item&gt;\n        &lt;!-- colorAccent is used as the default value for colorControlActivated\n         which is used to tint widgets --&gt;\n        &lt;item name=\"colorAccent\"&gt;#FF4081&lt;/item&gt;\n        &lt;!-- You can also set colorControlNormal, colorControlActivated\n         colorControlHighlight and colorSwitchThumbNormal. --&gt;\n        &lt;item name=\"android:datePickerDialogTheme\"&gt;@style/AppCompatDialogStyle&lt;/item&gt;\n        &lt;!-- Splash screen icon Branding change --&gt;\n        &lt;item name=\"splashLogo\"&gt;@drawable/appicon&lt;/item&gt;\n        &lt;!-- Login screen icon Branding change --&gt;\n        &lt;item name=\"awsdkLoginBrandingIcon\"&gt;@drawable/appicon&lt;/item&gt;\n        &lt;item name=\"awsdkApplicationColorPrimary\"&gt;#FF4081&lt;/item&gt;\n    &lt;/style&gt;\n    &lt;style name=\"AppTheme.NoActionBar\"&gt;\n        &lt;item name=\"windowActionBar\"&gt;false&lt;/item&gt;\n        &lt;item name=\"windowNoTitle\"&gt;true&lt;/item&gt;\n    &lt;/style&gt;\n    &lt;style name=\"AppTheme.AppBarOverlay\" parent=\"ThemeOverlay.AppCompat.Dark.ActionBar\"/&gt;\n    &lt;style name=\"AppTheme.PopupOverlay\" parent=\"VisionTheme.DayNight\"/&gt;\n&lt;/resources&gt;\n</code></pre>"},{"location":"IntegrationGuideForXamarinForms/#secure-preferences","title":"Secure Preferences","text":"<p>Use the secure storage API set of functions to store key value pairs in encrypted storage.</p> <pre><code>var ws = DependencyService.Get&lt;IWorkspaceOne&gt;();\nws.SecurePreferences.Put(key, value);\nvar value = ws.SecurePreferences.Get(key, defaultValue);\n</code></pre>"},{"location":"IntegrationGuideForXamarinForms/#awcopyenabledwebview","title":"AWCopyEnabledWebView","text":"<p>*The AWCopyEnabledWebView will render as regular WebView on iOS.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" \n    xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" \n    xmlns:d=\"http://xamarin.com/schemas/2014/forms/design\" \n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"d\" \n    x:Class=\"WorkspaceOne.Example.MainPage\" \n    xmlns:aw=\"clr-namespace:WorkspaceOne.Forms.UI;assembly=WorkspaceOne.Forms\"&gt;\n    &lt;StackLayout VerticalOptions=\"CenterAndExpand\" HorizontalOptions=\"Fill\"&gt;\n        &lt;aw:AWCopyEnabledWebView Source=\"https://www.seamgen.com\" HorizontalOptions=\"FillAndExpand\" /&gt;\n    &lt;/StackLayout&gt;\n&lt;/ContentPage&gt;\n</code></pre>"},{"location":"IntegrationGuideForXamarinForms/#awedittext","title":"AWEditText","text":"<p>*The AWEditText will render as regular Editor on iOS.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;ContentPage \n    xmlns=\"http://xamarin.com/schemas/2014/forms\" \n    xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" \n    xmlns:d=\"http://xamarin.com/schemas/2014/forms/design\" \n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"d\" \n    x:Class=\"WorkspaceOne.Example.MainPage\" \n    xmlns:aw=\"clr-namespace:WorkspaceOne.Forms.UI;assembly=WorkspaceOne.Forms\"&gt;\n    &lt;StackLayout VerticalOptions=\"CenterAndExpand\" HorizontalOptions=\"Fill\"&gt;\n        &lt;aw:AWEditor Text=\"Test\" HeightRequest=\"80\" /&gt;\n    &lt;/StackLayout&gt;\n&lt;/ContentPage&gt;\n</code></pre>"},{"location":"IntegrationGuideForXamarinForms/#awtextview","title":"AWTextView","text":"<p>*The AWTextView will render as regular Entry on iOS.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;ContentPage \n    xmlns=\"http://xamarin.com/schemas/2014/forms\" \n    xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" \n    xmlns:d=\"http://xamarin.com/schemas/2014/forms/design\" \n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"d\" \n    x:Class=\"WorkspaceOne.Example.MainPage\" \n    xmlns:aw=\"clr-namespace:WorkspaceOne.Forms.UI;assembly=WorkspaceOne.Forms\"&gt;\n    &lt;StackLayout VerticalOptions=\"CenterAndExpand\" HorizontalOptions=\"Fill\"&gt;\n        &lt;aw:AWEntry Text=\"Test\" HeightRequest=\"80\" /&gt;\n    &lt;/StackLayout&gt;\n&lt;/ContentPage&gt;\n</code></pre>"},{"location":"IntegrationGuideForXamarinForms/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForXamarinNative/GettingStarted/","title":"VMware Workspace ONE Software Development Kit (SDK)","text":""},{"location":"IntegrationGuideForXamarinNative/GettingStarted/#ios-and-android-getting-started","title":"iOS And Android - Getting Started","text":"<p>This document explains how to integrate the Workspace ONE SDKs into your Xamarin-built apps.</p> <p>For detailed information about the Workspace ONE SDK and managing internal apps, See the VMware Workspace ONE UEM Mobile Application Management Guide and the VMware Workspace ONE SDK Technical Implementation Guides located on the Workspace ONE Resources Portal at https://my.workspaceone.com/products/Workspace-ONE-SDK</p>"},{"location":"IntegrationGuideForXamarinNative/GettingStarted/#ios-overview","title":"iOS Overview","text":"<p>In order to inject Workspace ONE SDK functionality into your  Xamarin AWSDK App, integrate the two systems.</p>"},{"location":"IntegrationGuideForXamarinNative/GettingStarted/#requirements","title":"Requirements","text":"<ul> <li>iOS 14.0+ (for iOS SDK component) / Xcode 14.x</li> <li>Visual Studio 2022 (17.5 and above) for Windows / Visual Studio 2022 for Mac (17.5 and above)</li> <li>Workspace ONE-enrolled iOS test device</li> <li>The Workspace ONE Xamarin SDK (AWSDK) package from the Nuget Store.</li> <li>A Xamarin iOS app to integrate with the Workspace ONE SDK ** If you do not have a suitable application, you can create a new application in Visual Studio and integrate the SDK into that.</li> </ul>"},{"location":"IntegrationGuideForXamarinNative/GettingStarted/#add-app-to-the-workspace-one-uem-console","title":"Add App to the Workspace ONE UEM Console","text":"<p>Upload your internal app to the Workspace ONE UEM Console to register it with the system. This step enables UEM Console to identify the app and to add functionality to it. The Workspace ONE UEM MAM Guide details how to upload an internal app.</p> <ol> <li>In Xamarin, export the app as a signed IPA.</li> <li>Log into the Workspace ONE UEM Console as an administrator.</li> <li>Navigate to Apps &amp; Books &gt; Applications &gt; List View &gt; Internal and then choose Add Application.</li> <li>Select Upload &gt; Local File, add the IPA file, and select Continue.</li> <li>Select More and choose SDK.</li> <li>Select the iOS Default Settings profile in the SDK Profile field.</li> <li>Select Save and Assign to continue to the Assignment page.</li> <li>Assign the app to a smart group and select a Push Mode.</li> <li>Select Add, and Save &amp; Publish the app to complete the upload process.</li> </ol>"},{"location":"IntegrationGuideForXamarinNative/GettingStarted/#add-required-sdk-package-to-project","title":"Add Required SDK package to Project","text":"<p>Add the Workspace ONE SDK nuget package to your Xamarin project to enable the Xamarin IPA file in UEM Console to recognize and apply the Workspace ONE SDK functionality.</p> <ol> <li>Open Visual Studio.</li> <li>Right-click Packages and select Add Packages.</li> <li>Search AWSDK on nuget.org and add it to the project.</li> <li>Enable the Assembly check box if it isn't already and select Ok.</li> </ol>"},{"location":"IntegrationGuideForXamarinNative/GettingStarted/#enable-communication-between-the-intelligent-hubformerly-airwatch-agent-and-the-xamarin-ipa-file","title":"Enable Communication Between the Intelligent Hub(formerly AirWatch Agent) and the Xamarin IPA File","text":"<p>Expose a custom scheme in the Info.plist file in the Xamarin project to enable the app to receive a call back from the Intelligent Hub. Your app receives communications from the Workspace ONE UEM Console through the Intelligent Hub. To expose the scheme, add a callback scheme registration and add a query scheme to your Xamarin project.</p>"},{"location":"IntegrationGuideForXamarinNative/GettingStarted/#add-callback-scheme-registration","title":"Add Callback Scheme Registration","text":"<ol> <li>Double-click the Info.plist file in your Xamarin project.</li> <li>Select the Advanced tab.</li> <li>In the URL Types section, choose the Add URL Type button.</li> <li>Set the values of Identifier and URL Schemes to the desired callback scheme.</li> <li>Set the Role to Editor.</li> <li>Save the file.</li> </ol>"},{"location":"IntegrationGuideForXamarinNative/GettingStarted/#add-sdk-app-query-scheme","title":"Add SDK App Query Scheme","text":"<ol> <li>Double-click the Info.plist file in your Xamarin project.</li> <li>Select the Source tab, and choose Add new entry.</li> <li>Select the green \"PLUS\" in the selected row.</li> <li>Double click Custom Property, and change it to LSApplicationQueriesSchemes.</li> <li>Change the Type from String to Array.</li> <li>Within the Array,  Add following 3 values for  anchor application.</li> <li>Type String  and Value airwatch.</li> <li>Type String  and Value  awws1enroll.</li> <li>Type String  and Value   wsonesdk.</li> <li>Save the file.</li> </ol>"},{"location":"IntegrationGuideForXamarinNative/GettingStarted/#add-support-for-qr-scan-and-faceid","title":"Add Support for QR Scan and FaceId","text":""},{"location":"IntegrationGuideForXamarinNative/GettingStarted/#qr-scan","title":"QR Scan","text":"<p>Include NSCameraUsageDescription in the application info.plist file to enable the SDK to scan QR codes with the device camera. Provide a description that devices prompt users to allow the application to enable this feature.</p>"},{"location":"IntegrationGuideForXamarinNative/GettingStarted/#faceid","title":"FaceID","text":"<p>Include NSFaceIDUsageDescription in the application info.plist file to enable the SDK to use FaceID. Provide a description that devices prompt users to allow the application to enable this feature. Consider controlling the message users read. If you do not include a description, the iOS system prompts users with native messages that might not align with the capabilities of the application.</p>"},{"location":"IntegrationGuideForXamarinNative/GettingStarted/#add-an-app-delegate-to-the-xamarin-project","title":"Add an App Delegate to the Xamarin Project","text":"<p>To complete integration of Xamarin and Workspace ONE SDK within your app use a custom Application Delegate. Create a class to act as an <code>AWSDKDelegate</code>, define the callback scheme within the class, and set the class to recognize when initialization is complete.</p> <ol> <li> <p>Create a class to act as an <code>AWSDKDelegate</code> and to receive SDK callbacks.  </p> <pre><code>using Foundation;\nusing System.Diagnostics;\nusing System;\nusing AirWatchSDK;\n\nnamespace sdkSampleApp\n{\n    public class AirWatchSDKManager: AWSDKDelegate\n    {            \n        private static AirWatchSDKManager instance;\n        private static string LogCategory = \"AirWatchSDK\";\n\n        // private, use the Instance below\n        private AirWatchSDKManager ()\n        {\n        }\n\n        // singleton\n        public static AirWatchSDKManager Instance {\n            get {\n                if (instance == null) {\n                    instance = new AirWatchSDKManager ();\n                }\n                return instance;\n            }\n        }\n\n        // Below are all the protocol methods defined in AWSDKDelegate\n        // Add customization here for SDK results\n\n        override public void InitialCheckDoneWithError (NSError error)\n        {\n            // Add any SDK Customization here\n            string message = String.Format (\"InitialCheckDoneWithError received {0}, SDK initialized if no error\", error);\n            Debug.WriteLine (message, LogCategory);\n        }\n\n        override public void ReceivedProfiles (AWProfile[] profiles)\n        {\n            // Add any SDK Customization here\n            string message = String.Format (\"ReceivedProfiles received {0}\", profiles);\n            Debug.WriteLine (message, LogCategory);\n        }\n\n        override public void Wipe ()\n        {\n            // Add any SDK Customization here\n            Debug.WriteLine (\"Wipe command received\", LogCategory);\n        }\n\n        override public void Lock ()\n        {\n            // Add any SDK Customization here\n            Debug.WriteLine (\"Lock command received\", LogCategory);\n        }\n\n        override public void Unlock ()\n        {\n            // Add any SDK Customization here\n            Debug.WriteLine (\"Unlock command received\", LogCategory);\n        }\n\n        public override void StopNetworkActivity(AWNetworkActivityStatus status)\n        {\n            // Add any SDK Customization here\n            Debug.WriteLine(\"StopNetworkActivity received\", LogCategory);\n        }\n\n        override public void ResumeNetworkActivity ()\n        {\n            // Add any SDK Customization here\n            Debug.WriteLine (\"ResumeNetworkActivity received\", LogCategory);\n            }\n        }\n    }\n</code></pre> </li> <li> <p>Add the listed functionality to the <code>AppDelegate.cs</code>.</p> <pre><code>using System;\nusing ObjCRuntime;\nusing System.Diagnostics;\nusing AirWatchSDK;\n</code></pre> <p>...</p> <pre><code>public override bool FinishedLaunching (UIApplication application, NSDictionary launchOptions)\n{\n    if (Runtime.Arch == Arch.SIMULATOR) {\n        Debug.WriteLine (\"Running in Simulator, skipping initialization of the AirWatch SDK!\");\n        return true;\n    } else {\n        Debug.WriteLine (\"Running on Device, beginning initialization of the AirWatch SDK.\");\n\n        // Configure the Controller by:\n        var sdkController = AWController.ClientInstance ();\n        // 1) defining the callback scheme so the app can get called back,\n        sdkController.CallbackScheme = \"mysamplescheme\"; // defined in Info.plist\n        // 2) set the delegate to know when the initialization has been completed.\n        sdkController.Delegate = AirWatchSDKManager.Instance;\n        AWController.ClientInstance ().Start ();\n\n        return true;\n    }\n}\n\npublic override void OnActivated (UIApplication application)\n{\n}\n\npublic override bool HandleOpenURL (UIApplication application, NSUrl url)\n{\n    return AWController.ClientInstance ().HandleOpenURL (url, \"\");\n}\n</code></pre> </li> </ol> <p>If you are using Xamarin Forms on iOS, you need to add this to your AppDelegate as well.  This will expose the <code>UIWindow</code> that is part of the iOS <code>AppDelegate</code> but is hidden in <code>Xamarin.Forms.Platform.iOS.FormsApplicationDelegate</code>:</p> <pre><code>[Export(\"window\")]\npublic UIWindow GetWindow()\n{\n    return UIApplication.SharedApplication.Windows[0];\n}\n</code></pre>"},{"location":"IntegrationGuideForXamarinNative/GettingStarted/#debug-your-application","title":"Debug Your Application","text":"<p>Your application is now SDK-enlightened!  If you do not see an SSO passcode, ensure that the Organization Group has Single Sign On enabled and that an Authentication Type is configured. These configurations are explained in the Workspace ONE UEM MAM Guide.</p>"},{"location":"IntegrationGuideForXamarinNative/GettingStarted/#android-overview","title":"Android Overview","text":"<p>To integrate Workspace ONE Android SDK Xamarin components into an existing Xamarin Android app follow described steps.</p>"},{"location":"IntegrationGuideForXamarinNative/GettingStarted/#requirements_1","title":"Requirements","text":"<ul> <li>Visual Studio 2022 (17.5 and above) for Windows / Visual Studio 2022 for Mac (17.5 and above)</li> <li>Workspace ONE Xamarin Android SDK binaries from the Nuget Store.</li> <li>Android test device running Marshmallow and above.</li> <li>Android 8.0+ (for Android SDK component) / API level 23 OR above </li> <li>Intelligent Hub(formerly AirWatch Agent v7.0+) for Android from Google Playstore.</li> <li>Whitelisted Release/Debug signing key as explained below should be used for signing the Xamarin android application.</li> </ul> <p>Note: Applications using the Workspace ONE SDK for Xamarin must make changes in their HTTP networking classes to support Android 10 (Q) devices. Applications must use version 1.4.0+ of AWSDK nuget package, and use the HTTP Client classes provided in the Android component. For more details, please refer to the troubleshooting guide.</p>"},{"location":"IntegrationGuideForXamarinNative/GettingStarted/#integrating-workspace-one-sdk","title":"Integrating Workspace ONE SDK","text":"<ol> <li>While integrating Workspace ONE SDK, application method count may exceed 64k due to library dependencies. Enable Multi-Dex option for the app in Visual Studio.</li> <li>Add the VMware Workspace ONE SDK package from the NuGet Gallery.</li> <li>Add <ol> <li>Xamarin.GooglePlayServices.Base (v71.1610.4) </li> <li>Xamarin.GooglePlayServices.SafetyNet (v71.1600.4)</li> <li>Xamarin.AndroidX.Core.SplashScreen (v1.0.0) </li> <li>Xamarin.AndroidX.Lifecycle.Process (v2.5.1.2)</li> <li>Xamarin.AndroidX.Startup.StartupRuntime (v1.0.0)</li> </ol> </li> <li> <p>Initialize Workspace ONE SDK:     a) Extend the application class of the Xamarin app from AWApplication class of Workspace ONE SDK. Override the MainActivityIntent to return application's main landing activity. Move app's <code>onCreate()</code> business logic to <code>onPostCreate()</code>.</p> <p>Application class</p> <pre><code>namespace XamarinAndroidSampleApp.Landing\n{\n    [Application(Label = \"@string/app_name\", Icon = \"@drawable/AppLogo\", Theme = \"@style/AppTheme\")]\n\n    public class SampleApplication : AWApplication\n    {\n        public SampleApplication(IntPtr handle, JniHandleOwnership ownerShip)\n        : base(handle, ownerShip)\n        {\n        }\n\n        public override Intent MainActivityIntent\n        {\n            get\n            {\n            var intent = new Intent(ApplicationContext, typeof(MainActivity)); // MainActivity is application's main landing activity\n            return intent;\n            }\n        }\n\n        public override Intent MainLauncherIntent\n        {\n            get\n            {\n            var intent = new Intent(ApplicationContext, typeof(GatewaySplashActivity));\n            return intent;\n            }\n        }\n\n        public override bool MagCertificateEnable\n        {\n            get\n            {\n            return true; // to fetch mag certificate during initial setup\n            }\n        }\n\n        public override bool IsInputLogoBrandable\n        {\n            get\n            {\n            return true; // to brand application logo\n            }\n        }\n\n        public override void OnPostCreate()\n        {\n        base.OnPostCreate();\n        // App specific code here\n        }\n\n       public override void OnSSLPinningValidationFailure(string host1, X509Certificate cert)\n       {\n       }\n\n       public override void OnSSLPinningRequestFailure(string host1, X509Certificate cert)\n       {\n       }\n    }\n}\n</code></pre> <p>b) Add AirWatchSDKIntentService by setting the name as <code>&lt;AppPackageName&gt;.AirWatchSDKIntentService</code>. c) Set <code>GatewaySplashActivity</code> as your main launching activity and and <code>AirWatchSDKBroadcastReceiver</code> broadcast receiver declarations in manifest file. With these changes, the manifest file should have entries as shown below:</p> <p>Manifest File</p> <pre><code>&lt;application android:name=\"SampleApplication\" android:theme=\"@style/AppTheme\" tools:replace=\"android:label\"&gt;\n&lt;activity android:name=\"com.airwatch.gateway.ui.GatewaySplashActivity\" android:label=\"@string/app_name\" android:exported=\"true\"&gt;\n&lt;intent-filter&gt;\n&lt;action android:name=\"android.intent.action.MAIN\" /&gt;\n&lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;\n&lt;/intent-filter&gt;\n&lt;/activity&gt;\n&lt;activity android:name=\".MainActivity\" android:label=\"@string/app_name\" android:exported=\"true\"/&gt;\n&lt;provider android:name=\"androidx.startup.InitializationProvider\" android:authorities=\"${applicationId}.androidx-startup\" tools:node=\"remove\" /&gt;\n&lt;receiver android:name=\"com.airwatch.sdk.AirWatchSDKBroadcastReceiver\" android:permission=\"com.airwatch.sdk.BROADCAST\" android:exported=\"true\"&gt;\n&lt;intent-filter&gt;\n&lt;action android:name=\"com.airwatch.xamarinsampleapp.airwatchsdk.BROADCAST\" /&gt;\n&lt;/intent-filter&gt;\n&lt;intent-filter&gt;\n&lt;action android:name=\"android.intent.action.PACKAGE_ADDED\" /&gt;\n&lt;action android:name=\"android.intent.action.PACKAGE_REMOVED\" /&gt;\n&lt;action android:name=\"android.intent.action.PACKAGE_REPLACED\" /&gt;\n&lt;action android:name=\"android.intent.action.PACKAGE_CHANGED\" /&gt;\n&lt;action android:name=\"android.intent.action.PACKAGE_RESTARTED\" /&gt;\n&lt;data android:scheme=\"package\" /&gt;\n&lt;/intent-filter&gt;\n&lt;/receiver&gt;\n&lt;/application&gt;\n</code></pre> <p>d) For authentication, timeout and data-loss prevention features, all the application activities should extend from <code>Com.Airwatch.Gateway.UI.GatewayBaseActivity</code>. It allows the application to handle the lifecycle correctly and to manage the state of Workspace ONE SDK.</p> </li> </ol>"},{"location":"IntegrationGuideForXamarinNative/GettingStarted/#note","title":"Note","text":"<pre><code>If the app cannot extend  AWApplication class, it can also use the delegate approach, more details at &lt;https://docs.vmware.com/en/VMware-Workspace-ONE-UEM/services/SDK_Android/GUID-B59ECD0A-92CF-4EC8-8A39-34B80F1D8788.html&gt;\n</code></pre>"},{"location":"IntegrationGuideForXamarinNative/GettingStarted/#features","title":"Features","text":"<ol> <li>Application level branding, authentication, timeout behavior and offline access are enforced by following by above integration process and extending AirWatch base activity.</li> <li>For application level tunneling, you can use normal HTTP clients or android webview. It follows the Tunnel URLs setting on the console. Please refer to sample app code.</li> <li>For Integrated authentication, application should use AirWatch wrapped HTTP clients or AWWebView for Basic, NTLM or client certificate based authentication. Please refer to sample app code.</li> <li>Data Loss Prevention:     a) Restricting screenshot as per policy is enforced when your activity extends GatewayBaseActivity.     b) For restricting copy-paste, application should use AirWatch wrapped textviews like AWEditText, AWTextView and AWWebView.     c) In order to restrict OpenIn for documents, weblinks and email, use <code>UriOpenerFactory.Instance.OpenUri(context, uri)</code> and <code>UriOpenerFactory.Instance.OpenUri(context, filepath)</code> as shown in the sample app.</li> <li>Custom Settings: Inorder to get custom settings set on the console, SDKManager API needs to be used. In general any SDKManager API can be used in below manner:<pre><code>Using SDKManager APIs\n\ntry\n{\n    // Below call will return SDKManager instance readily\n    // as it is already initialised as part of Login flow.\n    var sdkmanager = SDKManager.Init(this);\n    textView.Text = sdkmanager.CustomSettings;\n} catch (AirWatchSDKException e)\n{\n    // exception while using SDKManager API\n}\n</code></pre> </li> </ol>"},{"location":"IntegrationGuideForXamarinNative/GettingStarted/#whitelist-signing-key","title":"Whitelist Signing Key","text":"<p>Before you can begin using the Workspace ONE SDK, you must ensure your application signing key is whitelisted with your Workspace ONE UEM Console. When your SDK-integrated application starts up, the SDK checks the signing public key with which it is signed. It compared againt the list of whitelisted apps to determine whether your application is trusted.</p> <p>Workspace ONE allows whitelisting for both apps deployed internally or deployed through a public app store.</p>"},{"location":"IntegrationGuideForXamarinNative/GettingStarted/#internally-deployed-applications","title":"Internally Deployed Applications","text":"<ol> <li>After building the application apk, sign it using your own specific app signing key.</li> <li>Upload the signed apk file to the Workspace ONE UEM Console as described below. Workspace ONE UEM Console extracts the application's public signing key and adds it to the whitelisted apps list     a) Log into the Workspace ONE UEM Console as an administrator.     b) Navigate to Apps &amp; Books &gt; Applications &gt; List View &gt; Internal and then choose Add Application.     c) Select Upload &gt; Local File, add the APK file, and select Continue.     d) Select More and choose SDK.     e) Select the Android Default Settings profile in the SDK Profile field.     f) Select Save and Assign to continue to the Assignment page.     g) Assign the app to a smart group and select a Push Mode.     h) Select Add, and Save &amp; Publish the app to complete the upload process.</li> </ol>"},{"location":"IntegrationGuideForXamarinNative/GettingStarted/#publicly-deployed-applications","title":"Publicly Deployed Applications","text":"<p>For applications that are deployed publicly through the Play Store, send the public signing key of the application to AirWatch for whitelisting.</p> <p>Note: Contact your professional services representative for the process of whitelisting the public signing key.</p>"},{"location":"IntegrationGuideForXamarinNative/GettingStarted/#push-app-to-dev-device-using-app-catalog","title":"Push App to Dev Device using App Catalog","text":"<p>In order for the Intelligent Hub to manage an app, it needs to be sent to the device.  This can be done via an installation policy of Automatic or by pushing the app down once using the Hub's APP CATALOG.  Once the app is listed in the Managed Apps section of the Hub, it is ready for local management.</p>"},{"location":"IntegrationGuideForXamarinNative/GettingStarted/#troubleshooting-guide","title":"Troubleshooting Guide","text":"<p>Q. On Android 10 (Q), HTTP requests fail with a \"407 Proxy Authentication Required\" error when the \"VMware Tunnel Proxy\" option is enabled.</p> <p>A. To resolve this error, applications need to use the AW wrapper classes provided for the WebView and HTTP clients in the <code>Com.Airwatch.Gateway.Clients</code> package. This is required because, on Android 10 (Q), the Android platform removed access to the /proc/net file system. This change caused the SDK's internal authentication process to fail. The AW wrapper classes present in the <code>Com.Airwatch.Gateway.Clients</code> package perform the authentication. </p> <p>This solution is available from AWSDK nuget package version 1.4.0. Please refer to the Xamarin-AWSDK Sample application's <code>TunnelActivity</code> to see the usage of wrapper classes.</p>"},{"location":"IntegrationGuideForXamarinNative/GettingStarted/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForXamarinNative/Readme/","title":"VMware Workspace ONE Software Development Kit (SDK)","text":""},{"location":"IntegrationGuideForXamarinNative/Readme/#xamarin-component-for-ios-and-android","title":"Xamarin Component for iOS and Android","text":"<p>The VMware Workspace ONE SDK Component for Xamarin helps enterprise app developers add enterprise- grade security, conditional access, and compliance capabilities to Xamarin-based mobile applications.</p> <p>This repo contains sample applications built using VMware Workspace ONE SDK Plugin for Xamarin, and would help app developers understand how to easily integrate VMware Workspace ONE SDK into their Xamarin apps in matter of minutes.</p> <p>For detailed information about the Workspace ONE SDK and managing internal apps, See the VMware Workspace ONE UEM Mobile Application Management Guide and the VMware Workspace ONE SDK Technical Implementation Guides located on the Workspace ONE Resources Portal at https://my.workspaceone.com/products/Workspace-ONE-SDK.</p> <p>Let us know if you have any questions or feedback by emailing us at support@air-watch.com</p>"},{"location":"IntegrationGuideForXamarinNative/Readme/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Apps/SDKExampleApplication/","title":"Workspace ONE Example Application for iOS","text":"<p>The SDKExampleApplication app provides an overview of the common use cases of the Workspace ONE\u00ae software development kit (SDK) for iOS. Where appropriate, comments are added to the code.</p> <p>A complete developer guide is published on the VMware Code website, on the SDK home page, see: developer.vmware.com/web/sdk/Native/airwatch-ios.</p> <p>These instructions assume that you will use a physical device and the Apple Xcode integrated development environment (IDE).</p>"},{"location":"IntegrationGuideForiOS/Apps/SDKExampleApplication/#agreement","title":"Agreement","text":"<p>Before downloading, installing or using the VMware Workspace ONE SDK you must:</p> <ol> <li> <p>Review the     VMware Workspace ONE Software Development Kit License Agreement.     By downloading, installing, or using the VMware Workspace ONE SDK you agree     to these license terms.  If you disagree with any of the terms, then do not     use the software.</p> </li> <li> <p>Review the     VMware Privacy Notice     and the     Workspace ONE UEM Privacy Disclosure,     for information on applicable privacy policies.</p> </li> </ol> <p>This applies however you obtain the software.</p>"},{"location":"IntegrationGuideForiOS/Apps/SDKExampleApplication/#set-up-the-sdk-example-application","title":"Set up the SDK example application","text":"<p>The Workspace ONE SDK frameworks are excluded from this app. Add them to the project prior to building from source. </p> <p>The recommended way to add the frameworks is through Swift Package Manager (SPM). See under [Integrate the Swift package], below.</p> <p>The Swift package distribution is available from the 21.09 release of Workspace ONE for iOS. If you are using an earlier version, or aren't using SPM for any reason, then integrate the XCFramework instead. See under [Integrate the XCFramework distribution], below.</p> <p>If your app is integrated with an earlier version of Workspace ONE for iOS, using the XCFramework distribution, you can migrate to the Swift package. See under [Migrate from XCFramework integration to the Swift package], below.</p>"},{"location":"IntegrationGuideForiOS/Apps/SDKExampleApplication/#integrate-the-swift-package","title":"Integrate the Swift package","text":"<p>The Workspace ONE SDK for iOS is available as a Swift package. This is the recommended way to integrate the SDK.</p> <p>Proceed as follows.</p> <ol> <li> <p>Open your app project in Xcode.</p> </li> <li> <p>Navigate to File, Swift Packages, Add Package Dependency...</p> <p>This opens the Choose Package Repository screen.</p> </li> <li> <p>Enter the address of this repository     <code>https://github.com/vmwareairwatchsdk/iOS-WorkspaceONE-SDK</code> and click Next.</p> <p>This opens the Choose Package Options screen.</p> </li> <li> <p>Select the rule Branch, leave the default value for branch name, and click     Next.</p> <p>Xcode will resolve the package dependency, which might take some time.</p> <p>When resolution finishes, an Add Package screen opens.</p> </li> <li> <p>Select to add the AWSDK package product to your app target and click Finish.</p> </li> <li> <p>Check that the package has been added.</p> <p>In your app target, on the General tab, under Frameworks, Libraries, and Embedded Content, the name AWSDK should be listed.</p> </li> </ol> <p>This completes integration of the Workspace ONE for iOS Swift package. You are now ready for the next step, to [Build the SDK example application].</p>"},{"location":"IntegrationGuideForiOS/Apps/SDKExampleApplication/#migrate-from-xcframework-integration-to-the-swift-package","title":"Migrate from XCFramework integration to the Swift package","text":"<p>The Workspace ONE SDK for iOS is available as a Swift package since the 21.09 release. If your app is integrated with an earlier version, using the XCFramework distribution, you can migrate to the Swift package.</p> <p>Proceed as follows.</p> <ol> <li> <p>Open your app project in Xcode.</p> </li> <li> <p>Navigate to the app target, select the General tab and scroll down to the     Frameworks, Libraries, and Embedded Content section.</p> </li> <li> <p>Remove the item: <code>AWSDK.xcframework</code></p> </li> <li> <p>In the Xcode menu, select Product, Clean Build Folder.</p> </li> </ol> <p>The XCFramework integration has now been removed and the Swift package can be integrated instead. See under [Integrate the Swift Package], above.</p>"},{"location":"IntegrationGuideForiOS/Apps/SDKExampleApplication/#integrate-the-xcframework-distribution","title":"Integrate the XCFramework distribution","text":"<p>The Workspace ONE SDK for iOS is available as a Swift package since the 21.09 release. That is the recommended way to integrate the SDK. See under [Integrate the Swift Package], above.</p> <p>The following instructions apply to earlier releases of the SDK and are included here for completeness.</p> <ol> <li> <p>In a web browser, open the Workspace ONE for iOS home page on the VMware     Code website: developer.vmware.com/web/sdk/Native/airwatch-ios.</p> </li> <li> <p>Follow the instructions for downloading the Workspace ONE SDK for iOS     archive, which is a DMG file.</p> </li> <li> <p>Unzip the DMG file and locate the <code>AWSDK.xcframework</code> file.</p> </li> <li> <p>Open your app project in Xcode.</p> </li> <li> <p>Navigate to the app target, select the General tab and scroll down to the     Frameworks, Libraries, and Embedded Content section.</p> </li> <li> <p>Drag and drop AWSDK.xcframework from the archive into your app target     Frameworks, Libraries, and Embedded Content section.</p> <p>This action also adds the AWSDK.xcframework into the target Build Phases, in the Link Binary with Libraries section.</p> </li> </ol> <p>This completes integration of the Workspace ONE for iOS Swift package. You are now ready for the next step, to [Build the SDK example application].</p>"},{"location":"IntegrationGuideForiOS/Apps/SDKExampleApplication/#add-the-sdk-example-application-to-the-management-console","title":"Add the SDK example application to the management console","text":"<p>Adding the SDK example application to your Workspace ONE management console is the next step after setting up the app project. If you haven't set up the project yet, do so now. See under [Set up the SDK example application], above.</p> <p>Proceed as follows.</p> <ol> <li> <p>Build app and generate an IPA file in the usual way.</p> </li> <li> <p>Upload the IPA file as a new app to your Workspace ONE Unified Endpoint     Manager (UEM) console. You will need some UEM administrator privileges.</p> <p>Note: Uploading the IPA file is a way to make the UEM recogize your app as one that is allowed access to enterprise resources.</p> </li> <li> <p>Configure the default SDK profile or create a custom SDK profile in the UEM     console to set the required configurations for the app.</p> <p>Several of the ViewController classes in the example app check for SDK profile settings and demonstrate their configuration in the UEM console.</p> </li> <li> <p>Assign the app to the required users, for example your developer user. You     can use Smart Group assignment for this.</p> </li> <li> <p>Save and Publish the changes.</p> </li> </ol> <p>This completes adding the SDK example application to the management console. You are now ready for the next step, to [Run the SDK example application on a device].</p>"},{"location":"IntegrationGuideForiOS/Apps/SDKExampleApplication/#run-the-sdk-example-application-on-a-device","title":"Run the SDK example application on a device","text":"<p>Running the SDK example application is the next step after adding the app to your Workspace ONE management console. If you haven't added the app to your console, do so now. See under [Add the SDK example application to the management console] above.</p> <p>You can install the app onto your device using Workspace ONE, or install from Xcode. In either case, the following conditions apply.</p> <ul> <li> <p>The device must be enrolled against a Workspace ONE management console.</p> </li> <li> <p>The app must already have been uploaded to the UEM console or be recognized     in some other way.</p> </li> <li> <p>The app must be assigned to the device and end user.</p> </li> <li> <p>A physical device must be used. The app isn't compatible with the iOS     Simulator that comes with Xcode for example.</p> </li> </ul>"},{"location":"IntegrationGuideForiOS/Apps/SDKExampleApplication/#next-steps","title":"Next Steps","text":"<p>You can use the SDK example application for iOS as the starting point for your own Workspace ONE mobile application. You can also refer to the source code for examples of how to utilize Workspace ONE features.</p>"},{"location":"IntegrationGuideForiOS/Apps/SDKExampleApplication/#developer-resources","title":"Developer Resources","text":"<p>For the developer guide and other documentation, see the Workspace ONE for iOS home page on the VMware Code website, here: developer.vmware.com/web/sdk/Native/airwatch-ios.</p> <p>You can file support requests in VMware Customer Connect. See the following page for instructions: https://kb.vmware.com/s/article/2006985</p> <p>Code in this directory is based on Apple sample code. The original code is published on the Apple website, [Apple sample code] (https://developer.apple.com/library/archive/samplecode/CustomHTTPProtocol/Introduction/Intro.html).</p>"},{"location":"IntegrationGuideForiOS/Apps/SDKExampleApplication/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Apps/SwiftUIExampleApp/","title":"Workspace ONE Example Application for iOS","text":"<p>The SwiftUISDKExample app provides an overview of the common use cases of the Workspace ONE\u00ae software development kit (SDK) for iOS. Where appropriate, comments are added to the code.</p> <p>A complete developer guide is published on the VMware Code website, on the SDK home page, see: developer.vmware.com/web/sdk/Native/airwatch-ios.</p> <p>These instructions assume that you will use a physical device and the Apple Xcode integrated development environment (IDE).</p>"},{"location":"IntegrationGuideForiOS/Apps/SwiftUIExampleApp/#agreement","title":"Agreement","text":"<p>Before downloading, installing or using the VMware Workspace ONE SDK you must:</p> <ol> <li> <p>Review the     VMware Workspace ONE Software Development Kit License Agreement.     By downloading, installing, or using the VMware Workspace ONE SDK you agree     to these license terms.  If you disagree with any of the terms, then do not     use the software.</p> </li> <li> <p>Review the     VMware Privacy Notice     and the     Workspace ONE UEM Privacy Disclosure,     for information on applicable privacy policies.</p> </li> </ol> <p>This applies however you obtain the software.</p>"},{"location":"IntegrationGuideForiOS/Apps/SwiftUIExampleApp/#set-up-the-sdk-example-application","title":"Set up the SDK example application","text":"<p>The Workspace ONE SDK frameworks are excluded from this app. Add them to the project prior to building from source. </p> <p>The recommended way to add the frameworks is through Swift Package Manager (SPM). See under [Integrate the Swift package], below.</p> <p>The Swift package distribution is available from the 21.09 release of Workspace ONE for iOS. If you are using an earlier version, or aren't using SPM for any reason, then integrate the XCFramework instead. See under [Integrate the XCFramework distribution], below.</p> <p>If your app is integrated with an earlier version of Workspace ONE for iOS, using the XCFramework distribution, you can migrate to the Swift package. See under [Migrate from XCFramework integration to the Swift package], below.</p>"},{"location":"IntegrationGuideForiOS/Apps/SwiftUIExampleApp/#integrate-the-swift-package","title":"Integrate the Swift package","text":"<p>The Workspace ONE SDK for iOS is available as a Swift package. This is the recommended way to integrate the SDK.</p> <p>Proceed as follows.</p> <ol> <li> <p>Open your app project in Xcode.</p> </li> <li> <p>Navigate to File, Swift Packages, Add Package Dependency...</p> <p>This opens the Choose Package Repository screen.</p> </li> <li> <p>Enter the address of this repository     <code>https://github.com/vmwareairwatchsdk/iOS-WorkspaceONE-SDK</code> and click Next.</p> <p>This opens the Choose Package Options screen.</p> </li> <li> <p>Select the rule Branch, leave the default value for branch name, and click     Next.</p> <p>Xcode will resolve the package dependency, which might take some time.</p> <p>When resolution finishes, an Add Package screen opens.</p> </li> <li> <p>Select to add the AWSDK package product to your app target and click Finish.</p> </li> <li> <p>Check that the package has been added.</p> <p>In your app target, on the General tab, under Frameworks, Libraries, and Embedded Content, the name AWSDK should be listed.</p> </li> </ol> <p>This completes integration of the Workspace ONE for iOS Swift package. You are now ready for the next step, to [Build the SDK example application].</p>"},{"location":"IntegrationGuideForiOS/Apps/SwiftUIExampleApp/#migrate-from-xcframework-integration-to-the-swift-package","title":"Migrate from XCFramework integration to the Swift package","text":"<p>The Workspace ONE SDK for iOS is available as a Swift package since the 21.09 release. If your app is integrated with an earlier version, using the XCFramework distribution, you can migrate to the Swift package.</p> <p>Proceed as follows.</p> <ol> <li> <p>Open your app project in Xcode.</p> </li> <li> <p>Navigate to the app target, select the General tab and scroll down to the     Frameworks, Libraries, and Embedded Content section.</p> </li> <li> <p>Remove the item: <code>AWSDK.xcframework</code></p> </li> <li> <p>In the Xcode menu, select Product, Clean Build Folder.</p> </li> </ol> <p>The XCFramework integration has now been removed and the Swift package can be integrated instead. See under [Integrate the Swift Package], above.</p>"},{"location":"IntegrationGuideForiOS/Apps/SwiftUIExampleApp/#integrate-the-xcframework-distribution","title":"Integrate the XCFramework distribution","text":"<p>The Workspace ONE SDK for iOS is available as a Swift package since the 21.09 release. That is the recommended way to integrate the SDK. See under [Integrate the Swift Package], above.</p> <p>The following instructions apply to earlier releases of the SDK and are included here for completeness.</p> <ol> <li> <p>In a web browser, open the Workspace ONE for iOS home page on the VMware     Code website: developer.vmware.com/web/sdk/Native/airwatch-ios.</p> </li> <li> <p>Follow the instructions for downloading the Workspace ONE SDK for iOS     archive, which is a DMG file.</p> </li> <li> <p>Unzip the DMG file and locate the <code>AWSDK.xcframework</code> file.</p> </li> <li> <p>Open your app project in Xcode.</p> </li> <li> <p>Navigate to the app target, select the General tab and scroll down to the     Frameworks, Libraries, and Embedded Content section.</p> </li> <li> <p>Drag and drop AWSDK.xcframework from the archive into your app target     Frameworks, Libraries, and Embedded Content section.</p> <p>This action also adds the AWSDK.xcframework into the target Build Phases, in the Link Binary with Libraries section.</p> </li> </ol> <p>This completes integration of the Workspace ONE for iOS Swift package. You are now ready for the next step, to [Build the SDK example application].</p>"},{"location":"IntegrationGuideForiOS/Apps/SwiftUIExampleApp/#add-the-sdk-example-application-to-the-management-console","title":"Add the SDK example application to the management console","text":"<p>Adding the SDK example application to your Workspace ONE management console is the next step after setting up the app project. If you haven't set up the project yet, do so now. See under [Set up the SDK example application], above.</p> <p>Proceed as follows.</p> <ol> <li> <p>Build app and generate an IPA file in the usual way.</p> </li> <li> <p>Upload the IPA file as a new app to your Workspace ONE Unified Endpoint     Manager (UEM) console. You will need some UEM administrator privileges.</p> <p>Note: Uploading the IPA file is a way to make the UEM recogize your app as one that is allowed access to enterprise resources.</p> </li> <li> <p>Configure the default SDK profile or create a custom SDK profile in the UEM     console to set the required configurations for the app.</p> <p>Several of the ViewController classes in the example app check for SDK profile settings and demonstrate their configuration in the UEM console.</p> </li> <li> <p>Assign the app to the required users, for example your developer user. You     can use Smart Group assignment for this.</p> </li> <li> <p>Save and Publish the changes.</p> </li> </ol> <p>This completes adding the SDK example application to the management console. You are now ready for the next step, to [Run the SDK example application on a device].</p>"},{"location":"IntegrationGuideForiOS/Apps/SwiftUIExampleApp/#run-the-sdk-example-application-on-a-device","title":"Run the SDK example application on a device","text":"<p>Running the SDK example application is the next step after adding the app to your Workspace ONE management console. If you haven't added the app to your console, do so now. See under [Add the SDK example application to the management console] above.</p> <p>You can install the app onto your device using Workspace ONE, or install from Xcode. In either case, the following conditions apply.</p> <ul> <li> <p>The device must be enrolled against a Workspace ONE management console.</p> </li> <li> <p>The app must already have been uploaded to the UEM console or be recognized     in some other way.</p> </li> <li> <p>The app must be assigned to the device and end user.</p> </li> <li> <p>A physical device must be used. The app isn't compatible with the iOS     Simulator that comes with Xcode for example.</p> </li> </ul>"},{"location":"IntegrationGuideForiOS/Apps/SwiftUIExampleApp/#next-steps","title":"Next Steps","text":"<p>You can use the SDK example application for iOS as the starting point for your own Workspace ONE mobile application. You can also refer to the source code for examples of how to utilize Workspace ONE features.</p>"},{"location":"IntegrationGuideForiOS/Apps/SwiftUIExampleApp/#developer-resources","title":"Developer Resources","text":"<p>For the developer guide and other documentation, see the Workspace ONE for iOS home page on the VMware Code website, here: developer.vmware.com/web/sdk/Native/airwatch-ios.</p> <p>You can file support requests in VMware Customer Connect. See the following page for instructions: https://kb.vmware.com/s/article/2006985</p> <p>Code in this directory is based on Apple sample code. The original code is published on the Apple website, [Apple sample code] (https://developer.apple.com/library/archive/samplecode/CustomHTTPProtocol/Introduction/Intro.html).</p>"},{"location":"IntegrationGuideForiOS/Apps/SwiftUIExampleApp/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/","title":"Integration Preparation Guide","text":""},{"location":"IntegrationGuideForiOS/Guides/22Preparation/#workspace-one-for-ios-and-ipados","title":"Workspace ONE for iOS and iPadOS","text":"<p>Applications for iOS and iPadOS can be integrated with the VMware Workspace ONE\u00ae platform, by using its mobile software development kit.</p> <p>The tasks detailed below should be done first, to prepare for integration of your application with the Workspace ONE platform. After completing these tasks, you will be ready to begin the integration work.</p> <p>This document is part of the Workspace ONE Integration Guide set.</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/#welcome","title":"Welcome","text":""},{"location":"IntegrationGuideForiOS/Guides/22Preparation/#prerequisite-conditions","title":"Prerequisite Conditions","text":""},{"location":"IntegrationGuideForiOS/Guides/22Preparation/#compatibility","title":"Compatibility","text":""},{"location":"IntegrationGuideForiOS/Guides/22Preparation/#task-select-or-create-an-application-to-integrate","title":"Task: Select or create an application to integrate","text":""},{"location":"IntegrationGuideForiOS/Guides/22Preparation/#task-generate-an-application-installer-file","title":"Task: Generate an application installer file","text":""},{"location":"IntegrationGuideForiOS/Guides/22Preparation/#instructions-for-developer-accounts","title":"Instructions for developer accounts","text":""},{"location":"IntegrationGuideForiOS/Guides/22Preparation/#instructions-for-personal-accounts","title":"Instructions for personal accounts","text":""},{"location":"IntegrationGuideForiOS/Guides/22Preparation/#task-add-the-application-to-the-management-console","title":"Task: Add the application to the management console","text":""},{"location":"IntegrationGuideForiOS/Guides/22Preparation/#task-install-the-application-via-workspace-one","title":"Task: Install the application via Workspace ONE","text":""},{"location":"IntegrationGuideForiOS/Guides/22Preparation/#next-steps","title":"Next Steps","text":""},{"location":"IntegrationGuideForiOS/Guides/22Preparation/#appendix-apple-accounts","title":"Appendix: Apple Accounts","text":""},{"location":"IntegrationGuideForiOS/Guides/22Preparation/#document-information","title":"Document Information","text":""},{"location":"IntegrationGuideForiOS/Guides/22Preparation/#published-locations","title":"Published Locations","text":"<p>This document is available</p> <ul> <li> <p>in Markdown format, in the repository that also holds the sample code: github.com/vmware-samples/.../IntegrationGuideForiOS/...Preparation/</p> </li> <li> <p>in Portable Document Format (PDF), on the VMware website: developer.vmware.com/.../WorkspaceONE_iOS_IntegrationPreparation.pdf</p> </li> </ul>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/#revision-history","title":"Revision History","text":"Date Revision 19may2023 First correct publication, for 23.04 SDK for iOS. 08jun2023 Publication for 23.06 SDK for iOS. 19jul2023 Publication for 23.07 SDK for iOS. 11sep2023 Publication for 23.09 SDK for iOS. 31oct2023 Publication for 23.10 SDK for iOS. 14Dec2023 Publication for 23.12 SDK for iOS. 29Jan2024 Publication for 24.01 SDK for iOS."},{"location":"IntegrationGuideForiOS/Guides/22Preparation/#legal","title":"Legal","text":"<ul> <li>VMware, Inc. 3401 Hillview Avenue Palo Alto CA 94304 USA     Tel 877-486-9273 Fax 650-427-5001 www.vmware.com</li> <li>Copyright \u00a9 2024 VMware LLC. All rights reserved.</li> <li>This content is protected by U.S. and international copyright and     intellectual property laws. VMware products are covered by one     or more patents listed at     https://www.vmware.com/go/patents.     VMware is a registered trademark or trademark of VMware, Inc. and its     subsidiaries in the United States and other jurisdictions. All other marks     and names mentioned herein may be trademarks of their respective companies.</li> <li>The Workspace ONE Software Development Kit integration samples are     licensed under a two-clause BSD license.     SPDX-License-Identifier: BSD-2-Clause</li> </ul>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/01Welcome/","title":"Integration Preparation Guide - Welcome","text":"<p>Welcome to the Workspace ONE Integration Preparation Guide for iOS and iPadOS.</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/01Welcome/#objectives","title":"Objectives","text":"<p>The objectives of this guide are for you to</p> <ul> <li>verify your app works.</li> <li>verify your developer device is viable.</li> <li>use the Workspace ONE Unified Endpoint Manager (UEM) console.</li> <li>verify the round trip from integrated developer environment (IDE) to end     user device.</li> <li>verify you will be able to install the app from your IDE later, when     integration work is in progress.</li> </ul> <p>The integration preparation guide doesn't include any work at the code level. That will start in the base integration guide, which is next.</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/01Welcome/#overview","title":"Overview","text":"<p>This is an overview of the steps in the guide.</p> <ol> <li>Build your app without Workspace ONE integration.</li> <li>Install the app to a developer device from the IDE.</li> <li>Uninstall the app from the developer device.</li> <li>Generate an iOS Package Archive (IPA) file for the app.</li> <li>Upload the IPA to the UEM as a new internal app.</li> <li>Install Hub on the developer device.</li> <li>Enrol Hub with the UEM console.</li> <li>From Hub, install your app.</li> <li>From the IDE, make a visible change to the app and install that as an     upgrade.</li> </ol> <p>Enrolling Hub with the UEM console establishes trust between the device and the UEM. Installing your app from Hub will enable it to be trusted by the UEM subsequently.</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/01Welcome/#installation-order-note","title":"Installation Order Note","text":"<p>If you follow the integration guide set, you will install your application on a developer device as follows.</p> <ul> <li> <p>The first installation will be of a non-integrated version of the     application via Workspace ONE.</p> </li> <li> <p>Subsequent installations will be of integrated versions of the application     from your IDE. This type of installation is referred to as a side load.</p> </li> </ul> <p>The side-load installations will be upgrades. The application won't ever be uninstalled after the first installation via Workspace ONE.</p> <p>It actually isn't necessary to install an application via Workspace ONE if it isn't integrated. It might therefore seem natural to delay installation via Workspace ONE until some integration work has been done. This guide doesn't follow that order though.</p> <p>The rationale is that installation via Workspace ONE involves activities with which you may be unfamiliar, such as generating an IPA file, and use of the Workspace ONE management console. It's better to do those activities with the application in a known working state.</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/01Welcome/#first-steps","title":"First Steps","text":"<p>Begin by checking the Prerequisite Conditions.</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/01Welcome/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/02PrerequisiteConditions/","title":"Integration Preparation Guide - Prerequisite Conditions","text":"<p>Before you begin, you will need the following.</p> <ul> <li> <p>Access to a Workspace ONE management console.</p> <p>You will need access to a Workspace ONE management console to work on application integration. The management console is sometimes referred to as the UEM, an abbreviation for Unified Endpoint Manager.</p> <p>You will need to know the following:</p> <ul> <li>Server address.</li> <li>Administrative login credentials.</li> </ul> <p>You will need the following privileges:</p> <ul> <li>Upload a mobile application installer, which will be an iOS Package     Archive (IPA) file.</li> <li>Either create an organisation group for an end user, or get the name of     an existing group.</li> <li>Either create a new end user with a suitable profile for development     purposes, or get the name of an existing suitable user.</li> <li>Either create enrolment credentials for an end user, or get existing     credentials.</li> </ul> <p>Best practice is to have a separate console, or organisation group, for  software development.</p> <p>Workspace ONE supports installation of custom apps on managed and unmanaged devices. If you have a choice, it will be easier for development if the use of unmanaged devices, sometimes referred to as Hub Registered mode, is allowed in the device enrollment policies.</p> </li> <li> <p>Apple account, ideally with a developer membership.</p> <p>In case you don't have a developer membership, it is possible to use a personal Apple account for Workspace ONE integration work. A developer account will be better. For a discussion of the differences, see the Appendix: Apple Accounts.</p> </li> <li> <p>Developer environment.</p> <p>The instructions in the integration guide documents assume you use the Apple Xcode integrated developer environment (IDE). Check the Compatibility table for a recommended version.</p> <p>The Xcode IDE can be obtained from Apple, for example by downloading from their developer website here. https://developer.apple.com/download/all/</p> </li> <li> <p>Developer device.</p> <p>You will need a physical iOS or iPadOS device to to work on application integration. You will install the Workspace ONE Intelligent Hub app on the device as part of preparation.</p> <p>The iOS and iPadOS simulators cannot be used because they may appear as jailbroken or otherwise compromised to the Hub app. The Hub must be used to install the application that is being integrated at least once during the integration work. After the first installation via Hub, subsequent installations can be made using Xcode in the usual way.</p> <p>The device must be set up to trust your computer. When you connect the device for the first time a prompt will be shown on the device, which you must accept to use the device for development purposes.</p> <p>The device might also have to be set up for developer use, depending on its operating system version. Instructions for setting up a developer device can be found on the Apple developer website, for example here. developer.apple.com/\u2026/enabling-developer-mode-on-a-device</p> <p>The device must be compatible with the Apple account that you are using. If you are using a developer account then the device might have to be registered to the associated developer organization. Xcode can do this automatically. Check the Apple developer website for details, for example here. developer.apple.com/\u2026/register-a-single-device</p> <p>Don't use a device that is already enrolled with a production Workspace ONE console. A device can sometimes be unenrolled from within the Hub application on the device, or by resetting to factory defaults.</p> </li> </ul> <p>When the prerequisite conditions are met, you can start the first Task: Select or create an application to integrate.</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/02PrerequisiteConditions/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/02PrerequisiteConditions/01Compatibility/","title":"Compatibility","text":"<p>Instructions in this document have been followed with the Workspace ONE Software Development Kit (SDK) for iOS and other software, to confirm compatibility.</p> <p>The following table shows the software versions used for the instructions, and the minimum supported versions if different.</p> Software Instructions Supported Workspace ONE software development kit for iOS 24.01 Workspace ONE management console 2306 2206 Workspace ONE Intelligent Hub application 23.11 Apple iOS or iPadOS Operating System 17.0 15 Apple Xcode integrated development environment 15.0 14.3 <p>The SDK supports versions of the Swift language that are supported by the above Xcode versions.</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/02PrerequisiteConditions/01Compatibility/#license","title":"License","text":"<p>Copyright 2024 VMware LLC. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/03Task_Select-or-create-an-application-to-integrate/","title":"Task Select or create an application to integrate","text":"<p>Integrating an application with Workspace ONE will involve changes to the application source code. You will need access to the Swift source, bundle files, project files, and to any other files required to build the application.</p> <p>You can integrate Workspace ONE with a mobile application of your own for which you already have the source. If you choose to do that then you can skip this task and continue with the next Task: Generate an application installer file.</p> <p>You can instead create a sample application from an Xcode project template, by following these instructions. These are provided here for convenience; for definitive information, see the Apple developer website.</p> <ol> <li> <p>Open the Xcode application.</p> </li> <li> <p>In the menu, select File, New, Project\u2026</p> <p>This opens a dialog on which you select a project template.</p> </li> <li> <p>Select the iOS App template, which could be the default, and click Next.</p> <p>This screen capture shows selection in the Xcode user interface.</p> <p></p> <p>When you click Next a dialog will open on which you can specify options for the new project.</p> </li> <li> <p>For the Product Name, enter <code>ws1app</code> or any name you like.</p> <p>Tip: If you use all small letters the bundle identifier will also be all small letters and won't have to be edited later.</p> </li> <li> <p>If you have a developer account, select its organization as the Team.</p> <p>For a discussion about developer and personal accounts see the Appendix: Apple Accounts.</p> <p>If you don't have a developer account then you can select a Personal Team instead.</p> </li> <li> <p>For the Interface, select SwiftUI or Storyboard as you prefer.</p> <p>Both user interfaces are supported by Workspace ONE for iOS. SwiftUI is recommended.</p> </li> <li> <p>For the Language, select Swift or Objective-C as you prefer.</p> <p>Both languages are supported by Workspace ONE for iOS. Swift is recommended, and will be the only option if you chose SwiftUI for the Interface.</p> </li> <li> <p>There is no need to Use Core Data, nor to Include Tests.</p> <p>This screen capture shows the dialog as it might appear.</p> <p></p> <p>(The team name begins \"Ai\" but is otherwise hidden.)</p> </li> <li> <p>Check the values and click Next.</p> </li> <li> <p>Choose a location to save your project.</p> <p>It can be a good idea to create a new sub-directory for the project.</p> <p>When you have chosen the location Xcode will generate the project files, which might take a little while. Wait for processing to finish.</p> </li> <li> <p>Run the new app on a device once.</p> <p>To confirm that the project, your developer environment, and your device are all set up correctly, run the new app on your developer device from Xcode.</p> <p>Your device might show an error like Untrusted Developer. The error message will have instructions for how to clear the error condition. Follow the instructions and try again to run the app.</p> </li> <li> <p>Uninstall the app.</p> <p>Uninstall the app so that you can install it from Workspace ONE.</p> </li> </ol> <p>This completes the creation of a sample application. You are now ready to continue with the next Task: Generate an application installer file.</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/03Task_Select-or-create-an-application-to-integrate/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/04Task_Generate-an-application-installer-file/","title":"Task Generate an application installer file","text":"<p>Generating an application installer file is a task for application developers. The task is dependent on the Task: Select or create an application to integrate. The following instructions assume that the dependent task is complete already.</p> <p>You will need to generate an application installer file for your app at least once so that your app can be trusted by the Workspace ONE UEM console and Hub app. Note that you don't need to do any Workspace ONE integration in the application at this stage.</p> <p>The installer file will be in a format known as IPA, now a back-formed abbreviation for iOS Package Archive. You can generate an IPA file for your app with Xcode. Instructions are provided here for convenience; for definitive information, see the Apple developer website.</p> <p>You will need an Apple account to generate an IPA file. You will also need to know what type of account you have, specifically whether you have a developer account or not.</p> <ul> <li> <p>If you have a developer account then you should use that when you are     building your app. Follow     the Instructions for developer accounts     to generate the IPA file.</p> </li> <li> <p>If you don't have a developer account, then you will have to follow     the Instructions for personal accounts     to generate the IPA file.</p> </li> </ul> <p>In case you are unsure what account type you have, see the Appendix: Apple Accounts.</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/04Task_Generate-an-application-installer-file/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/04Task_Generate-an-application-installer-file/01Instructions-for-developer-accounts/","title":"Instructions for developer accounts","text":"<p>If you have an Apple developer account you can generate an application installer file by following these instructions. These are provided here for convenience; for definitive information, see the Apple developer website. If you don't have a developer account, or aren't sure what type of account you have, then review the introduction to the Task: Generate an application installer file.</p> <ol> <li> <p>Open the application project in Xcode.</p> </li> <li> <p>Ensure that your developer account and organization are the selected team     for the app.</p> <p>This screen capture shows the location of team selection in the Xcode user interface.</p> <p></p> <p>For more tips on accounts and organizations, see the Appendix: Apple Accounts.</p> </li> <li> <p>Ensure that your developer device is connected and is the chosen build     target.</p> <p>If necessary, set up your device for developer use, for example by following the instructions on the Apple developer website here. developer.apple.com/\u2026/enabling-developer-mode-on-a-device</p> </li> <li> <p>In the Xcode menu select Product, Archive.</p> <p>Wait for the success message, shown in this screen capture, or for the Organizer window to open.</p> <p></p> </li> <li> <p>In the Xcode Organizer Window, select to distribute the archive you just     created.</p> <p>If the window didn't open automatically when archiving succeeded, you can open it manually from the Xcode menu by selecting Window, Organizer.</p> <p>Click the Distribute App button, shown in this screen capture.</p> <p></p> <p>This will start an interaction spread across multiple screens, beginning with selecting a method of distribution.</p> </li> <li> <p>Select Development distribution and click Next.</p> <p>All being well, Xcode will process for a short time and then open the next screen, on which you will select options for development distribution.</p> <p>If the team selected for the app isn't associated with membership of a developer organization then processing will fail. An error will be displayed that the team isn't enrolled in the developer program.</p> <p>This screen capture shows the error message.</p> <p></p> <p>If this happens then check that you have a developer account and that it is selected for the app. See also the Appendix: Apple Accounts. If you don't have a developer account then you will have to follow the Instructions for personal accounts instead.</p> </li> <li> <p>On the developer distribution options screen, leave the default selections     in place and click Next.</p> <p>The default selections are App Thinning: None and no Additional Options.</p> <p>An option like Rebuild from Bitcode might be offered. If you are following the recommended sequence and generating an installer for a non-integrated app then the Bitcode option doesn't matter. However, if the app has been integrated with the Workspace ONE SDK then any Bitcode option must be deselected. The SDK binaries don't support Bitcode.</p> <p>When you click Next, the re-sign screen opens.</p> </li> <li> <p>Select to Automatically manage signing and click Next.</p> <p>Xcode processes for a short time and then opens the next screen, on which you review the package contents.</p> </li> <li> <p>Check the details and click Export.</p> <p>This opens a file chooser dialog. The default location will be in a new directory at the level above the Xcode project.</p> </li> <li> <p>Make a note of the location and click Export to finish.</p> <p>Xcode will create an iOS Package Archive (IPA) installer file in the chosen location. Open the location in the Finder and locate the .ipa file.</p> <p>This screen capture shows how it might appear.</p> <p></p> </li> </ol> <p>This completes generation of an application installer file for a developer account. You are now ready to continue with the next Task: Add the application to the management console.</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/04Task_Generate-an-application-installer-file/01Instructions-for-developer-accounts/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/04Task_Generate-an-application-installer-file/02Instructions-for-personal-accounts/","title":"Instructions for personal accounts","text":"<p>If you don't have an Apple developer account you can generate an application installer file by following these instructions. If you do have a developer account then you should use that instead and follow the Instructions for developer accounts. If you aren't sure what type of account you have, then review the introduction to the Task: Generate an application installer file.</p> <ol> <li> <p>Open the application project in Xcode.</p> </li> <li> <p>Check the account and organization that are selected team for the app.</p> <p>This screen capture shows the location of team selection in the Xcode user interface.</p> <p></p> <p>For more tips on accounts and organizations, see the Appendix: Apple Accounts.</p> </li> <li> <p>Ensure that your developer device is connected and is the chosen build     target.</p> <p>If necessary, set up your device for developer use, for example by following the instructions on the Apple developer website here. developer.apple.com/\u2026/enabling-developer-mode-on-a-device</p> </li> <li> <p>In the Xcode menu select Product, Build.</p> <p>Wait for the success message, shown in this screen capture.</p> <p></p> </li> <li> <p>In the Xcode menu select Product, Show Build Folder in Finder.</p> </li> <li> <p>In the build folder, locate the .app item for your application.</p> <p>The required item could be under the Products/ directory, in a sub-directory.</p> <p>Finder displays it as a plain file with type Application. However, the .app item is actually a type of folder structure. You can cd into it using the command line in a terminal for example.</p> <p>This screen capture shows how the .app item might appear in Finder.</p> <p></p> </li> <li> <p>Create a new folder named <code>Payload</code></p> <p>The new folder can be in the build folder or elsewhere on your computer.</p> </li> <li> <p>Copy or move the .app item under the new Payload folder.</p> <p>This screen capture shows how the Payload folder might appear.</p> <p></p> <p>(In this case, the .app has been copied.)</p> </li> <li> <p>Compress the Payload folder, for example by highlighting it and then     selecting File, Compress in the Finder menu.</p> <p>This creates a <code>Payload.zip</code> file.</p> <p>The Payload folder is no longer required and you can delete it now, if you like.</p> </li> <li> <p>Rename <code>Payload.zip</code> to <code>ws1app.ipa</code></p> <p>Finder might warn you that changing the extension may cause the file to open in a different application. If it does then confirm that you want to use the .ipa extension.</p> <p>You could change the name part of the file to something different, if you chose a different name for your app for example.</p> <p>This screen capture shows a possible final state of the build folder and renamed file.</p> <p></p> <p>You could proceed to uploading the .ipa file to the UEM now. However, it's a good idea to test the file first. You can do this by side loading it to your developer device using Xcode as described here.</p> </li> <li> <p>In the Xcode menu select Window, Devices and Simulators.</p> <p>This opens the Xcode device management window.</p> </li> <li> <p>In the left pane, select Devices and your developer device, if it isn't     selected by default.</p> </li> <li> <p>In the right pane, scroll down to the list of installed apps.</p> </li> <li> <p>Click the plus button under the list of installed apps.</p> <p>This screen capture shows the location of the button.</p> <p></p> <p>This opens a file chooser.</p> </li> <li> <p>In the file chooser, select the .ipa file.</p> <p>Tip: If you have the .ipa file highlighted in Finder, you can copy its path by pressing Cmd+Alt+C. If you then type an oblique, <code>/</code>, in the Xcode file chooser, it will open a text box in which you can paste the copied path. Delete the oblique before pasting.</p> <p>Xcode will install the app in the .ipa file to your developer device.</p> </li> <li> <p>Check the app opens and the user interface appears as expected.</p> </li> <li> <p>Remove the app from the device.</p> <p>You can do this on the device, or in the Xcode device manager window.</p> </li> </ol> <p>This completes generation of an application installer file for a personal account. You are now ready to continue with the next Task: Add the application to the management console.</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/04Task_Generate-an-application-installer-file/02Instructions-for-personal-accounts/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/05Task_Add-the-application-to-the-management-console/","title":"Task Add the application to the management console","text":"<p>Adding an application to the management console is a task for application developers. You will need the iOS Package Archive (IPA) file from the Task: Generate an application installer file. The following instructions assume that you have the IPA file already.</p> <p>You can add an application to the Workspace ONE Unified Endpoint Manager (UEM) console by following these instructions. These are provided here for application developer convenience and aren't intended to replace the system administrator user guides for the Workspace ONE product.</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/05Task_Add-the-application-to-the-management-console/#upload-the-application-installer","title":"Upload the application installer","text":""},{"location":"IntegrationGuideForiOS/Guides/22Preparation/05Task_Add-the-application-to-the-management-console/#configure-and-publish-the-application","title":"Configure and publish the application","text":""},{"location":"IntegrationGuideForiOS/Guides/22Preparation/05Task_Add-the-application-to-the-management-console/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/05Task_Add-the-application-to-the-management-console/01Upload-the-application-installer/","title":"Upload the application installer","text":"<p>Uploading the application installer is part of the Task: Add the application to the management console. Proceed as follows.</p> <ol> <li> <p>Log in to the UEM and select the Organization Group (OG) of the end user     that you are using for development.</p> </li> <li> <p>Navigate to: Resources, Apps, Native.</p> <p>Depending on your console version and customization the navigation could be different.</p> <ul> <li>Resources might be labelled Apps &amp; Books instead.</li> <li>Apps might be labelled Applications instead.</li> </ul> <p>However you navigate, a list of applications will open.</p> </li> <li> <p>Select the Internal tab if it isn't selected by default.</p> </li> <li> <p>Expand the Add control and select Application File.</p> <p>The following screen capture shows the location in the user interface.</p> <p></p> <p>This opens the Add Application dialog.</p> </li> <li> <p>Select the group of the end user that you are using for development if it     isn't selected by default.</p> </li> <li> <p>Click Upload, which opens the Add dialog.</p> </li> <li> <p>On the Add dialog: select Local File, then click Choose file.</p> <p>This opens a file chooser dialog.</p> </li> <li> <p>Locate and select your IPA file, then click Save.</p> <p>Tip: If you have the .ipa file highlighted in Finder, you can copy its path by pressing Cmd+Alt+C. If you then type an oblique, <code>/</code>, in the browser file chooser, it will open a text box in which you can paste the copied path. Delete the oblique first.</p> <p>The file will be uploaded and progress will be indicated on the screen.</p> <p>When the upload finishes, the Add dialog closes and you return to the Add Application dialog. The file name will have been filled in.</p> </li> <li> <p>On the Add Application dialog, click Continue.</p> <p>This opens the next step, which is a dialog in which the details can be edited.</p> </li> </ol> <p>Continue with the instructions Configure and publish the application.</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/05Task_Add-the-application-to-the-management-console/01Upload-the-application-installer/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/05Task_Add-the-application-to-the-management-console/02Configure-and-publish-the-application/","title":"Configure and publish the application","text":"<p>Configuring and publishing the application is part of the  Task: Add the application to the management console. These instructions come after the Upload the application installer instructions.</p> <p>Proceed as follows.</p> <ol> <li> <p>In the application details dialog, append your user name to the application     name, if you like.</p> <p>Appending your user name will make clear, to anybody with access to the console, that you are responsible for this application.</p> </li> <li> <p>In the same dialog, ensure that an SDK profile is selected.</p> <p>If you are following the recommended installation order and have uploaded an app without Workspace ONE integration, then this step is in theory unnecessary. In practice however, this is a convenient point at which to make the selection and it might be forgotten later when integration work is in progress and it's essential.</p> <p>Select the SDK tab in the dialog, then select an SDK profile if one isn't selected already. The SDK tab might be under a More drop-down.</p> <p>The following screen captures show the interaction and a selected profile.</p> <p></p> <p></p> <p></p> <p>(In the above screen capture, the selected profile is \"iOS Default Settings @ Global\".)</p> <p>Ignore the Application Profile selection.</p> <p>Click Save &amp; Assign. The Assignment Distribution dialog will open.</p> </li> <li> <p>Set the Name and Assignment Groups as follows.</p> <ul> <li>Set Name to <code>all</code> or any other name you like.</li> <li>Select the assignment group for all devices in the Organization Group     (OG).</li> </ul> <p>The following screen capture shows selection of the group.</p> <p></p> <p>(In the above screen capture the OG name is Root.)</p> <p>There is no need to add or enable any other items, like restrictions, at this time.</p> <p>Click Create and a dialog will open in which you can review the new assignment.</p> </li> <li> <p>On the assignment review dialog, click Save.</p> <p>This opens the Preview Assigned Devices dialog.</p> </li> <li> <p>Check that your developer device appears in the preview of assigned devices.</p> <p>If it doesn't appear, retrace your steps and check you followed all the instructions. Also check which UEM Organization Group (OG) the end user is enrolled into. That OG must be the same as the one the app was added to, or be a child OG of the one the app was added to.</p> </li> <li> <p>Click Publish.</p> <p>This finalizes the addition and returns you to the Applications part of the console. The detail view of the app you just added will be open.</p> </li> </ol> <p>This completes adding the application to the management console. You are now ready to continue with the next Task: Install the application via Workspace ONE.</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/05Task_Add-the-application-to-the-management-console/02Configure-and-publish-the-application/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/06Task_Install-the-application-via-Workspace-ONE/","title":"Task Install the application via Workspace ONE","text":"<p>Installing the application via Workspace ONE is a platform integration task for iOS and iPadOS application developers. The task is dependent on the Task: Add the application to the management console. The following instructions assume that the dependent task is complete already.</p> <p>Proceed as follows.</p> <ol> <li> <p>Install and enrol the Workspace ONE Intelligent Hub application.</p> <p>Workspace ONE supports installation of custom apps on managed and unmanaged devices. In either case, the Hub app must be installed and enrolled before the custom app is installed. The Hub can be installed from the Apple app store. Search for \"workspace one intelligent hub\", for example.</p> <p>This screen capture shows the top of the Apple app store page for the Hub app.</p> <p></p> <p>If you are installing Hub other than from the app store then check the Compatibility table for a recommended version of Hub.</p> <p>Follow the instructions in the Hub application to complete enrollment. You will need to know the server address and a set of end user enrollment credentials. Enrolling Hub establishes trust between the device and the UEM console.</p> <p>Tip: Set a device passcode before you begin enrollment. Typical UEM configurations will require a passcode, as a security policy. If a device passcode isn't set at the start of the enrollment interaction, you will be forced to  set it as an enrollment step, which sometimes doesn't go smoothly.</p> <p>Warning: The Hub application cannot be enrolled with more than one management console at a time. If the Hub is already installed and enrolled on your developer device, then it must now be unenrolled, or removed and re-installed. Unenrolling or removing the Hub may cause removal of any associated applications from the device.</p> <p>You may want to try different enrolment options such as managed and unmanaged modes, or into a different organization group (OG) with other policy settings. In all cases, it will be necessary to unenroll the Hub, or wipe it from the console, and uninstall Hub and all the apps before trying the next option.</p> </li> <li> <p>Install your application from Hub.</p> <p>Your application can now be installed from the Hub app on the device. Find it in the Apps tab and select to install it.</p> <p>In case your application doesn't appear, try these troubleshooting steps.</p> <ul> <li>Open the Hub application Apps tab and pull down to refresh.</li> <li>Open the Hub application and select Support, then your developer device     which will be labelled as (Current), then Sync Device.</li> <li>Terminate the Hub using the device task manager, then open Hub again.</li> </ul> <p>If you are using an Apple developer account, then the installed app can now be run. If you are using only a personal account then the installed app might actually be a placeholder that cannot be run. The next instruction fixes this.</p> </li> <li> <p>Side load your application from Xcode.</p> <p>To confirm that your setup is ready to begin Workspace ONE integration work, connect your developer device to your computer and install and run your app from Xcode in the usual way. Don't uninstall the app, so the Xcode side load will be installed as an upgrade.</p> <p>Make a superficial but obvious change to your app first, so you can check that the side load worked. For example, if your app has a hello-world type of message in its user interface, change it to \"Hello World 2\".</p> <p>If you earlier used a personal account to generate the IPA file, the side load will now overwrite the placeholder with the full app that can be run on the device.</p> </li> </ol> <p>This completes the task.</p> <p>Warning: Don't uninstall Hub nor your app from this point until you finish the SDK integration work.</p> <p>You can now proceed to the Next Steps.</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/06Task_Install-the-application-via-Workspace-ONE/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/07Next-Steps/","title":"Next Steps","text":"<p>This completes the preparation for integrating your mobile app with the Workspace ONE platform. You are now ready to start code-level integration in your application.</p> <p>See the Base Integration guide for instructions. The Base Integration Guide is available</p> <ul> <li> <p>in Markdown format, in the repository that also holds the sample code: https://github.com/vmware-samples/...BaseIntegration.md TBD</p> </li> <li> <p>in Portable Document Format (PDF), on the VMware website: https://developer.vmware.com/...BaseIntegration.pdf TBD</p> </li> </ul>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/07Next-Steps/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/21Appendix_Apple-Accounts/","title":"Appendix Apple Accounts","text":"<p>You will need an Apple account to complete the work of integrating an iOS or iPadOS application with Workspace ONE. For the purposes of that work there are two types of Apple account, developer and personal. Some instructions for checking your account type are given below. These are provided here for convenience; for a full discussion of account types and memberships, see the Apple developer website, for example here. https://developer.apple.com/support/compare-memberships/</p> <p>(Sensitive information in the screen captures in this section has been hidden.)</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/21Appendix_Apple-Accounts/#how-to-check-account-type","title":"How to check account type","text":"<p>A developer account is one that is a member of a developer organization. Follow these instructions to check the organizations of which your account is a member.</p> <ol> <li> <p>Log in to your account on the     developer.apple.com website.</p> </li> <li> <p>If you are a member of multiple organizations, select one of them.</p> <p>This screen capture shows selection in the Apple developer website.</p> <p></p> <p>In this screen capture the user is a member of two organizations. The name of one organization starts with \"Ai\" the name of the other starts with \"Wa\". The organization starting \"Ai\" is selected.</p> <p>If you aren't a member of any organizations, then you have a personal account and can skip the remaining steps.</p> </li> <li> <p>Scroll down to the Membership details.</p> <p>The top of the section might look like one of these screen captures.</p> <p></p> <p></p> <p></p> <p></p> </li> <li> <p>Check if the word Developer appears in the Program name for the     organization.</p> <p>If it does then you have a developer account. Note that this applies to both the developer program and the developer enterprise program.</p> <p>If it doesn't then you have a personal account, unless you're a member of multiple organizations, see above, and one of the others has Developer in the Program name.</p> </li> </ol> <p>The account type has now been determined.</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/21Appendix_Apple-Accounts/#association-of-apple-accounts-with-application-projects","title":"Association of Apple accounts with application projects","text":"<p>An Apple organization of some kind is associated with every iOS or iPadOS app, at build time. The associated organization may be referred to as having signed the app. You can select which organization to associate with an app in Xcode.</p> <p></p> <ol> <li> <p>Open the app project in Xcode.</p> </li> <li> <p>In the navigator select the project itself.</p> <p>By default, the project itself will be the first item in the navigator.</p> </li> <li> <p>In the project editor, select the app target that you're using for     integration.</p> <p>By default, each app project has only a single target.</p> </li> <li> <p>In the target editor, select the Signing &amp; Capabilities tab.</p> </li> <li> <p>Select the required account and organization with the Team drop-down     menu.</p> </li> </ol> <p>These screen captures show the location in the Xcode user interface and the expanded Team drop-down menu.</p> <p></p> <p></p> <p>In this screen capture there are two Personal Team organizations and three other organizations. The name of the selected organization begins Ai.</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/21Appendix_Apple-Accounts/#account-availability-in-the-integrated-developer-environment","title":"Account availability in the integrated developer environment","text":"<p>Your Apple account and organization membership must appear in Xcode in order to complete Workspace ONE integration work.</p> <p>You can check this by opening Xcode and selecting Xcode, Settings, and then the Accounts tab.</p> <p>This screen capture shows how the tab might appear.</p> <p></p> <p>In this screen capture there are two Apple accounts, of which the first is selected. The Apple ID of the selected account is a vmware.com email address. The Apple ID of the second begins sj and is an email address. The selected Apple ID is a member of an organization whose name begins Ai.</p> <p>If the Apple ID you want to use doesn't appear, you can add it by clicking the plus button at the bottom left of the window. Also ensure that the organization membership you want to use appears on this screen. Membership issues can sometimes be resolved by removing and re-adding the account, or by closing and re-opening Xcode, or by power cycling your developer computer, or by liaising with the account administrator.</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/21Appendix_Apple-Accounts/#benefits-of-a-developer-account-during-integration-work","title":"Benefits of a developer account during integration work","text":"<p>There are some benefits to using a developer account instead of a personal account during integration work. The benefits relate to the generation of iOS Package Archive (IPA) installer files for your application.</p> <ul> <li> <p>You can generate IPA files automatically using just Xcode if you are using a     developer account. If you are using a personal account you must take     additional manual steps every time you generate an IPA file.</p> </li> <li> <p>The IPA file generated by a developer account can be installed by Workspace     ONE on a device and run. The IPA file generated by a personal account can be     installed by Workspace ONE on a device but will only be a placeholder. You     will have to side load over the app from Xcode in order to run it. This     limitation isn't important during integration work because you will anyway     be side loading quite often during the process.</p> </li> <li> <p>The IPA file generated by a developer account can be installed and run on,     at least, any device in the same organization. The IPA file generated by a     personal account can be installed and run only on devices registered to the     same Apple ID.</p> </li> </ul> <p>For instructions and background, see the Task: Generate an application installer file.</p>"},{"location":"IntegrationGuideForiOS/Guides/22Preparation/21Appendix_Apple-Accounts/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/","title":"Base Integration Guide","text":""},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/#workspace-one-for-ios-and-ipados","title":"Workspace ONE for iOS and iPadOS","text":"<p>Applications for iOS and iPadOS can be integrated with the VMware Workspace ONE\u00ae platform, by using its mobile software development kit. Complete the tasks below as a base for feature integration.</p> <p>This document is part of the Workspace ONE Integration Guide set.</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/#welcome","title":"Welcome","text":""},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/#agreement","title":"Agreement","text":"<p>Before downloading, installing or using the VMware Workspace ONE Software Development Kit (SDK) you must:</p> <ul> <li> <p>Review the     VMware Workspace ONE Software Development Kit License Agreement.     By downloading, installing, or using the VMware Workspace ONE SDK you agree     to these license terms. If you disagree with any of the terms, then do not     use the software.</p> </li> <li> <p>Review the VMware Privacy Notice     and the     Workspace ONE UEM Privacy Disclosure,     for information on applicable privacy policies.</p> </li> </ul> <p>That applies however you obtain or integrate the software.</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/#compatibility","title":"Compatibility","text":""},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/#task-configure-application-properties","title":"Task: Configure application properties","text":""},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/#task-add-the-software-development-kit-package","title":"Task: Add the software development kit package","text":""},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/#task-initialize-the-software-development-kit-runtime","title":"Task: Initialize the software development kit runtime","text":""},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/#initialize-from-swiftui","title":"Initialize from SwiftUI","text":""},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/#initialize-from-storyboard","title":"Initialize from Storyboard","text":""},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/#test-runtime-initialization","title":"Test runtime initialization","text":""},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/#task-declare-supported-features","title":"Task: Declare supported features","text":""},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/#task-demonstrate-basic-features","title":"Task: Demonstrate Basic Features","text":""},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/#next-steps","title":"Next Steps","text":""},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/#appendix-callback-scheme-sample-code","title":"Appendix: Callback Scheme Sample Code","text":""},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/#appendix-troubleshooting","title":"Appendix: Troubleshooting","text":""},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/#appendix-keychain-clearance-sample-code","title":"Appendix: Keychain Clearance Sample Code","text":""},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/#document-information","title":"Document Information","text":""},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/#published-locations","title":"Published Locations","text":"<p>This document is available</p> <ul> <li> <p>in Markdown format, in the repository that also holds the sample code: github.com/vmware-samples/.../IntegrationGuideForiOS/...BaseIntegration/</p> </li> <li> <p>in Portable Document Format (PDF), on the VMware website: developer.vmware.com/docs/.../WorkspaceONE_iOS_BaseIntegration.pdf</p> </li> </ul>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/#revision-history","title":"Revision History","text":"Date Revision 19may2023 First correct publication, for 23.04 SDK for iOS. 08jun2023 Publication for 23.06 SDK for iOS. 19jul2023 Publication for 23.07 SDK for iOS. 11sep2023 Publication for 23.09 SDK for iOS. 31oct2023 Publication for 23.10 SDK for iOS. 14Dec2023 Publication for 23.12 SDK for iOS. 29Jan2024 Publication for 24.01 SDK for iOS."},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/#legal","title":"Legal","text":"<ul> <li>VMware, Inc. 3401 Hillview Avenue Palo Alto CA 94304 USA     Tel 877-486-9273 Fax 650-427-5001 www.vmware.com</li> <li>Copyright \u00a9 2024 VMware LLC. All rights reserved.</li> <li>This product is protected by U.S. and international     copyright and intellectual property laws. VMware products are covered by one     or more patents listed at     https://www.vmware.com/go/patents.     VMware is a registered trademark or trademark of VMware, Inc. and its     subsidiaries in the United States and other jurisdictions. All other marks     and names mentioned herein may be trademarks of their respective companies.</li> </ul>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/01Welcome/","title":"Welcome","text":"<p>Welcome to the Workspace ONE Base Integration Guide for iOS and iPadOS.</p> <p>The objective of this guide is for you to complete initial integration of your app with the Workspace ONE platform. This guide includes coding work.</p> <p>Instructions in this guide assume that all the tasks in the Workspace ONE Integration Preparation Guide for iOS and iPadOS are already complete.</p> <p>The Integration Preparation Guide is available</p> <ul> <li> <p>in Markdown format, in the repository that also holds this guide: github.com/vmware-samples/workspace-ONE-SDK-integration-samples.</p> </li> <li> <p>in Portable Document Format (PDF), from the SDK home page on the VMware     developer website: developer.vmware.com/web/sdk/Native/airwatch-ios.</p> </li> </ul> <p>Warning: Don't change the bundle identifier. Your app must have the same bundle identifier as it did when the Integration Preparation Guide was being followed. This is because trust of the app by the Workspace ONE platform is based in part on the bundle identifier. The Workspace ONE unified endpoint manager (UEM) console and the Workspace ONE Intelligent Hub app are the components that must trust your app. The Integration Preparation Guide has some discussion of Apple accounts as they pertain to Workspace ONE integration work, in an appendix.</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/01Welcome/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/01Welcome/01Compatibility/","title":"Compatibility","text":"<p>Instructions in this document are compatible with the following software versions.</p> Software Version Workspace ONE software development kit for iOS 24.01 Workspace ONE UEM management console 2206 or later Apple iOS and iPadOS 15 or later Apple Xcode 14.3 <p>The SDK supports versions of the Swift language that are supported by the above Xcode versions.</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/01Welcome/01Compatibility/#license","title":"License","text":"<p>Copyright 2024 VMware LLC. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/02Task_Configure-application-properties/","title":"Task Configure application properties","text":"<p>Configuring application properties is a Workspace ONE platform integration task for mobile application developers. This task is dependent on all the tasks in the Integration Preparation Guide, as discussed in the Welcome section. The following instructions assume that the dependent tasks are complete already.</p> <p>These are the required configurations.</p> <ul> <li> <p>The Workspace ONE Intelligent Hub app will use a custom URL scheme to     send enrollment details to your app. Therefore your app must declare a     custom URL scheme.</p> </li> <li> <p>Particular Queried URL Schemes will be used to discover Hub     communication channels and must be declared by all SDK apps.</p> </li> <li> <p>A Camera Usage Description must be declared by all SDK apps in order to     support Workspace ONE QR code enrollment. If a description isn't declared     then the operating system blocks the app from access to the device camera.</p> </li> <li> <p>A Face ID Usage Description must be declared in order to support face     recognition for biometric authentication. If a description isn't declared     then the operating system blocks the app from access to Face ID. Note that     no declaration is needed for access to Touch ID.</p> <p>Biometric authentication may be allowed in the Workspace ONE unified endpoint manager (UEM) console, as a security policy. Therefore it must be supported by all SDK apps.</p> </li> <li> <p>Workspace ONE doesn't support multiple windows at time of writing. If     your app has a scene manifest then it must declare that multiple windows     aren't supported.</p> </li> <li> <p>If you are developing more than one app, then add a     shared keychain group for secure inter-application communication. The     shared keychain group must be named <code>asdk</code> and be first in the Keychain     Groups list.</p> </li> </ul> <p>You can set those configurations as you like if you are familiar with the Xcode project user interface already. Skip ahead to the screen captures at the end of the second and third sections for reference. Or you can follow these step-by-step instructions.</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/02Task_Configure-application-properties/#declare-a-custom-url-scheme","title":"Declare a custom URL scheme","text":""},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/02Task_Configure-application-properties/#add-queried-url-schemes-and-other-required-properties","title":"Add Queried URL Schemes and other required properties","text":""},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/02Task_Configure-application-properties/#add-a-shared-keychain-group","title":"Add a shared keychain group","text":""},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/02Task_Configure-application-properties/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/02Task_Configure-application-properties/01Declare-a-custom-URL-scheme/","title":"Declare a custom URL scheme","text":"<p>Start the Task: Configure application properties by declaring a custom URL (Uniform Resource Locator) scheme for your app.</p> <p>If you haven't installed your application via Workspace ONE at least once, then do so now. If you don't, the application under development won't work when installed via Xcode. Instructions for installing via Workspace ONE can be found in the Integration Preparation Guide discussed in the Welcome section.</p> <p>To declare a custom URL scheme proceed as follows.</p> <ol> <li> <p>Open the application project in Xcode.</p> </li> <li> <p>In the navigator select the project itself, and then the target that you're     using for integration.</p> <p>By default, the project itself will be the first item in the navigator, and each app project has only a single target.</p> </li> <li> <p>In the target editor, select the Info tab, and then expand the URL Types     list.</p> <p>By default the URL Types list is empty.</p> </li> <li> <p>Click the plus button to add a URL Type.</p> <p>This adds an Untitled item to the list.</p> </li> <li> <p>Enter a suitable value like <code>ws1app</code> in the URL Schemes text box.</p> <p>The value will be used as the scheme in a URL (Uniform Resource Locator). This means that it cannot include characters such as space, underscore, and full stop (period).</p> <p>None of the other fields matter for this task.</p> <p>This screen capture shows how the added URL Type might appear in the Xcode user interface.</p> <p></p> </li> <li> <p>Install and run the app on your developer device to confirm that no mistakes     have been made.</p> </li> <li> <p>Check that the custom URL scheme invokes the app.</p> <p>First, terminate the app, for example by using the device task switcher.</p> <p>If your device is synchronized with your computer, open the Apple Notes app and create a new note. Add a URL like this to the note.</p> <pre><code>ws1app://dummypath\n</code></pre> <p>The URL has the value you entered in Xcode as the scheme, and has a dummy path.</p> <p>Wait for the note to synchronise to your developer device, typically only a second or two, then open the mobile Notes app, open the note, and tap the URL. What should happen is that your app is opened.</p> <p>If your app doesn't open then review the above instructions to check that no mistakes were made. Also check any settings related to Info.plist in Xcode.</p> <p>If your Notes aren't synchronised you could instead open Safari on the device and type the URL into the address bar. Safari should open your app.</p> </li> </ol> <p>That completes declaration of a custom URL scheme.</p> <p>Xcode might or might not have added a visible property list file named Info.plist to the project when you added an item to the URL Types list. It might or might not be possible to have added the declaration and to add the other required properties, below, by editing the Info.plist file. This guide assumes that it isn't possible.</p> <p>Continue the task with the instructions Add Queried URL Schemes and other required properties.</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/02Task_Configure-application-properties/01Declare-a-custom-URL-scheme/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/02Task_Configure-application-properties/02Add-Queried-URL-Schemes-and-other-required-properties/","title":"Add Queried URL Schemes and other required properties","text":"<p>After following the Declare a custom URL scheme instructions, add the other required Workspace ONE properties.</p> <p>Here are some tips for adding properties in Xcode.</p> <p></p> <ul> <li>App properties can be edited on the same screen as the custom URL scheme is     declared, see above, but in the Custom iOS Target Properties list.</li> <li>When you right-click on a non-array key in the list, a context menu will     appear. That menu is referred to here as the properties context menu.</li> <li>The list can show keys in either a raw form or in a wordy form. You can     switch between the two in the properties context menu.</li> <li>Properties can be added by selecting the Add Row option in the properties     context menu.</li> <li>After you add a row you first enter the key for the new property. The Xcode     helper for key entry here is case sensitive.</li> <li>Properties of type Array or Dictionary can have sub-properties.     Sub-properties can be added by expanding the top-level property and then     clicking the plus button that appears.</li> <li>Changes made in the property list can be reversed using the usual undo     interactions, Cmd+Z for example.</li> </ul> <p>This is a list of the required Workspace ONE app properties and values. Keys are given in raw form and wordy form.</p> <p></p> <ul> <li><code>LSApplicationQueriesSchemes</code> Queried URL Schemes.     Array of String. Items can be in any order.<ul> <li><code>airwatch</code></li> <li><code>AWSSOBroker2</code></li> <li><code>awws1enroll</code></li> <li><code>wsoneSDK</code></li> </ul> </li> <li><code>NSCameraUsageDescription</code> Privacy - Camera Usage Description.     String \"Scan QR codes\" or something similar.</li> <li><code>NSFaceIDUsageDescription</code> Privacy -  Face ID Usage Description.     String \"Unlock the app\" or something similar.</li> <li><code>UIApplicationSceneManifest</code> Application Scene Manifest.     Dictionary.<ul> <li><code>UIApplicationSupportsMultipleScenes</code> Enable Multiple Windows.     Boolean NO</li> </ul> </li> </ul> <p>You can add those properties as you like if you are familiar with the editor already, or follow these step-by-step instructions.</p> <p></p> <ol> <li> <p>In Xcode, in the target editor, on the Info tab, expand the Custom iOS     Target Properties list.</p> </li> <li> <p>Add a top-level property row with the key: Queried URL Schemes.     Raw equivalent is <code>LSApplicationQueriesSchemes</code>.</p> <p>Ensure that the type of the property is Array, and the type of items in the array is String. Those could be the defaults.</p> </li> <li> <p>Add an item for each of these values to the new array.</p> <ul> <li><code>airwatch</code></li> <li><code>AWSSOBroker2</code></li> <li><code>awws1enroll</code></li> <li><code>wsoneSDK</code></li> </ul> <p>This screen capture shows the new key and array as they appear in the Xcode user interface.</p> <p></p> </li> <li> <p>Add a top-level property row with the key: Privacy - Camera Usage     Description.     Raw equivalent is <code>NSCameraUsageDescription</code>.</p> <p>Ensure that the type of the property is String. This should be the default.</p> <p>Set the value to something like: \"Scan QR codes\".</p> </li> <li> <p>Add a top-level property row with the key: Privacy -  Face ID Usage     Description.     Raw equivalent is <code>NSFaceIDUsageDescription</code>.</p> <p>Ensure that the type of the property is String. This should be the default.</p> <p>Set the value to something like: \"Unlock the app\".</p> </li> <li> <p>Check if your app has a top-level property row with the key: Application     Scene Manifest.     Raw equivalent is <code>UIApplicationSceneManifest</code>.</p> <p>If your app doesn't have this property you can skip the remaining steps.</p> <p>This property will be of type Dictionary.</p> </li> <li> <p>Expand the dictionary and find the sub-property row with the key: Enable     Multiple Windows.     Raw equivalent is <code>UIApplicationSupportsMultipleScenes</code>.</p> <p>Ensure that the type of the sub-property is Boolean. This should be the default.</p> <p>Set the value to: NO.</p> </li> </ol> <p>That completes the configuration of application properties. This screen capture shows how the target Info tab could look.</p> <p></p> <p>If you haven't installed your application via Workspace ONE at least once, then do so now. If you don't, the application under development won't work when installed via Xcode. Instructions for installing via Workspace ONE can be found in the Integration Preparation Guide discussed in the Welcome section.</p> <p>Build and run the application from Xcode to confirm that no mistakes have been made.</p> <p>You are now ready to proceed to either of the following.</p> <ul> <li>The instructions     to Add a shared keychain group     if you are developing more than one custom app.</li> <li>The     next Task: Add the software development kit package     if you are developing a single app at this time.</li> </ul>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/02Task_Configure-application-properties/02Add-Queried-URL-Schemes-and-other-required-properties/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/02Task_Configure-application-properties/03Add-a-shared-keychain-group/","title":"Add a shared keychain group","text":"<p>The instructions to add a shared iOS keychain group may be followed after those in the other sections in the Task: Configure application properties, but are optional. An iOS shared keychain group is only required if you have multiple custom SDK apps that work together as a suite.</p> <p>If you add a shared keychain group then the apps in the suite</p> <ul> <li>must be signed by the same app developer team.</li> <li>can share an app single sign-on (SSO) session, if configured in the     management console security policies.</li> <li>can exchange data securely, via the pasteboard for example.</li> </ul> <p>To add a shared keychain group proceed as follows.</p> <ol> <li> <p>In Xcode, in the target editor, select the Signing &amp; Capabilities tab.</p> </li> <li> <p>Click the plus button to add a capability.</p> <p>This screen capture shows the location in the Xcode user interface.</p> <p></p> <p>This opens a dialog on which you can select a capability.</p> </li> <li> <p>Search for, or scroll to, the capability Keychain Sharing.</p> <p>This screen capture shows how it might appear in the Xcode user interface.</p> <p></p> </li> <li> <p>Double click on Keychain Sharing.</p> <p>This closes the capability selection dialog. You will be returned to the Xcode target editor. The capability Keychain Sharing has now been added to your app.</p> </li> <li> <p>Click the plus button under the prompt to Add keychain access groups here.</p> <p>This screen capture shows the location in the Xcode user interface.</p> <p></p> <p>That adds a keychain group with the same name as your app's bundle identifier. This screen capture shows it might appear in the Xcode user interface.</p> <p></p> </li> <li> <p>Change the name of the keychain group to <code>awsdk</code>.</p> <p>You can double click on the name of the new group to edit it.</p> </li> </ol> <p>That completes the addition of a shared iOS keychain group.</p> <p>This screen capture shows it might appear in the Xcode user interface.</p> <p></p> <p>Build and run the application to confirm that no mistakes have been made.</p> <p>Warnings:</p> <ul> <li>Never delete the awsdk group.</li> <li>Don't use the awsdk group in your apps. The group must be left for exclusive     use by the SDK.</li> <li>If you add another keychain group for your apps to use, the awsdk group must     always be first in the list.</li> <li>Keychain group access can only be shared between apps signed by the same     developer team.</li> </ul> <p>You are now ready to proceed to the next Task: Add the software development kit package.</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/02Task_Configure-application-properties/03Add-a-shared-keychain-group/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/03Task_Add-the-software-development-kit-package/","title":"Task Add the software development kit package","text":"<p>Adding the SDK package is a Workspace ONE platform integration task for mobile application developers. This task can be done after the Task: Configure application properties. These instructions assume that task is complete already.</p> <p>If you haven't installed your application via Workspace ONE at least once, then do so now. If you don't, the application under development won't work when installed via Xcode. Instructions for installing via Workspace ONE can be found in the Integration Preparation Guide discussed in the Welcome section.</p> <p>Proceed as follows to add the SDK package.</p> <ol> <li> <p>Open the application project in Xcode.</p> </li> <li> <p>In the Xcode menu select File, Add Packages...</p> <p>This opens a first add package dialog. The dialog has a search control at the top. This screen capture shows the location of the search control.</p> <p></p> <p>The prompt is Search or Enter Package URL. (URL is an abbreviation for Uniform Resource Locator.)</p> </li> <li> <p>Select the search control and paste in the URL for the Workspace ONE SDK     Swift Package. <code>https://github.com/vmwareairwatchsdk/iOS-WorkspaceONE-SDK</code></p> <p>The add package dialog changes to show controls for specifying the package version.</p> </li> <li> <p>Select Dependency Rule: Exact Version and 23.3.0 as the parameter, or other     values if preferred.</p> <p>You can check the latest version by opening the package URL and then opening the list of tags. The package uses Git tags for SDK versions.</p> </li> <li> <p>Select Add to Project: ws1app or your app name if it isn't selected by     default, and then select Add Package.</p> <p>This screen capture shows the location of the selections in the Xcode user interface.</p> <p></p> <p>Xcode will fetch and verify the contents of the package. When it finishes, a package product selection dialog is displayed.</p> </li> <li> <p>In the dialog select to add the library AWSDK to the target for your app.</p> <p>Those selections could be the default and are shown in this screen capture.</p> <p></p> <p>When the selections are as required, click the Add Package button.</p> </li> <li> <p>Check that the package has been added to the app project and to the target.</p> <p>In the Xcode project navigator select the project itself and then the tab Package Dependencies. Check that the Workspace ONE SDK appears. This screen capture shows how this appears in the Xcode user interface.</p> <p></p> <p>Then, in the Xcode project navigator select the app target that you're using for integration, and then the tab General and expand the Frameworks, Libraries, and Embedded Content list. Check that AWSDK appears. This screen capture shows how this appears in the Xcode user interface.</p> <p></p> <p>Still in the app target, select the tab Build Phases and expand the Link Binary With Libraries list. Check that AWSDK appears. This screen capture shows how this appears in the Xcode user interface.</p> <p></p> </li> </ol> <p>This completes adding the software development kit to the application. Build the application to confirm that no mistakes have been made, and to force Xcode to recognize the package's module for import. After that, continue with the next Task: Initialize the software development kit runtime.</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/03Task_Add-the-software-development-kit-package/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/04Task_Initialize-the-software-development-kit-runtime/","title":"Task Initialize the software development kit runtime","text":"<p>Initializing the SDK runtime is a Workspace ONE platform integration task for mobile application developers. This task is dependent on the Task: Add the software development kit package. The following instructions assume that the dependent task is complete already.</p> <p>Before you begin, you will need to know the Team ID of your Apple developer account. Instructions for locating the required value can be found on the Apple developer website, for example here. developer.apple.com/help/account/manage-your-team/locate-your-team-id</p> <p>Note that your app must have the same bundle identifier as it did when the Integration Preparation Guide was being followed, as discussed in the Welcome section. This could mean that you must continue to use the same Team ID also.</p> <p>How you initialize the SDK runtime depends on how the app user interface is implemented.</p> <ul> <li> <p>If the app user interface is implemented in SwiftUI, follow     the Initialize from SwiftUI     instructions.</p> </li> <li> <p>If the app user interface is implemented in a storyboard, follow     the Initialize from Storyboard     instructions.</p> </li> </ul>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/04Task_Initialize-the-software-development-kit-runtime/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/04Task_Initialize-the-software-development-kit-runtime/01Initialize-from-SwiftUI/","title":"Initialize from SwiftUI","text":"<p>If the app user interface is implemented in SwiftUI, you can follow these instructions to start the Task: Initialize the software development kit runtime. The instructions assume that all dependencies of that task are completed already.</p> <p>These instructions are intended to meet general requirements for Workspace ONE integration. They should be easy to adapt to your own specific requirements if needed.</p> <p>Proceed as follows.</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/04Task_Initialize-the-software-development-kit-runtime/01Initialize-from-SwiftUI/#add-a-helper-class","title":"Add a helper class","text":"<p>Start by adding a helper class that can interface between SwiftUI and the Workspace ONE SDK.</p> <ol> <li> <p>Open the application project in Xcode and add a new Swift class.</p> <p>For example by right-clicking on the project and selecting New File... in the context menu that appears. Then selecting Swift File in the template chooser.</p> </li> <li> <p>Add the helper class.</p> <p>This can be a singleton class. It should conform to these interfaces.</p> <ul> <li>NSObject as usual.</li> <li>AWControllerDelegate for the SDK side of the interface.</li> <li>ObservableObject for the SwiftUI side of the interface.</li> </ul> <p>The top of the class file could look like this.</p> <pre><code>import AWSDK\n\nclass WorkspaceONEHelper:\n    NSObject, AWControllerDelegate, ObservableObject\n{\n    // Singleton class.\n    private override init() { super.init() }\n    static var shared: WorkspaceONEHelper = .init()\n\n    // Rest of the class will go here.\n}\n</code></pre> </li> <li> <p>Implement a helper callback that is invoked when the SDK finishes     initialization.</p> <p>The callback is the <code>controllerDidFinishInitialCheck(error:)</code> function and is required by the declared SDK protocol.</p> <p>You may add <code>@Published</code> variables to the helper so that the initialized status can be made visible in the app user interface.</p> <p>The code could look like this.</p> <pre><code>@Published var sdkMessage: String = \"SDK uninitialised.\"\nfunc controllerDidFinishInitialCheck(error: NSError?) {\n    // Good spot for a debug checkpoint.\n    if let nsError = error {\n        sdkMessage = \"controllerDidFinishInitialCheck failed \\(nsError).\"\n    }\n    else {\n        sdkMessage = \"controllerDidFinishInitialCheck OK.\"\n    }\n    print(sdkMessage)\n}\n</code></pre> </li> <li> <p>Add a helper function to start the SDK, and an instance variable to enforce     that the SDK is only started once.</p> <p>To start the SDK, do the following.</p> <ol> <li> <p>Access the AWController singleton through the <code>clientInstance()</code> class     function.</p> </li> <li> <p>Set the <code>callbackScheme</code> to the URL Type added in     the Declare a custom URL scheme     instructions.</p> <p>You can do this by adding code to read the app properties. For an example see the Appendix: Callback Scheme Sample Code.</p> </li> <li> <p>Set the <code>teamID</code> to the team identifier used to build the app.</p> <p>Instructions for locating the required value can be found on the Apple developer website, for example here. developer.apple.com/help/account/manage-your-team/locate-your-team-id</p> </li> <li> <p>Set the controller <code>delegate</code> to the helper instance.</p> </li> <li> <p>Initialize the SDK by calling the controller <code>start()</code> function.</p> </li> </ol> <p>The code could look like this.</p> <pre><code>@Published var appMessage: String = \"App uninitialised.\"\nvar sdkStarted = false\nfunc startSDK()\n{\n    appMessage = \"startSDK() \\(sdkStarted).\"\n    print(appMessage)\n\n    guard !sdkStarted else { return }\n    sdkStarted = true\n\n    // Access the AWController singleton.\n    let awController = AWController.clientInstance()\n\n    // Set the callback scheme to the custom URL Type.\n    do {\n        awController.callbackScheme = try schemeForWS1()\n    }\n    catch {\n        appMessage = \"schemeForWS1() failed \\(error).\"\n        print(appMessage)\n        return\n    }\n\n    // Set the team identifier.\n    awController.teamID = \"YOUR1TEAM2IDENTIFIER2HERE\"\n\n    // Set the controller delegate to the helper instance.\n    awController.delegate = self\n\n    // Actually initialize the SDK.\n    awController.start()\n}\n</code></pre> </li> <li> <p>Add a helper function to pass open URL requests to the SDK handler.</p> <p>The SDK will process open URL requests from Hub during enrollment. This is discussed in the introduction to the Task: Configure application properties.</p> <p>The code could look like this.</p> <pre><code>func handleOpen(url: URL, fromApplication: String?) -&gt; Bool {\n    return AWController.clientInstance()\n        .handleOpenURL(url, fromApplication: fromApplication)\n}\n</code></pre> </li> </ol> <p>Build the application to ensure that no mistakes have been made. Then continue with the next instructions.</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/04Task_Initialize-the-software-development-kit-runtime/01Initialize-from-SwiftUI/#connect-the-helper","title":"Connect the helper","text":"<p>Continue by connecting the helper class to the app code and user interface.</p> <p>These instructions assume your application code has a structure like this.</p> <ul> <li>Content view struct that conforms to the SwiftUI <code>View</code> protocol.</li> <li>App main struct that conforms to the SwiftUI <code>App</code> protocol and declares     the Content view in a WindowGroup.</li> </ul> <p>(If your structure is different you can adapt these instructions.)</p> <p>Proceed as follows.</p> <ol> <li> <p>Connect the helper to your Content view.</p> <p>Add an <code>@ObservedObject</code> variable to the Content view. The variable will be an instance of the helper. The code could look like this.</p> <pre><code>@ObservedObject var sdkHelper: WorkspaceONEHelper\n</code></pre> </li> <li> <p>Add, for example, Text instances to the Content view to show the published     variables from the helper.</p> <p>The code could look like this.</p> <pre><code>var body: some View {\n    VStack {\n        Text(self.sdkHelper.sdkMessage).font(.title2)\n        Text(self.sdkHelper.appMessage).font(.title2)\n    }\n    .padding()\n}\n</code></pre> <p>At this point the app won't build because declaring the observed object requires a parameter in the Content view instantiation.</p> </li> <li> <p>Update the Content view instantiation in your App main.</p> <p>Pass the singleton instance of the helper to the Content view. The code could look like this.</p> <pre><code>ContentView(sdkHelper: WorkspaceONEHelper.shared)\n</code></pre> </li> <li> <p>In your App main, connect the helper open URL handler to the Content view.</p> <p>Add an <code>onOpenURL</code> to the Content view instantiation. The onOpenURL should first call the helper function, which returns a Boolean value for whether it handled the URL. The code could look like this.</p> <pre><code>ContentView(sdkHelper: WorkspaceONEHelper.shared)\n    .onOpenURL { url in\n        if WorkspaceONEHelper.shared.handleOpenURL(\n            url: url, sourceApplication: nil\n        ) { return }\n\n        print(\"URL not handled by WS1 \\(url)\")\n        // App handling of url goes here.\n    }\n</code></pre> </li> <li> <p>Initialize the SDK from your App main.</p> <p>In your App main, add a scene phase listener to the WindowGroup. In the listener, if the scene phase is active then call the singleton helper function to initialize the SDK. The code could look like this.</p> <pre><code>@Environment(\\.scenePhase) private var scenePhase\n\nvar body: some Scene {\n    WindowGroup {\n        // Other code was added here in the preceding instructions.\n    }\n    .onChange(of: scenePhase) {phase in\n        if phase == .active {\n            WorkspaceONEHelper.shared.startSDK()\n        }\n    }\n}\n</code></pre> <p>Note. An alternative to a scene phase listener could be to implement <code>@UIApplicationDelegateAdaptor</code> and call the SDK initialization helper from its <code>didFinishLaunchingWithOptions</code> callback. However, that type of adaptor shouldn't be used according to the reference documentation. See the Apple developer website here for example. developer.apple.com/documentation/swiftui/uiapplicationdelegateadaptor</p> </li> </ol> <p>This completes SDK initialization from SwiftUI. Now follow the instructions to Test runtime initialization.</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/04Task_Initialize-the-software-development-kit-runtime/01Initialize-from-SwiftUI/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/04Task_Initialize-the-software-development-kit-runtime/02Initialize-from-Storyboard/","title":"Initialize from Storyboard","text":"<p>If the app user interface is implemented in a Storyboard, you can follow these instructions to start the Task: Initialize the software development kit runtime. The instructions assume that all dependencies of that task are completed already.</p> <p>These instructions are intended to meet general requirements for Workspace ONE integration. They should be easy to adapt to your own specific requirements if needed.</p> <p>Proceed as follows.</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/04Task_Initialize-the-software-development-kit-runtime/02Initialize-from-Storyboard/#update-the-app-delegate","title":"Update the app delegate","text":"<p>Start by extending your app delegate class so that it will start and control the Workspace ONE SDK.</p> <ol> <li> <p>Open the application project in Xcode and then the class that implements the    app delegate.</p> <p>By default the app delegate class is named <code>AppDelegate</code> and will be in the <code>AppDelegate.swift</code> file.</p> <p>The required class will implement the <code>UIApplicationDelegate</code> protocol and might be annotated as the main entry point of the app.</p> </li> <li> <p>Declare the app delegate as implementing the Workspace ONE SDK controller     delegate protocol.</p> <p>To do that</p> <ul> <li>add an import statement for <code>AWSDK</code></li> <li>add the <code>AWControllerDelegate</code> protocol to the app delegate's     declaration.</li> </ul> <p>The top of the class file could look like this.</p> <pre><code>import UIKit\nimport AWSDK\n\n@main\nclass AppDelegate: UIResponder, UIApplicationDelegate, AWControllerDelegate {\n\n    // Rest of the class here.\n\n}\n</code></pre> </li> <li> <p>Add code to start the SDK when the app is launched.</p> <p>To start the SDK, do the following.</p> <ol> <li> <p>Access the AWController singleton through the <code>clientInstance()</code> class     function.</p> </li> <li> <p>Set the <code>callbackScheme</code> to the URL Type added in     the Declare a custom URL scheme     instructions.</p> <p>You can do this by adding code to read the app properties. For an example see the Appendix: Callback Scheme Sample Code.</p> </li> <li> <p>Set the <code>teamID</code> to the team identifier used to build the app.</p> <p>Instructions for locating the required value can be found on the Apple developer website, for example here. developer.apple.com/help/account/manage-your-team/locate-your-team-id</p> </li> <li> <p>Set the controller <code>delegate</code> to the app delegate instance.</p> </li> <li> <p>Initialize the SDK by calling the controller <code>start()</code> function.</p> </li> </ol> <p>In case you want to display a status message, you can add a suitable variable that can be observed from another class.</p> <p>The code could look like this.</p> <pre><code>@objc dynamic var appMessage = \"App uninitialised.\"\n\nfunc application(\n    _ application: UIApplication,\n    didFinishLaunchingWithOptions launchOptions: [\n        UIApplication.LaunchOptionsKey: Any\n    ]?) -&gt; Bool\n{\n    // Override point for customization after application launch.\n\n    let awController = AWController.clientInstance()\n\n    // Set the callback scheme to the custom URL Type.\n    do {\n        awController.callbackScheme = try schemeForWS1()\n        appMessage = \"schemeForWS1() OK \\\"\\(awController.callbackScheme)\\\".\"\n        print(appMessage)\n    }\n    catch {\n        appMessage = \"schemeForWS1() failed \\(error).\"\n        print(appMessage)\n        return false\n    }\n\n    // Set the team identifier.\n    awController.teamID = \"YOUR1TEAM2IDENTIFIER2HERE\"\n\n    // Set the controller delegate to the helper instance.\n    awController.delegate = self\n\n    // Actually initialize the SDK.\n    awController.start()\n\n    return true\n}\n</code></pre> </li> <li> <p>Make the app delegate conform to the Workspace ONE SDK controller delegate     protocol.</p> <p>To conform, implement the callback <code>controllerDidFinishInitialCheck</code>. Best practice would be to do this in your implementation.</p> <ul> <li>If SDK initialization failed, show an error message and block all or     part of the app user interface.</li> <li>If SDK initialization succeeded, don't block the app user interface.</li> </ul> <p>In case you want to display a status message, you can add a suitable variable that can be observed from another class.</p> <p>The code could look like this.</p> <pre><code>@objc dynamic var sdkMessage = \"SDK uninitialised.\"\n\nfunc controllerDidFinishInitialCheck(error: NSError?) {\n    // Good spot for a debug checkpoint.\n    if let nsError = error {\n        sdkMessage = \"controllerDidFinishInitialCheck failed \\(nsError).\"\n    }\n    else {\n        sdkMessage = \"controllerDidFinishInitialCheck OK.\"\n    }\n\n    print(sdkMessage)\n}\n</code></pre> </li> </ol> <p>Build the application to ensure that no mistakes have been made. Then continue with the next instructions.</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/04Task_Initialize-the-software-development-kit-runtime/02Initialize-from-Storyboard/#update-the-scene-delegate","title":"Update the scene delegate","text":"<p>The SDK will process open URL requests from Hub during enrollment. This is discussed in the introduction to the Task: Configure application properties.</p> <p>URL requests will be received in the scene delegate, which must be modified to convey the required URL requests to the SDK.</p> <p>Proceed as follows.</p> <ol> <li> <p>Open the application project in Xcode and then the class that implements the    scene delegate.</p> <p>By default the scene delegate class is named <code>SceneDelegate</code> and will be in the <code>SceneDelegate.swift</code> file.</p> <p>The required class will implement the <code>UIWindowSceneDelegate</code> protocol.</p> </li> <li> <p>Add an open URL handler that conveys requests to the SDK handler.</p> <p>To do this, implement the <code>scene(_:openURLContexts:)</code> callback. The reference documentation for that callback can be found on the Apple developer website, for example here. developer.apple.com/.../uiscenedelegate/...</p> <p>To convey open URL requests, do the following.</p> <ol> <li>Add an import statement for <code>AWSDK</code>.</li> <li>Access the AWController singleton through the <code>clientInstance()</code> class     function.</li> <li>Invoke the <code>handleOpenURL()</code> method for each URL context received.</li> <li>If the method returns true, the SDK has handled the open URL request.</li> <li>Otherwise, the app should handle the request.</li> </ol> <p>The code could look like this.</p> <pre><code>// Other imports here, such as UIKit\nimport AWSDK\n\nclass SceneDelegate: UIResponder, UIWindowSceneDelegate {\n\n    var window: UIWindow?\n\n    func scene(\n        _ scene: UIScene, openURLContexts URLContexts: Set&lt;UIOpenURLContext&gt;\n    ) {\n        for context in URLContexts {\n            if AWController.clientInstance().handleOpenURL(\n                context.url, fromApplication: context.options.sourceApplication\n            ) { continue }\n\n            print(\"URL not handled by WS1 \\(context.url)\")\n            // App handling of url goes here.\n        }\n    }\n</code></pre> </li> </ol> <p>This completes SDK initialization from Storyboard. Now follow the instructions to Test runtime initialization.</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/04Task_Initialize-the-software-development-kit-runtime/02Initialize-from-Storyboard/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/04Task_Initialize-the-software-development-kit-runtime/10Test-runtime-Initialization/","title":"Task Initialize the software development kit runtime","text":"<p>Test initialization of the SDK runtime after completing either the Initialize from SwiftUI instructions or the Initialize from Storyboard instructions.</p> <p>Build and run the application.</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/04Task_Initialize-the-software-development-kit-runtime/10Test-runtime-Initialization/#first-launch-app-enrollment","title":"First Launch App Enrollment","text":"<p>The first time the app is launched it will have to enroll with the UEM. The SDK runtime will first retrieve some enrollment details from Hub. That retrieval will require the device user interface to flip to Hub and then back to your app. Then the end user must authenticate to UEM in order to complete app enrollment.</p> <p>These screens and user interfaces should appear in order.</p> <ol> <li> <p>SDK splash screen.</p> <p></p> <p>The splash screen might appear only briefly.</p> </li> <li> <p>Open Hub confirmation.</p> <p></p> <p>This is an operating system prompt. Tap Open to continue enrollment by opening Hub.</p> </li> <li> <p>The device user interface flips to the Hub app.</p> <p>Hub might require authentication of the end user, for example by entering an app passcode.</p> <p>After authentication, if any, the device user interface flips back to your app.</p> </li> <li> <p>Authenticate to enroll.</p> <p>The appearance of this screen depends on UEM configuration. If basic authentication is configured then the screen could look like this.</p> <p></p> <p>If Security Assertion Markup Language (SAML) is configured then a web view will open instead. The web view will display an enterprise authentication page.</p> <p>The operating system adds an option to go back to Hub at the top left of the screen. Ignore that option.</p> <p>Enter the credentials of the user account, which will be the same as used to enroll the Hub app during Preparation.</p> </li> <li> <p>Create app passcode, if required.</p> <p>Depending on UEM security policy configuration, you may be required to set and confirm an app passcode. This is a new separate passcode to the password that was used to enroll the app and Hub. The app passcode is only used on the device. The device doesn't require an internet connection to check the app passcode.</p> <p>The first screen of the interaction looks like this.</p> <p></p> <p>Set and confirm an app passcode to continue.</p> </li> <li> <p>App user interface.</p> <p>When app enrollment has completed, the app user interface will open. The <code>controllerDidFinishInitialCheck</code> callback that you implemented in the previous instructions will be invoked.</p> </li> </ol> <p>The first app launch, and app enrollment, are now complete. If the steps didn't play out as above, or if an error was passed to the initial check callback, check the tips in the Appendix: Troubleshooting and review the earlier instructions.</p> <p>Otherwise, terminate the app and launch it again.</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/04Task_Initialize-the-software-development-kit-runtime/10Test-runtime-Initialization/#subsequent-launch","title":"Subsequent Launch","text":"<p>The second and subsequent times the app is launched these screens and user interfaces should appear.</p> <ol> <li> <p>SDK splash screen as in the first launch, perhaps only briefly.</p> </li> <li> <p>Enter app passcode, if required.</p> <p>If the UEM security policy configuration required that an app passcode was created, then you may be prompted to enter the passcode when the app launches. The screen could look like this.</p> <p></p> <p>Passcode entry isn't always required. A full discussion is out of scope of this guide but note the following scenarios.</p> <ul> <li>App single sign-on (SSO) can be configured in the UEM security policies.     Entering the app passcode in a one app then starts an authentication     session that other apps join without requiring the app passcode to be     entered.</li> <li>If the app was recently active and hasn't been terminated then the app     passcode won't be required when the app returns to foreground.</li> </ul> </li> <li> <p>App user interface.</p> <p>When authentication, if any, has completed, the app user interface will open. The <code>controllerDidFinishInitialCheck</code> callback that you implemented in the previous instructions will be invoked.</p> </li> </ol> <p>When you have verified first launch and subsequent launch, you are ready to continue with the next Task: Declare supported features.</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/04Task_Initialize-the-software-development-kit-runtime/10Test-runtime-Initialization/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/05Task_Declare-Supported-Features/","title":"Task Declare supported features","text":"<p>Declaring supported features is a Workspace ONE platform integration task for mobile application developers. This task is dependent on the Task: Initialize the software development kit runtime. The following instructions assume that the dependent task is complete already.</p> <p>Declare the Workspace ONE features that your app supports by creating a resource bundle and property list. Proceed as follows.</p> <ol> <li> <p>Open your app project in Xcode.</p> </li> <li> <p>Create a Settings Bundle named <code>AWSDKDefaults.bundle</code>.</p> <p>(In this guide, the bundle will be created in the application resources. The bundle can instead be in a sub-group or in a package that has been added to the application.)</p> <p>One way to create the bundle is as follows.</p> <ol> <li> <p>In the Xcode navigator select the project itself.</p> <p>By default, the project itself will be the first item in the navigator.</p> </li> <li> <p>In the Xcode menu, select File, New, File...</p> <p>This opens a template selection interaction.</p> </li> <li> <p>Select the template: Settings Bundle.</p> <p>The template can appear in the Resource category. You can also search for it by filtering, for example for \"bundle\".</p> <p>Select the plain Settings Bundle template, not the WatchKit Settings Bundle template.</p> </li> <li> <p>Click Next. A file save dialog will open.</p> </li> <li> <p>Enter the name <code>AWSDKDefaults.bundle</code> and select to save in the top     group of the project.</p> <p>This screen capture shows how the save dialog might look.</p> <p></p> </li> </ol> <p>The new bundle will be added to the resources that are copied into the app. You can check this in the target build phases, in the Copy Bundle Resources list. If it doesn't appear there, add it now by clicking the plus.</p> <p>This screen capture shows the bundle in the Xcode user interface.</p> <p></p> </li> <li> <p>Create a property list named <code>AWSDKDefaultSettings.plist</code> in the bundle.</p> <p>One way to do this is as follows.</p> <ol> <li> <p>In the Xcode navigator select the project itself.</p> <p>By default, the project itself will be the first item in the navigator.</p> </li> <li> <p>In the Xcode menu, select File, New, File...</p> <p>This opens a template selection interaction.</p> </li> <li> <p>Select the template: Property List.</p> <p>The template can appear in the Resource category. You can also search for it by filtering, for example for \"property\".</p> </li> <li> <p>Click Next. A file save dialog will open.</p> </li> <li> <p>Enter the name <code>AWSDKDefaultSettings.plist</code> and select to save in the     <code>AWSDKDefaults.bundle</code> group.</p> <p>This screen capture shows how the save dialog might look.</p> <p></p> </li> </ol> <p>The new property list file will be added to the bundle.</p> <p>If you save the property list somewhere else by mistake, you can drag and  drop it into the bundle to fix it.</p> </li> <li> <p>Add a first key to the property list, to declare support for the Workspace     ONE secure pasteboard.</p> <ol> <li>Open the AWSDKDefaultSettings.plist file as a property list.</li> <li>Add to the Root Dictionary a new row as follows.</li> </ol> Key Type Value AWClipboardEnabled Boolean YES <p>This screen capture shows how the property list might look after adding the first key.</p> <p></p> </li> </ol> <p>That completes the initial declaration of supported features. Build and run the application to confirm that no mistakes have been made. You are now ready to continue with the Task: Demonstrate Basic Features.</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/05Task_Declare-Supported-Features/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/06Task_Demonstrate-Basic-Features/","title":"Task Demonstrate Basic Features","text":"<p>The following basic features are now integrated into your application and can be demonstrated. In most cases the policies and settings in the UEM must be configured to activate features in the SDK. Brief instructions for application developers are given here for convenience. Full documentation can be found in the online help and product documentation.</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/06Task_Demonstrate-Basic-Features/#authentication-of-the-end-user","title":"Authentication of the end user","text":"<p>The end user can be forced to authenticate</p> <ul> <li>when the app opens for the first time after the device is switched on.</li> <li>after an inactivity time out has expired.</li> </ul> <p>Authentication can be by entry of their domain username and password, or by a separate app passcode that they create on the device.</p> <p>This feature can be configured in the Organization Group (OG). This screen capture shows the location of the setting in the console user interface.</p> <p></p> <p>This feature can also be configured in a custom SDK Profile. These screen captures show how to navigate to SDK Profile management in the console user interface, and the location of the setting in the profile editor.</p> <p></p> <p></p> <p>Notes on this feature.</p> <ul> <li> <p>If Authentication Type is set to Disabled then the feature is deactivated.</p> </li> <li> <p>There is an additional option to Use Device Pin for Authentication. If this     option is selected then the end user can authenticate by entering the     passcode that they use to unlock their device. See the Require Device     Passcode Technical Brief, here     developer.vmware.com/docs/17711/RequireDevicePasscode.pdf     for details.</p> </li> <li> <p>There is an additional option for Biometric Mode authentication. If this     option is selected then the end user can authenticate by Touch ID or Face     ID.</p> </li> <li> <p>There is an additional option for Single Sign-On. If this option is selected     then the same passcode will be used by all apps that have access to a shared     keychain group. See also     the Add a shared keychain group     instructions.</p> </li> </ul>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/06Task_Demonstrate-Basic-Features/#access-to-the-app-offline","title":"Access to the app offline","text":"<p>The end user can be blocked from access to the app offline. If offline access is blocked then the app user interface will be blocked by an informative error message when the device is offline. That can be tested by engaging flight mode for example.</p> <p>This feature can be configured in the Organization Group (OG). This screen capture shows the location of the setting in the console user interface.</p> <p></p> <p>This feature can also be configured in a custom SDK Profile. This screen capture shows the location of the setting in the profile editor.</p> <p></p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/06Task_Demonstrate-Basic-Features/#device-compromise-protection","title":"Device compromise protection","text":"<p>Device compromise is the deactivation of the built-in security features of a mobile device operating system. It is commonly referred to as jailbreaking, if applied to iOS and iPadOS devices. Device compromise increases the vulnerability of enterprise data on the device to unauthorized access, either by accidental leakage or by deliberate attack.</p> <p>The SDK can protect enterprise data by wiping its credentials and encryption keys when device compromise is detected. The SDK will also report device compromise to the UEM.</p> <p>This feature can be configured in the Organization Group (OG). This screen capture shows the location of the setting, Compromised Protection, in the console user interface.</p> <p></p> <p>This feature can also be configured in a custom SDK Profile. This screen capture shows the location of the setting in the profile editor.</p> <p></p> <p>To demonstrate this feature on iOS or iPadOS you would have to jailbreak the device. Instructions aren't provided.</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/06Task_Demonstrate-Basic-Features/#logging","title":"Logging","text":"<p>Log files written by the SDK can be uploaded to the UEM console to aid in diagnosis of problems.</p> <p>To request logs proceed as follows.</p> <ol> <li> <p>Log in to the UEM and select the Organization Group (OG) of the end user     that you are using for development.</p> </li> <li> <p>Navigate to Devices, List View.</p> </li> <li>Locate your developer device in the list and click to open the Details View.</li> <li>In the details view, select the Apps tab.</li> <li> <p>Locate your app in the list of apps that appears and select its row.</p> <p>This screen capture shows how the screen looks after selection of the app.</p> <p></p> </li> <li> <p>Click the Request Logs button that appears.</p> </li> </ol> <p>On your device, open the app. If the app was already running then terminate it using the device task manager first. That ensures the app will contact the UEM and receive the log request now.</p> <p>To check the upload proceed as follows.</p> <p></p> <ol> <li> <p>Navigate to the Details View of the device, same as in the above     instructions.</p> </li> <li> <p>Open the Attachments tab, which could be behind a More drop-down.</p> <p>This screen capture shows the location in the console user interface.</p> <p></p> </li> <li> <p>On the Attachments tab, select the Documents sub-tab.</p> </li> </ol> <p>The files appear with description App Log. This screen capture shows how the screen appears.</p> <p></p> <p>Download a log file zip archive to view the contents.</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/06Task_Demonstrate-Basic-Features/#on-device-app-compliance-enforcement","title":"On-device app compliance enforcement","text":"<p>The SDK has an app compliance feature that can enforce conditions like the following.</p> <ul> <li>Minimum application version.</li> <li>Application cannot be inactive beyond a number of days.</li> <li>Minimum operating system version.</li> </ul> <p>This is a separate feature to the UEM Compliance Policies engine, which is much broader in scope.</p> <p>The SDK App Compliance feature can be configured in the Organization Group (OG). This screen capture shows the location of the setting in the console user interface.</p> <p></p> <p>(Ignore the Security Patch Date, which only applies to Android.)</p> <p>SDK App Compliance will be enforced on managed and unmanaged devices, and doesn't require the device to be online at the point of enforcement.</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/06Task_Demonstrate-Basic-Features/#protected-pasteboard","title":"Protected pasteboard","text":"<p>The protected pasteboard is a Workspace ONE data loss prevention feature implemented by the SDK. The feature has the following parts.</p> <p></p> <ul> <li>Outbound protection, in which data copied from an SDK app cannot be pasted     into a non-SDK app.</li> <li>Inbound protection, in which data copied from a non-SDK app cannot be pasted     into an SDK app.</li> </ul> <p>The feature can be configured in the Organization Group (OG). This screen capture shows the location of the setting in the console user interface.</p> <p></p> <p>This feature can also be configured in a custom SDK Profile. This screen capture shows the location of the setting in the profile editor.</p> <p></p> <p>Support for the protected pasteboard requires build-time configuration in the mobile app. For instructions see the Task: Declare supported features.</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/06Task_Demonstrate-Basic-Features/#further-integrations","title":"Further integrations","text":"<p>Those are some basic feature that can be demonstrated already. For further integrations, see the Next Steps.</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/06Task_Demonstrate-Basic-Features/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/07Next-Steps/","title":"Next Steps","text":"<p>When you have completed all the above tasks, base integration is complete. You can now integrate further Workspace ONE features, such as these.</p> <ul> <li>App data at rest encryption.</li> <li>Data loss prevention measures beyond the pasteboard.<ul> <li>Screen capture detection.</li> <li>Third party keyboard blocking.</li> <li>Camera access blocking.</li> <li>User interface watermarking.</li> <li>Printing blocking.</li> <li>Data backup blocking.</li> </ul> </li> <li>Networking.</li> <li>Branding.</li> </ul> <p>Some of those features will require only build-time configuration; others will require code changes.</p> <p>See the home page of the Workspace ONE SDK for iOS and iPadOS for links to other developer guides and resources. https://developer.vmware.com/web/sdk/Native/airwatch-ios</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/07Next-Steps/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/21Appendix_Callback-Scheme-Sample-Code/","title":"Appendix Callback Scheme Sample Code","text":"<p>This code can be used to read the declared URL Type list to discover or check the callback scheme for Workspace ONE integration. For sample usage of this code, see either of these sets of instructions.</p> <ul> <li>Initialize from SwiftUI.</li> <li>Initialize from Storyboard.</li> </ul> <p>The sample code is also published here. github.com/vmware-samples/\u2026/SchemeCheck.swift</p> <p></p> <pre><code>//  Copyright 2023 VMware, Inc.\n//  SPDX-License-Identifier: BSD-2-Clause\n\nimport Foundation\n\nprivate let CFBundleURLTypes = \"CFBundleURLTypes\"\nprivate let CFBundleURLSchemes = \"CFBundleURLSchemes\"\nprivate let path = \"://dummypath\"\n\n/// Get the scheme of the first declared URL Type.\n///\n/// This function returns the declared scheme on success, or throws an \n/// error for any failure.\n///\n/// - Throws: If the URL Type list is empty, or any properties are missing,\n/// or the value in the declaration can't be a URL scheme.\n/// - Returns: String containing the scheme of the first URL Type.\nfunc schemeForWS1() throws -&gt; String {\n    return try\n    Bundle.main.urlTypes().first!.schemes().first!.validateAsURLScheme()\n}\n\n/// Checks if a specified scheme is in any declared URL Type.\n///\n/// This function returns the specified scheme on success, or throws an \n/// error for any failure.\n///\n/// - Parameter expectedScheme: String containing the scheme.\n/// - Throws: If the URL Type list is empty, or any properties are missing,\n/// or if the specified value can't be found, or if the specified value\n/// can't be a URL scheme.\n/// - Returns: The expectedScheme parameter.\nfunc schemeForWS1(_ expectedScheme:String) throws -&gt; String {\n    var discoveredSchemes:[String] = []\n    for urlType in try Bundle.main.urlTypes() {\n        for scheme in try urlType.schemes() {\n            if scheme == expectedScheme {\n                return try expectedScheme.validateAsURLScheme()\n            }\n            discoveredSchemes.append(scheme)\n        }\n    }\n\n    throw NSError(domain: \"\", code: 9, userInfo: [\n        NSLocalizedDescriptionKey:\"Expected scheme \\\"\\(expectedScheme)\\\"\"\n        + \" not found in main bundle URL Types.\"\n        + \" Schemes found \\(discoveredSchemes.count): \"\n        + discoveredSchemes.joined(separator: \" \")\n        + \".\"\n    ])\n}\n\nprivate extension Bundle {\n    func urlTypes() throws -&gt; [[String:Any]] {\n        guard let infoDictionary = self.infoDictionary else {\n            throw NSError(domain: \"\", code: 1, userInfo: [\n                NSLocalizedDescriptionKey:\"Main bundle has no infoDictionary\"\n            ]) }\n        guard let typesAny = infoDictionary[CFBundleURLTypes] else {\n            throw NSError(domain: \"\", code: 2, userInfo: [\n                NSLocalizedDescriptionKey:\"No \\(CFBundleURLTypes) in main bundle\"\n                + \". Keys \\(infoDictionary.keys.count): \"\n                + infoDictionary.keys.joined(separator: \" \")\n            ]) }\n        guard let typesArray = typesAny as? [[String:Any]] else {\n            throw NSError(domain: \"\", code: 3, userInfo: [\n                NSLocalizedDescriptionKey:\n                    \"Couldn't cast [\\(CFBundleURLTypes)] to [[String:Any]].\"\n                + \" \" + String(describing: typesAny)\n            ]) }\n        guard let _ = typesArray.first else {\n            throw NSError(domain: \"\", code: 4, userInfo: [\n                NSLocalizedDescriptionKey:\n                    \"[\\(CFBundleURLTypes)] is an empty array.\"\n            ]) }\n        return typesArray\n    }\n}\n\nprivate extension Dictionary where Key == String {\n    func schemes() throws -&gt; [String] {\n        guard let schemesAny = self[CFBundleURLSchemes] else {\n            throw NSError(domain: \"\", code: 5, userInfo: [\n                NSLocalizedDescriptionKey:\n                    \"The \" + CFBundleURLTypes + \" dictionary has no \"\n                + CFBundleURLSchemes + \". Keys \\(self.keys.count): \"\n                + self.keys.joined(separator: \" \")\n            ]) }\n        guard let schemes = schemesAny as? [String] else {\n            throw NSError(domain: \"\", code: 6, userInfo: [\n                NSLocalizedDescriptionKey:\n                    \"Couldn't cast \" + CFBundleURLSchemes + \" to [String]. \"\n                + String(describing: schemesAny)\n            ]) }\n        guard let _ = schemes.first else {\n            throw NSError(domain: \"\", code: 7, userInfo: [\n                NSLocalizedDescriptionKey:\n                    \"First \" + CFBundleURLSchemes + \" is an empty array.\"\n            ]) }\n        return schemes\n    }\n\n}\n\nprivate extension String {\n    func validateAsURLScheme() throws -&gt; String {\n        // Create a URL from the unchecked scheme to validate it. Note that URL\n        // creation itself will succeed if the scheme is invalid but the .scheme\n        // property will be nil.\n        guard let _ = URL(string:self.appending(path))?.scheme else {\n            let message = self.contains(\"_\")\n            ? \" Scheme contains underscore _, which isn't allowed.\"\n            : \"\"\n            throw NSError(domain: \"\", code: 8, userInfo: [\n                NSLocalizedDescriptionKey:\n                    \"Scheme \\\"\" + self\n                + \"\\\" can't be used to construct a URL.\" + message\n            ])\n        }\n        return self\n    }\n}\n</code></pre>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/21Appendix_Callback-Scheme-Sample-Code/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/22Appendix_Troubleshooting/","title":"Appendix Troubleshooting","text":"<p>In case of difficulty when following the instructions to Test runtime initialization, check these troubleshooting tips first.</p> <p>Tips that mention flipping to Hub only apply to initial enrollment of the app. Subsequent launches after enrollment has finished don't require a flip to Hub.</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/22Appendix_Troubleshooting/#openurlrequestfailed-error-and-no-flip-to-hub","title":"OpenURLRequestFailed error and no flip to Hub","text":"<p>It could happen that the device doesn't flip to Hub and the initial check callback receives an OpenURLRequestFailed error.</p> <p>The full error could appear like one of these.</p> <pre><code>controllerDidFinishInitialCheck failed (extension in AWSDK):\nAWError.AWError.SDK.OpenURLRequestFailed.airWatchApplicationNotInstalled.\n\ncontrollerDidFinishInitialCheck failed (extension in AWSDK):\nAWError.AWError.SDK.OpenURLRequestFailed.airWatchApplicationSchemeNotInAllowedLists.\n</code></pre> <p>Check the app property <code>LSApplicationQueriesSchemes</code> (Queried URL Schemes) is present and has all the required items.</p> <p>The Add Queried URL Schemes and other required properties instructions list the required items and how to configure them.</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/22Appendix_Troubleshooting/#no-flip-back-from-hub","title":"No flip back from Hub","text":"<p>It could happen that the device flips to Hub but doesn't flip back to your app and the initial check callback isn't invoked.</p> <ul> <li> <p>Check that the custom URL scheme is registered correctly.</p> <p>Instructions for registration are in the Task: Configure application properties in the Declare a custom URL scheme instructions. The last instruction includes a way to confirm registration.</p> </li> <li> <p>Check that the correct custom URL scheme is specified to the SDK.</p> <p>The scheme is specified by the app code accessing the AWController singleton and setting its <code>callbackScheme</code> property before starting the SDK.</p> <p>See the instructions  to Initialize from SwiftUI or Initialize from Storyboard for detailed steps.</p> </li> </ul>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/22Appendix_Troubleshooting/#openurlrequestfailed-error-after-flipping-to-hub-and-back","title":"OpenURLRequestFailed error after flipping to Hub and back","text":"<p>It could happen that the device flips to Hub and back but the initial check callback receives an OpenURLRequestFailed error.</p> <p>The Hub app could be showing an error like this.</p> <p></p> <p>The error returned to the callback could appear like this.</p> <pre><code>controllerDidFinishInitialCheck failed (extension in AWSDK):\nAWError.AWError.SDK.OpenURLRequestFailed.failedToFetchEnvironmentDetailsFromAnchor.\n</code></pre> <p>The problem could be that the app isn't recognized by Hub or UEM as one that the enrolled end user should be running.</p> <ul> <li> <p>If the app hasn't been installed via Workspace ONE at least once then do     so now. Instructions can be found in the Integration Preparation Guide     discussed in the Welcome section.</p> </li> <li> <p>Check the bundle identifier is the same in the UEM as in your app project.</p> <p>You can check what bundle identifier the UEM has by following these steps.</p> <ol> <li> <p>Log in to the UEM and select the Organization Group (OG) of the end user     that you are using for development.</p> </li> <li> <p>Navigate to: Resources, Apps, Native.</p> <p>Depending on your console version and customization the navigation could be different.</p> <ul> <li>Resources might be labelled Apps &amp; Books instead.</li> <li>Apps might be labelled Applications instead.</li> </ul> <p>However you navigate, a list of applications will open.</p> </li> <li> <p>Select the Internal tab if it isn't selected by default.</p> </li> <li> <p>Select your app from the list.</p> <p>Select the upper row for the app, not the version row.</p> <p>This screen capture shows the location in the console user interface.</p> <p></p> <p>A detail screen will open for the app.</p> </li> </ol> <p></p> <p>The Application ID on the detail screen will be the bundle identifier.</p> <p>The required value is below the app icon and name, and above the Summary and Device tab selectors. This screen capture shows the location in the console user interface.</p> <p></p> <p>In that screen capture the bundle identifier and Application ID is <code>com.airwatch.hawkinsji.enterprise.ws1app</code></p> <p>Compare that value with the Bundle Identifier in the Xcode project. You can see it in the target editor. The location in the Xcode user interface is shown in this screen capture.</p> <p></p> <p>In that screen capture the bundle identifier is <code>com.airwatch.hawkinsji.enterprise.ws1app</code></p> <p></p> <p>If the bundle identifiers are different, then do one of the following.</p> <ul> <li> <p>Change the bundle identifier in Xcode to be the same as the Application     ID in UEM.</p> </li> <li> <p>Generate a new app installer file for your app and upload it to the UEM     console. Instructions can be found in the Integration Preparation Guide     discussed in the Welcome section.</p> </li> </ul> <p>Otherwise, if the bundle identifiers are the same, then check the following.</p> </li> <li> <p>Ensure that the app is assigned to the end user.</p> <p>Setting end user assignment should have been done as part of following the Integration Preparation Guide discussed in the Welcome section.</p> <p>The easiest way to check could be to step through the instructions to Configure and publish the application, which is where the app assignment is set.</p> </li> <li> <p>Ensure that the app is being signed by the same developer team now as when     the app installer was uploaded to UEM. There's no way to check the signing     team in the UEM user interface. If you aren't sure then you have to generate     a new app installer file for your app and upload it to the UEM console.     Instructions can be found in the Integration Preparation Guide discussed in     the Welcome section.</p> </li> <li> <p>Ensure that the correct team identifier has been passed to the SDK.</p> <p>Check for the error code 9109. It could appear in the Xcode console in a message like this.</p> <pre><code>[E] ErrorResponse received from anchor app:\nOptional(AWOpenURLClient.OpenURLError.ErrorResponse(\"9109\"))\n[com.air-watch.sdk.main AWController+OpenURLRequestResponse:228]\n</code></pre> <p>It could also appear in the open URL received by your app. For example, if the custom URL scheme is \"ws1app\" then the received URL could be like this. <code>ws1app://appRegisterResponse?erc=9109</code></p> <p>That error code could mean that the <code>teamID</code> property is set to a different value to the identifier of the team that signed the app. That causes Hub verification of the app to fail. Rectify it by setting the property to the correct value.</p> <p>See the Task: Initialize the software development kit runtime for details of how to obtain and set the required value.</p> </li> </ul>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/22Appendix_Troubleshooting/#repeat-enrollment-or-reset-app-state","title":"Repeat enrollment or reset app state","text":"<p>In case you want to repeat the enrollment process, or want to completely reset the state of the app on the device, note the following.</p> <ul> <li> <p>Removing an app from an iOS or iPadOS device doesn't clear the app keychain.</p> <p>The SDK will store some identifiers and other management data in the app keychain. The operating system doesn't provide any user interface to clear the app keychain, other than by resetting the whole device to factory defaults.</p> <p>You can add code to your app to delete its keychain. See the Appendix: Keychain Clearance Sample Code for some Open Source sample code.</p> <p>Clearing the keychain won't delete any other data such as files written by the SDK.</p> </li> <li> <p>Removing the app from a device will remove any files written by the app or     SDK.</p> </li> </ul> <p>So a reset sequence could be like this.</p> <ol> <li>Clear the keychain from within the app.</li> <li>Uninstall the app.</li> <li>Install the app via Workspace ONE. Instructions can be found in the     Integration Preparation Guide discussed in the     Welcome section.</li> </ol>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/22Appendix_Troubleshooting/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/23Appendix_Keychain-Clearance-Sample-Code/","title":"Appendix Keychain Clearance Sample Code","text":"<p>If you want to add a keychain clearance option to your application, you can use the code here. The use for keychain clearance is discussed in the Appendix: Troubleshooting.</p> <p>The sample code is also published here. github.com/vmware-samples/\u2026/KeychainClearance.swift</p> <p></p> <pre><code>//  Copyright 2023 VMware, Inc.\n//  SPDX-License-Identifier: BSD-2-Clause\n\nimport Foundation\nimport UIKit\nimport SwiftUI\n\n// Handy extension to get an error message from an OSStatus.\nextension OSStatus {\n    var secErrorMessage: String {\n        return (SecCopyErrorMessageString(self, nil) as String?) ?? \"\\(self)\"\n    }\n}\n\nfunc clearAppKeyChain() {\n    [\n        // List here is in the same order as in the reference documentation.\n        kSecClassGenericPassword,\n        kSecClassInternetPassword,\n        kSecClassCertificate,\n        kSecClassKey,\n        kSecClassIdentity\n    ].forEach {secClass in\n        // Query to find all items of this security class.\n        let query: [CFString: Any] = [kSecClass: secClass]\n        let status = SecItemDelete(query as CFDictionary)\n        if status == errSecSuccess || status == errSecItemNotFound {\n            print(\"Deleted \\\"\\(secClass)\\\" from keychain.\")\n        }\n        else {\n            print(\"Failed to delete \\\"\\(secClass)\\\" from keychain:\"\n                , \" \\(status.secErrorMessage)\")\n        }\n    }\n}\n\nprivate let alertTitle = \"Delete the app keychain?\"\nprivate let alertMessage =\n\"Everything will be deleted and you will have to enrol again.\"\nprivate let alertOKLabel = \"Delete\"\nprivate let alertCancelLabel = \"Cancel\"\n\nextension View {\n    func alertClearAppKeyChain(isPresented: Binding&lt;Bool&gt;) -&gt; some View {\n        // TOTH https://flaviocopes.com/swiftui-alert/\n        // Uses the deprecated Alert but still useful to get started.\n        return self.alert(alertTitle, isPresented:isPresented) {\n            Button(alertCancelLabel, role: .cancel) {}\n            Button(alertOKLabel, role: .destructive) { clearAppKeyChain() }\n        } message: {\n            Text(alertMessage)\n        }\n    }\n}\n\nfunc alertClearAppKeyChain(_ viewController:UIViewController) {\n    let confirm = UIAlertAction(title: alertOKLabel, style: .destructive) {_ in\n        clearAppKeyChain()\n    }\n    let cancel = UIAlertAction(title: alertCancelLabel, style: .cancel) {_ in}\n    let alert = UIAlertController(\n        title: alertTitle,\n        message: alertMessage,\n        preferredStyle: .alert\n    )\n    alert.addAction(confirm)\n    alert.addAction(cancel)\n    viewController.present(alert, animated: true)\n}\n</code></pre> <p>Acknowledgements</p> <ul> <li> <p>Code for the extension to get an error message from an OSStatus. github.com/vmware/captive-web-view/\u2026/StoredKey.swift#L37</p> </li> <li> <p>Reference documentation for <code>kSecClass</code> constants. developer.apple.com/\u2026/keychain_items/\u2026</p> </li> <li> <p>Query to find all items in a security class. github.com/vmware/captive-web-view/\u2026/StoredKey.swift#L184</p> </li> </ul>"},{"location":"IntegrationGuideForiOS/Guides/23BaseIntegration/23Appendix_Keychain-Clearance-Sample-Code/#license","title":"License","text":"<p>Copyright 2023 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/","title":"Documentation","text":"<p>This directory holds information about how to use the Workspace ONE Integration Guide for Android repository. For an introduction to the repository, see the parent directory readme file.</p>"},{"location":"IntegrationGuideforAndroid/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/applications/","title":"Applications","text":"<p>The project in the Workspace ONE Integration Guide for Android code repository contains a number of demonstration applications. Links to the application code are here. For an introduction to the repository, see the parent directory readme file.</p> <p>There is a single project under the Apps directory. Individual applications are in sub-directories, each holding a complete application written either in Java or in Kotlin, as follows.</p>"},{"location":"IntegrationGuideforAndroid/applications/#base-application","title":"Base Application","text":"<p>The base applications have no integration with the Workspace ONE for Android software development kit (SDK). The code is used as a base for other applications.</p> <ul> <li>Apps/baseJava</li> <li>Apps/baseKotlin</li> </ul> <p>The user interface is a single text that appears in the centre of the screen. When you tap the text, it cycles between</p> <ul> <li>fixed message.</li> <li>module name of the application, \"base Kotlin\" for example.</li> <li>dark mode message.</li> </ul> <p>The user interface appears in dark mode if the device is in dark mode, and vice versa.</p>"},{"location":"IntegrationGuideforAndroid/applications/#base-integration-guide","title":"Base Integration Guide","text":"<p>The following applications are demonstrations for the Base Integration Guide.</p>"},{"location":"IntegrationGuideforAndroid/applications/#client-level-integration","title":"Client level integration","text":"<p>Demonstration apps for client level integration.</p> <ul> <li>Apps/clientJava</li> <li>Apps/clientKotlin</li> </ul> <p>The user interface displays the console version. Tapping the console version message toggles a display of the SDK profile that was retrieved from the console.</p> <p>The console version is also displayed in an Android toast message when the SDK has been initialized.</p>"},{"location":"IntegrationGuideforAndroid/applications/#framework-level-integration","title":"Framework level integration","text":"<p>Demonstration apps for framework level integration, either by delegation or by extension.</p> <ul> <li>Apps/frameworkDelegateJava</li> <li>Apps/frameworkDelegateKotlin</li> <li>Apps/frameworkExtendJava</li> <li>Apps/frameworkExtendKotlin</li> </ul> <p>The user interface is the same as the Client level integration demonstration apps except as follows.</p> <ul> <li>SDK status is displayed instead of the console version.</li> <li>The SDK profile has a plain text layout instead of JavaScript Object     Notation (JSON).</li> </ul>"},{"location":"IntegrationGuideforAndroid/applications/#branding-integration-guide","title":"Branding Integration Guide","text":"<p>The following applications are demonstrations for the  Branding Integration Guide.</p> <p>These applications are all integrated to the Framework level, either by delegation or by extension.</p>"},{"location":"IntegrationGuideforAndroid/applications/#enterprise-branding-support-only","title":"Enterprise branding support only","text":"<p>Demonstration apps for support of enterprise branding.</p> <ul> <li>Apps/brandEnterpriseOnlyDelegateJava</li> <li>Apps/brandEnterpriseOnlyDelegateKotlin</li> <li>Apps/brandEnterpriseOnlyExtendJava</li> <li>Apps/brandEnterpriseOnlyExtendKotlin</li> </ul> <p>Branding resources from the management console, if configured, will appear in the SDK user interface, as follows.</p> <ul> <li> <p>On the SDK splash screen that is displayed when the application starts     cold:</p> <ul> <li>Logo will be a branding image.</li> <li>Color of the progress bar will be from the brand palette.</li> </ul> </li> <li> <p>On the SDK login screen that is displayed when, for example, the end     user sets a passcode after registration:</p> <ul> <li>Logo will be a branding image.</li> <li>Background color of, for example, the Next and Confirm navigation     controls will be from the brand palette.</li> </ul> </li> </ul> <p>If any of the above branding resources don't appear, check the configuration in the management console. Instructions can be found in the appendix to the Branding Integration Guide.</p>"},{"location":"IntegrationGuideforAndroid/applications/#static-application-branding","title":"Static application branding","text":"<p>Demonstration apps for support of static branding.</p> <ul> <li>Apps/brandStaticDelegateJava</li> <li>Apps/brandStaticDelegateKotlin</li> <li>Apps/brandStaticExtendJava</li> <li>Apps/brandStaticExtendKotlin</li> </ul> <p>Resources from the app appear in the SDK user interface, as follows.</p> <ul> <li> <p>On the SDK splash screen that is displayed when the application starts     cold:</p> <ul> <li>Logo will be an app drawable.</li> <li>Color of the progress bar will be an app color.</li> <li>Background color will be an app color, unless in dark mode.</li> </ul> </li> <li> <p>On the SDK login screen that is displayed when, for example, the end     user sets a passcode after registration:</p> <ul> <li>Logo will be an app drawable.</li> <li>Background color will be an app color, unless in dark mode.</li> </ul> </li> </ul> <p>A drawable from the app resources also appears in the app user interface.</p>"},{"location":"IntegrationGuideforAndroid/applications/#static-application-branding-with-optional-override-to-enterprise-branding","title":"Static application branding with optional override to enterprise branding","text":"<p>Demonstration apps for support of static branding overridden by enterprise branding.</p> <ul> <li>Apps/brandEnterprisePriorityDelegateJava</li> <li>Apps/brandEnterprisePriorityDelegateKotlin</li> <li>Apps/brandEnterprisePriorityExtendJava</li> <li>Apps/brandEnterprisePriorityExtendKotlin</li> </ul> <p>Resources from the app and the management console appear in the SDK and app user interface, as described in the preceding sections. In case both the console and app specify a resource, the console specification has priority.</p>"},{"location":"IntegrationGuideforAndroid/applications/#dynamic-branding","title":"Dynamic branding","text":"<p>Demonstration apps for dynamic branding.</p> <ul> <li>Apps/brandDynamicDelegateJava</li> <li>Apps/brandDynamicDelegateKotlin</li> <li>Apps/brandDynamicExtendJava</li> <li>Apps/brandDynamicExtendKotlin</li> </ul> <p>Dynamically generated resources appear in the SDK user interface, as follows.</p> <ul> <li> <p>On the SDK splash screen that is displayed when the application starts cold:</p> <ul> <li>Logo will be an image generated at run time from the following texts:<ul> <li>The word \"Loading\".</li> <li>The current date and time.</li> <li>A hexadecimal representation of the Primary Color in the enterprise     brand palette if one is set, or the word \"null\" if unset or     unavailable.</li> </ul> </li> <li>Color of the progress bar will be red.</li> </ul> </li> <li> <p>On the SDK login screen that is displayed when, for example, the end user     sets a passcode after registration:</p> <ul> <li>Logo will be an image generated at run time from the following texts:<ul> <li>The word \"Input\".</li> <li>The current date and time.</li> <li>A hexadecimal representation of the Primary Color in the enterprise     brand palette if one is set, or the word \"null\" if unset or     unavailable.</li> </ul> </li> <li>Background color of, for example, the Next and Confirm navigation     controls will be red.</li> </ul> </li> <li> <p>When the SDK posts a notification, the small icon that is displayed in the     device status bar will be an app drawable.</p> <p>In some deployments, power cycling the mobile device will cause the SDK to post a notification, that the application requires authentication.</p> </li> </ul> <p>The app user interface has the following elements.</p> <ul> <li>An image from the app drawable resources is displayed in the upper half of     the screen. When the image is tapped, an Android notification is posted. The     notification icon will be an app drawable.</li> <li>An enterprise branding image is displayed in the lower half of the screen,     if configured in the management console.</li> </ul>"},{"location":"IntegrationGuideforAndroid/applications/#privacy-agreement-integration-guide","title":"Privacy Agreement Integration Guide","text":"<p>The following application is a demonstration for the Privacy Agreement Module Integration Guide.</p> <ul> <li>Apps/privacyKotlin</li> </ul> <p>When the app is launched after a fresh install a privacy agreement is displayed that the user must accept. The agreement isn't displayed on subsequent launches. After the agreement has been accepted the app user interface opens.</p> <p>The app user interface displays the following options.</p> <ul> <li>Review the privacy agreement.</li> <li>Revert the privacy agreement.</li> </ul> <p>When the agreement is reverted, the review option changes to an accept option.</p> <p>Note that this app doesn't integrate the core SDK, neither at the client nor framework level.</p>"},{"location":"IntegrationGuideforAndroid/applications/#data-loss-prevention-application","title":"Data Loss Prevention Application","text":"<p>Demonstration app for Data Loss Prevention Workspace ONE features:</p> <ul> <li>Apps/dlpExtendKotlin</li> </ul> <p>This integrates the SDK at the framework level. This app utilizes custom Workspace ONE Data Loss Prevention settings and UI components to showcase some features that can be configured from the management console.</p> <p>To configure these settings proceed as follows:</p> <ol> <li> <p>Log in to your Workspace ONE Unified Endpoint Manager (UEM) console and     select the organization group (OG) for your end user.</p> </li> <li> <p>Navigate to Groups &amp; Settings, All Settings, Settings.</p> </li> <li> <p>Select Apps: Settings and Policies: Security Policies.</p> <p>Here you can enable Data Loss Prevention which will give you the ability to configure different mechanisms that restrict extracting data from the app in an unauthorized manner.</p> <p></p> </li> </ol> <p>The app user interface begins with the main page that can take the user to a variety of demonstration activities from the navigation app bar.</p> <p>The SDK tab page will take the user to a screen that showcases the policies and settings associated with the device's SDK profile This includes information on Passcode Policies, Data Loss Prevention Settings, and much more. This page also has the ability to fetch the latest settings from the console, just in case you want to change settings and have them instantly reflected in the app.</p> <p>Selecting UI titled pages will take you to an activity dedicated to showing the difference between them and their stock counterpart. These apps do not show the full extent of what is possible using DLP settings, however they give a quick briefing over some such as: - Enable Copy and Paste Out - Enable Copy and Paste Into - Enable Watermark</p> <p>Other than the UI pages, the app features an Inactivity Countdown page which can be used to track the app inactivty time needed to lock out the user.</p>"},{"location":"IntegrationGuideforAndroid/applications/#additional-sample-applications","title":"Additional Sample Applications","text":"<p>The following applications are additional demonstrations that aren't associated with particular integration guides.</p>"},{"location":"IntegrationGuideforAndroid/applications/#identification-and-custom-settings","title":"Identification and Custom Settings","text":"<p>The following application demonstrates device identification and custom settings features of the Workspace ONE platform.</p> <ul> <li>Apps/identificationDemo</li> </ul> <p>The app integrates the SDK at the client level.</p> <p>The app utilizes Workspace ONE custom settings to receive device identification values from the management console. To configure the settings in the console, proceed as follows.</p> <ol> <li> <p>Log in to your Workspace ONE Unified Endpoint Manager (UEM) console and     select the organization group (OG) for your end user.</p> </li> <li> <p>Navigate to Groups &amp; Settings, All Settings, Settings.</p> </li> <li> <p>Select Custom Settings: Enabled.</p> <p>This will make a Custom Settings text field appear.</p> </li> <li> <p>Paste into the Custom Settings text field the contents of the file:     Resources/customSettings.json</p> </li> </ol> <p>The following screen capture shows the location in the UEM user interface.</p> <p></p> <p>The app user interface is a static display of the custom settings values and other settings and information retrieved from the console and device. Note that the  custom settings have instantiated template values.</p>"},{"location":"IntegrationGuideforAndroid/applications/#duplication","title":"Duplication","text":"<p>A lot of the code in the project is duplicated between applications. In theory, code could be, for example, pulled in from common directories by Gradle or a custom tool. In practice, those approaches have limitations, lead to more maintenance overhead than duplication, and don't result in a repository that is easy to understand for prospective application developers. Duplication is managed by the maintainers of the repository. See also the samers.md file.</p>"},{"location":"IntegrationGuideforAndroid/applications/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/backlog/","title":"Backlog","text":"<p>The following pieces of work have been identified to do in the Workspace ONE Integration Guid for Android repository. For an introduction to the repository, see the parent directory readme file.</p> <p>For some specific notes on how the code in this repository is structured, see the contributing file.</p> <ul> <li> <p>Create an AirWatchSDKBaseIntentService subclass for Framework that calls the     data wipe method.</p> <pre><code>SDKContextManager.getSDKContext().sdkClearAction.clear(SDKClearAction.Type.ALL)\n</code></pre> <p>That should be in the integration guide too.</p> </li> <li> <p>Maybe the BrandingApplication and BrandingAWApplication classes shouldn't be     subclasses. Having them as subclasses means there isn't a single source file     that serves as a snippet.</p> </li> <li> <p>Add some Gradle code that sets the ext.airwatchVersion variable by     inspecting the Download/ directory.</p> </li> <li> <p>Add a splash screen to the sample apps.</p> <ul> <li>https://levelup.gitconnected.com/implement-a-slash-screen-in-android-6589fa539317</li> </ul> </li> <li> <p>Maybe add gesture navigation.</p> <p>If the sample app UI gets more screens added to it, maybe use gestures to navigate between them. See:</p> <ul> <li>https://developer.android.com/training/gestures/detector#kotlin</li> </ul> </li> <li> <p>Maybe use a TextView and layout instead of Canvas.drawText()</p> <p>A change could be made in the brandDynamic apps, in the BitmapBrandingManager class, in the makeBitmap() method. Instead of instantiating a Canvas and then using drawText to add text, a TextView could be inflated from a layout on the fly. The text being painted could then have styling applied to it by the built-in platform mechanism.</p> <p>See some of the following.</p> <ul> <li>https://developer.android.com/reference/android/widget/TextView</li> <li>https://developer.android.com/reference/android/view/LayoutInflater.html</li> <li>https://developer.android.com/reference/android/text/StaticLayout</li> <li>https://stackoverflow.com/questions/7913496/how-to-inflate-framelayout#7916281</li> <li>https://stackoverflow.com/questions/13599553/how-to-a-apply-style-to-all-the-textviews-i-have#13599666</li> <li>https://stackoverflow.com/questions/41779934/how-is-staticlayout-used-in-android#41779935</li> </ul> </li> </ul>"},{"location":"IntegrationGuideforAndroid/backlog/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/build/","title":"Build Instructions","text":"<p>The code project in the Workspace ONE Integration Guide for Android repository can be built by following these instructions. For an introduction to the repository, see the parent directory readme file.</p>"},{"location":"IntegrationGuideforAndroid/build/#directories","title":"Directories","text":"<p>The top-level directories in the repository are as follows.</p> <ul> <li> <p>Apps/ has the demonstration applications' code, in an Android     Studio project. Sub-directories hold complete applications written either in     Java or in Kotlin. For a complete list of applications with links, see the     applications file.</p> </li> <li> <p>Secret/ is set aside for your signing keystore and     configuration.</p> </li> <li> <p><code>Download</code> was set aside for manual installation of the software development     kit (SDK) but is no longer used.</p> </li> </ul>"},{"location":"IntegrationGuideforAndroid/build/#instructions","title":"Instructions","text":"<p>Follow these instructions to build the applications in this project.</p> <ol> <li> <p>Create an Android application signing keystore and configuration.</p> <p>See the Workspace ONE for Android Integration Preparation guide appendices in case you need instructions. Use the following locations:</p> <ul> <li> <p>Keystore file: <code>/wherever/you/pulled/this/repository/IntegrationGuideForAndroid/Secret/keystore</code></p> </li> <li> <p>Signing configuration: <code>/wherever/you/pulled/this/repository/IntegrationGuideForAndroid/Secret/keystore.gradle</code></p> </li> </ul> <p>See the Secret readme file for a template and notes.</p> <p>The build configuration of this repository is set up to use the files you create at the above locations.</p> </li> <li> <p>Ensure you have access to the SDK Maven repository.</p> <p>The repository server is here. <code>https://vmwaresaas.jfrog.io/artifactory/Workspace-ONE-Android-SDK/</code></p> </li> <li> <p>Load the project into Android Studio.</p> <p>Proceed as follows.</p> <ol> <li>Open Android Studio.</li> <li>Close any open projects, to avoid accidents.</li> <li> <p>Open as an existing project this location:</p> <pre><code>`/wherever/you/pulled/this/repository/IntegrationGuideForAndroid/Apps/`\n</code></pre> <p>Note: Don't select any file under that directory.</p> </li> <li> <p>Android Studio prompts you to Gradle Sync because it is unable to get     Gradle wrapper properties. Select OK and the project will synchronise     and configure its build. It might take a minute or two first time.</p> </li> </ol> <p>The applications in the repository should now appear in the Android Studio project navigator. There are 26 at time of writing. The naming convention is as follows, in alphabetic order.</p> <ul> <li><code>base*</code>     Applications with no SDK integration, used as a base for other     applications.</li> <li><code>brand*</code>     Demonstration applications for the Branding Integration Guide.</li> <li><code>client*</code>     Applications for the Base Integration Guide that demonstrate Client     level integration.</li> <li><code>dlpExtendKotlin</code>     Kotlin Application that demonstrates Workspace ONE Data Loss Prevention features.</li> <li><code>framework*</code>     Applications for the Base Integration Guide that demonstrate Framework     level integration, either by delegation or by extension.</li> <li><code>identificationDemo</code>     Application that demonstrates device identification and custom settings     features of Workspace ONE.</li> <li><code>privacy*</code>     Demonstration application for the Privacy Agreement Module Integration     Guide.</li> </ul> <p>The applications file has a complete list of the  applications.</p> </li> <li> <p>Test that the applications can be built.</p> <p>After the synchronisation has finished, execute the Gradle task: Integration Guide, Tasks, build, assemble</p> <p>Gradle tasks can be accessed from the Gradle assistant tab sidebar, which by default is at the top right of the Android Studio window.</p> <p>If the build doesn't run OK then check the first two steps, above, have been completed.</p> </li> </ol> <p>You are now ready to install or debug any of the demonstration applications on your developer device.</p>"},{"location":"IntegrationGuideforAndroid/build/#unused-directory","title":"Unused Directory","text":"<p>The Download/ directory is now unused but was originally set aside for manual download and installation of the Workspace ONE mobile SDK. The code project in the Workspace ONE Integration Guide for Android repository was configured to use the SDK from that directory but is now configured to build with the Maven distribution of the SDK instead.</p>"},{"location":"IntegrationGuideforAndroid/build/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/contributing/","title":"Contributing","text":"<p>Just notes here for now, sorry</p> <p>This project has some case-sensitive file names. This means that it may be a  good idea to switch off case sensitivity in the Git configuration. See: https://stackoverflow.com/a/37844763/7657675</p> <p>An explanation of controlled code duplication and the <code>samers.py</code> script   goes here.</p>"},{"location":"IntegrationGuideforAndroid/contributing/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/samers/","title":"Samers Script User Guide","text":"<p>A lot of the code in this repository is duplicated between applications. Duplication is managed by the repository maintainers. The Samers script can be used to facilitate this task. For an introduction to the repository, see the parent directory readme file.</p>"},{"location":"IntegrationGuideforAndroid/samers/#usage","title":"Usage","text":"<p>The Samers script is a Python script. It is located in the samers.py file.</p> <p>You can run the script and get its usage like this, for example:</p> <pre><code>cd /wherever/you/pulled/this/repository/IntegrationGuideForAndroid/Apps\npython3 ./samers.py -h\n</code></pre>"},{"location":"IntegrationGuideforAndroid/samers/#check-the-duplication-status","title":"Check the duplication status","text":"<p>The rules for which files should be duplicated are coded into the script. To check the current status against the rules, run the following.</p> <pre><code>python3 ./samers.py\n</code></pre> <p>Ignore the first two lines:</p> <pre><code>Failed, no match for \"nuffin\".\nFailed, only one match for \"samers*\": samers.py.\n</code></pre> <p>Subsequent lines begin with either of the words OK or Differences. For example:</p> <pre><code>OK 25 matches for \"**/proguard-rules.pro\".\nDifferences \"**/buildBase.gradle\" \"brandEnterprisePriorityExtendJava/buildBase.gradle\"\n    \"TMPprivacyKotlin/buildBase.gradle\"\nOK 22 matches for \"**/integrateClient.gradle\".\nDifferences \"**/integrateFramework.gradle\" \"brandEnterprisePriorityExtendJava/integrateFramework.gradle\"\n    \"frameworkDelegateJava/integrateFramework.gradle\"\nOK 11 matches for \"**/src/**/AirWatchSDKIntentService.java\".\nOK 11 matches for \"**/src/**/AirWatchSDKIntentService.kt\".\n...\n</code></pre> <p>If all lines start OK then the duplication status is OK. Each line that begins Differences represents a difference that must be resolved.</p>"},{"location":"IntegrationGuideforAndroid/samers/#baling-out","title":"Baling out","text":"<p>You can terminate the script safely and at any time by pressing Ctrl-C.</p>"},{"location":"IntegrationGuideforAndroid/samers/#apply-a-file-update-from-a-path","title":"Apply a file update from a path","text":"<p>One way to resolve a difference is to copy a file over other files that are supposed have the same contents. This is a typical case during the updating procedure for a new version of the Workspace ONE software development kit for Android.</p> <p>For example, suppose updates to the integrateFramework.gradle file are required. The typical procedure would be to update one copy and verify the updates by building and running the app that is built with it. Then the update has to be applied to all the other copies of the integrateFramework.gradle file.</p> <p>To overwrite all files that are supposed to be the same as an updated file, run the following.</p> <pre><code>python3 ./samers.py -v path/to/the/updated.File\n</code></pre> <p>For each file that should be the same but is different, this will show the differences, and prompt you to overwrite. The prompt looks like this for each file:</p> <pre><code>$ python3 ./samers.py -v frameworkDelegateJava/integrateFramework.gradle \nframeworkDelegateJava/integrateFramework.gradle\nMatches \"**/integrateFramework.gradle\":\n    Different \"brandEnterprisePriorityExtendJava/integrateFramework.gradle\"\n*** frameworkDelegateJava/integrateFramework.gradle\n--- brandEnterprisePriorityExtendJava/integrateFramework.gradle\n***************\n*** 31,41 ****\n    implementation(name:'AWComplianceLibrary-2.3.5', ext: 'aar')\n    implementation(name:\"AWFramework-${airwatchVersion}\", ext: 'aar')\n    implementation(name:'VisionUx-1.5.0.a', ext: 'aar')\n!   implementation(name:'CredentialsExt-102.1.0', ext: 'aar')\n    implementation(name:\"chameleon-android-1.0.16-ndk-r21c\", ext:'aar')\n    implementation(name:\"settings-1.0.17-ndk-r21c\", ext:'aar')\n    implementation(name:\"opdata-android-1.3.2\", ext:'aar')\n!   implementation(name:\"attributesprovider-1.0.17-ndk-r21c\", ext:'aar')\n    implementation(name:\"encryptedpreferencesprovider-1.0.12\", ext:'aar')\n    implementation(name:\"httpprovider-1.0.11\", ext:'aar')\n    implementation(name:\"memoryprovider-1.0.11\", ext:'aar')\n--- 31,41 ----\n    implementation(name:'AWComplianceLibrary-2.3.5', ext: 'aar')\n    implementation(name:\"AWFramework-${airwatchVersion}\", ext: 'aar')\n    implementation(name:'VisionUx-1.5.0.a', ext: 'aar')\n!   implementation(name:'CredentialsExt-101.1.0', ext: 'aar')\n    implementation(name:\"chameleon-android-1.0.16-ndk-r21c\", ext:'aar')\n    implementation(name:\"settings-1.0.17-ndk-r21c\", ext:'aar')\n    implementation(name:\"opdata-android-1.3.2\", ext:'aar')\n!   implementation(name:\"attributesprovider-1.0.17\", ext:'aar')\n    implementation(name:\"encryptedpreferencesprovider-1.0.12\", ext:'aar')\n    implementation(name:\"httpprovider-1.0.11\", ext:'aar')\n    implementation(name:\"memoryprovider-1.0.11\", ext:'aar')\n\n    Overwrite? (Y/n/?)\n</code></pre> <p>In the differences portion, the first set of lines are always from the file that was specified on the command line. The second set are from a file that should have the same contents. Check that the first set is what's required and key return to overwrite. If the first set aren't what's required then type n and return. The overwrite of that file will then be skipped.</p>"},{"location":"IntegrationGuideforAndroid/samers/#apply-a-file-update-based-on-git","title":"Apply a file update based on Git","text":"<p>Applying a file update based on Git is a shortcut to applying a file update from a path, see above. The shortcut can be used in the case that in any set of files that should be duplicates, only one file has changed.</p> <p>The shortcut selects the updated file path by inspecting the Git status. Run it as follows.</p> <pre><code>python3 ./samers.py -v -m\n</code></pre> <p>The rest of the processing is the same as above.</p>"},{"location":"IntegrationGuideforAndroid/samers/#update-copyright-notices","title":"Update copyright notices","text":"<p>The samers script can be used to update copyright notices in files under revision control by Git. The script will check the year in the copyright notice in the file against the last modified date in the Git log output.</p> <p>First, commit any required modifications to the local Git repository. Then run the update as follows.</p> <pre><code>python3 ./samers.py -n ../Resources/copyrightnotices.txt -i -v\n</code></pre> <p>For each file in which the copyright notice date is different to the last modified year, the script will show the differences, and prompt you to overwrite. The prompt looks like this for each file:</p> <pre><code>Copyright notices with incorrect date in file \"brandDynamicDelegateJava/src/main/AndroidManifest.xml\"\n    Different \"brandDynamicDelegateJava/src/main/AndroidManifest.xml\"\n*** brandDynamicDelegateJava/src/main/AndroidManifest.xml\n--- Edited\n***************\n*** 1,6 ****\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;!--\n!     Copyright 2022 VMware, Inc.\n    SPDX-License-Identifier: BSD-2-Clause\n--&gt;\n&lt;manifest\n--- 1,6 ----\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;!--\n!     Copyright 2022 VMware, Inc.\n    SPDX-License-Identifier: BSD-2-Clause\n--&gt;\n&lt;manifest\n\n    Overwrite? (Y/n/?)\n</code></pre> <p>In the differences portion, the first set of lines will be the current contents, and the second set are the proposed replacement. Check that the second set is what's required and key return to overwrite. If the second set isn't what's required then type n and return. The overwrite of that file will then be skipped.</p>"},{"location":"IntegrationGuideforAndroid/samers/#other-tasks","title":"Other tasks","text":"<p>Other tasks are TBD at this time, sorry.</p>"},{"location":"IntegrationGuideforAndroid/samers/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/snippets/","title":"Code Snippets","text":"<p>Code snippets from the Workspace ONE Integration Guide for Android document set can be viewed here. For an introduction to the repository, see the parent directory readme file.</p> <p>The following code snippets are in the integration guide for the software development kit (SDK).</p>"},{"location":"IntegrationGuideforAndroid/snippets/#base-integration-guide","title":"Base Integration guide.","text":"<ul> <li> <p>Gradle code to add the required libraries for Client level integration:     integrateClient.gradle</p> </li> <li> <p>AirWatch SDK Service implementation.</p> <ul> <li> <p>In Java:     AirWatchSDKIntentService.java</p> </li> <li> <p>In Kotlin:     AirWatchSDKIntentService.kt</p> </li> </ul> </li> <li> <p>Android Manifest including AirWatch SDK Service declaration:     AndroidManifest.xml</p> </li> <li> <p>Client level initialisation code.</p> <ul> <li> <p>In Java:     MainActivity.java</p> </li> <li> <p>In Kotlin:     MainActivity.kt</p> </li> </ul> </li> <li> <p>Gradle code to add the required libraries and settings for Framework level     integration:     integrateFramework.gradle</p> </li> <li> <p>Android Application subclass for Framework initialisation by delegation.</p> <ul> <li> <p>in Java:     Application.java</p> </li> <li> <p>In Kotlin:     Application.kt</p> </li> </ul> </li> <li> <p>AirWatch AWApplication subclass for Framework initialisation by extension.</p> <ul> <li> <p>In Java:     AWApplication.java</p> </li> <li> <p>In Kotlin:     AWApplication.kt</p> </li> </ul> </li> <li> <p>Android Manifest with modifications for Framework level integration:     AndroidManifest.xml</p> </li> </ul>"},{"location":"IntegrationGuideforAndroid/snippets/#branding-integration-guide","title":"Branding Integration guide","text":"<ul> <li> <p>Static application branding:     styles.xml</p> </li> <li> <p>Enterprise branding:</p> <ul> <li> <p>Android Application subclass that supports enterprise branding. This class     is a subclass of the Application subclass for Framework initialisation by     delegation.</p> <ul> <li> <p>In Java:     EnterpriseBrandApplication.java</p> </li> <li> <p>In Kotlin:     EnterpriseBrandApplication.kt</p> </li> </ul> </li> <li> <p>AirWatch AWApplication subclass that supports enterprise branding. This     class is a subclass of the AWApplication subclass for Framework     initialisation by extension.</p> <ul> <li> <p>In Java:     EnterpriseBrandAWApplication.java</p> </li> <li> <p>In Kotlin:     EnterpriseBrandAWApplication.kt</p> </li> </ul> </li> </ul> </li> <li> <p>Dynamic branding:</p> <ul> <li> <p>Branding manager implementations:</p> <ul> <li> <p>Dummy implementation in Java:     BrandingManager.java</p> </li> <li> <p>Implementation that generates bitmaps at run time, in Java:     BitmapBrandingManager.java</p> </li> <li> <p>Dummy implementation in Kotlin:     BrandingManager.kt</p> </li> <li> <p>Implementation that generates bitmaps at run time, in Kotlin:     BitmapBrandingManager.kt</p> </li> </ul> </li> <li> <p>Branding manager registration:</p> <ul> <li> <p>Android Application subclass in Java:     DynamicBrandApplication.java</p> </li> <li> <p>Android Application subclass in Kotlin:     DynamicBrandApplication.kt</p> </li> <li> <p>AirWatch AWApplication subclass in Java:     DynamicBrandAWApplication.java</p> </li> <li> <p>AirWatch AWApplication subclass in Kotlin:     DynamicBrandAWApplication.kt</p> </li> </ul> </li> <li> <p>Enterprise resources in the application user interface:</p> <ul> <li> <p>Activity in Java:     MainActivity.java</p> </li> <li> <p>Activity in Kotlin:     MainActivity.kt</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"IntegrationGuideforAndroid/snippets/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/updating/","title":"Updating","text":"<p>The code project in the Workspace ONE Integration Guide for Android repository can be updated for a new release of the software development kit by following these instructions. For an introduction to the repository, see the parent directory readme file.</p>"},{"location":"IntegrationGuideforAndroid/updating/#prerequisites","title":"Prerequisites","text":"<p>These instructions assume you have already built the code project at least once. If you haven't, follow the build instructions in the build.md file first.</p>"},{"location":"IntegrationGuideforAndroid/updating/#instructions","title":"Instructions","text":"<p>Follow these instructions to update the applications in this project to a new version of the Workspace ONE Software Development Kit (SDK) for Android.</p> <ol> <li> <p>Build and run the base applications.</p> <p>The base applications don't integrate the SDK so updating to a new version shouldn't make any difference. However, this is a good time to update to the latest versions of native code such as new Kotlin language plugins and AndroidX libraries.</p> <p>First, check for changes highlighted in the project build.gradle file.</p> <p>There are two base applications, <code>baseJava</code> and <code>baseKotlin</code>. Check for changes highlighted in the build.gradle file of each. Run at least one on a developer device as a test before proceeding.</p> <p>If there any native changes to the dependencies, update the <code>buildBase.gradle</code> files accordingly.</p> <ul> <li> <p>There are many copies of the file in the project, all of which should be     identical when the update is finished.</p> </li> <li> <p>Start by updating one of the <code>buildBase.gradle</code> files in either of the     base app modules, then build and run it as a test.</p> </li> <li> <p>When the first copy has been updated, use the samers.py script to apply     the updates to all the other copies. See the samers.md file     for instructions.</p> </li> </ul> <p>See the applications.md file for a description of the app user interface.</p> </li> <li> <p>Update the Workspace ONE Intelligent Hub app.</p> <p>Now is a good time to update to the latest version of Hub on your developer device. You can update using the Play Store, for example.</p> </li> <li> <p>Install the new SDK for Android under the Download/ directory and select     it.</p> <p>See the Workspace ONE for Android Integration Preparation guide for how to obtain the SDK for Android.</p> <p>See the Download readme file for details of how to install and select the version.</p> <p>The build configuration of this repository is set up to work with the SDK you install there.</p> </li> <li> <p>Update, build and run the client applications.</p> <p>There are two client applications: <code>clientJava</code> and <code>clientKotlin</code>. They integrate the SDK at the client level.</p> <p>If the new SDK introduces any changes to the dependencies for client level integration, update the <code>integrateClient.gradle</code> files accordingly.</p> <ul> <li> <p>There are many copies of the file in the project, all of which should be     identical when the update is finished.</p> </li> <li> <p>Start by updating one of the <code>integrateClient.gradle</code> files in either of     the client app modules, then build and run it as a test.</p> </li> <li> <p>When the first copy has been updated, use the samers.py script to apply     the updates to all the other copies. See the samers.md file     for instructions.</p> </li> </ul> <p>If the new SDK doesn't introduce any changes to the dependencies for client level integration, there will be no need to update the <code>integrateClient.gradle</code> file.</p> <p>Code changes might also be needed for integration with the new SDK. For example, new methods might be needed in the AirWatchSDKBaseIntentService implementation. Use the same approach as for the build configuration change, make the change in one app module and then apply to the others using the samers.py script.</p> <p>Build and run at least one of the client apps as a test before proceeding.</p> <p>See the applications.md file for a description of the app user interface.</p> </li> <li> <p>Update, build and run the framework applications.</p> <p>There are several framework applications. Their names all start with <code>framework</code>. They integrate the SDK at the framework level, either by delegation or by extension.</p> <p>If the new SDK introduces any changes to the dependencies for framework level integration, update the <code>integrateFramework.gradle</code> files accordingly.</p> <ul> <li> <p>There are many copies of the file in the project, all of which should be     identical when the update is finished.</p> </li> <li> <p>Start by updating one of the <code>integrateFramework.gradle</code> files in one of     the framework app modules, then build and run it as a test.</p> </li> <li> <p>When the first copy has been updated, use the samers.py script to apply     the updates to all the other copies. See the samers.md file     for instructions.</p> </li> </ul> <p>If the new SDK doesn't introduce any changes to the dependencies for framework level integration, there will be no need to update the <code>integrateFramework.gradle</code> file.</p> <p>Code changes might also be needed for integration with the new SDK. For example, new methods might be needed in the Application or AWApplication subclasses. Use the same approach as for the build configuration change, make the change in one app module and then apply to the others using the samers.py script.</p> <p>Build and run at least one of the framework apps as a test before proceeding.</p> <p>See the applications.md file for a description of the app user interface.</p> </li> <li> <p>Update, build and run the branding applications.</p> <p>There are a number of branding demonstration applications. Their names all start with <code>brand</code>. They integrate the SDK at the framework level, and demonstrate different branding features of Workspace ONE for Android.</p> <p>Branding integration has the same dependencies as framework integration, so there won't be a need to update anything like an integrateBrand.gradle file.</p> <p>Any updates required for framework integration of the new SDK will have been applied already in a previous step, for example by running the samers.py script.</p> <p>Code changes specifically for branding might be needed. Do any updates in the same way as updates to the client and framework application code, by making the change in one app and then applying it with the samers.py script.</p> <p>Build and run at least one of the branding apps as a test before proceeding.</p> <p>See the applications.md file for a description of the app user interface.</p> </li> <li> <p>Update, build and run the privacy agreement applications.</p> <p>There is one privacy agreement application: <code>privacyKotlin</code>. It integrates the Workspace ONE Privacy Agreement Module, not the other parts of the Workspace ONE SDK.</p> <p>If the new SDK introduces any changes to the dependencies for privacy agreement integration, update the <code>integratePrivacy.gradle</code> file accordingly.</p> <p>Build and run the app as a test before proceeding.</p> <p>See the applications.md file for a description of the app user interface.</p> </li> <li> <p>Update, build and run the Data Loss Prevention application.</p> <p>There is one data loss prevention application: <code>dlpExtendKotlin</code>. It integrates the SDK at the framework level, and demonstrates a few data loss  prevention features of Workspace ONE for Android.</p> <p>This application uses Maven to handle it's WS1 dependencies so there is  no need to update any integration build files in order to run.</p> <p>Build and run the app as a test before proceeding.</p> <p>See the applications.md file for a description of the app user interface and how to configure Data Loss Prevention features in the  management console.</p> </li> <li> <p>Update, build and run the additional sample applications.</p> <p>There is one additional sample application: <code>identificationDemo</code>. It integrates the SDK at the client level.</p> <p>This app has a standalone build configuration and doesn't have a copy of the <code>integrateClient.gradle</code> file. Make the same changes to this app's build configuration and code that you made to the <code>clientKotlin</code> app.</p> <p>Build and run the app as a test before proceeding.</p> <p>See the applications.md file for a description of the app user interface and how to configure the management console.</p> </li> <li> <p>Run the automated tests.</p> <p>The sample applications each have a copy of the same automated test suite. See for example the BaseActivityTest.kt file. See also in the build Gradle files the <code>testNoAppUninstall</code> task.</p> <p>The suite is quite basic, testing only that the app launches and that its user interface is interactive. This is enough to verify that each app builds and doesn't crash during SDK initialization.</p> <p>You can run the test suite in all the apps one after another with the gradleach.py Python script. For example, as follows.</p> <pre><code>cd /wherever/you/pulled/this/repository/IntegrationGuideForAndroid/Apps\n\n# Print the usage as a reminder first.\npython3 ./gradleach.py -h\n\n# Go for real.\npython3 ./gradleach.py\n</code></pre> <p>If any test fails, the script will terminate early with an error message from Gradle. Fix any issues before running the tests again.</p> </li> </ol> <p>When the test passes in all the apps, the update is ready for commit.</p>"},{"location":"IntegrationGuideforAndroid/updating/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/Download/readme/","title":"Directory for the Software Development Kit","text":"<p>This directory is set aside for legacy installation of the Workspace ONE Software Development Kit (SDK) for Android. The legacy installation is based on manual download of the SDK.</p>"},{"location":"IntegrationGuideforAndroid/Download/readme/#warning","title":"Warning","text":"<p>Manual download of the SDK isn't recommended. Instead, use the SDK distributed through the public Maven repository. The build configuration of the Open Source sample project now uses the Maven distribution only. See the instructions in the build file.</p>"},{"location":"IntegrationGuideforAndroid/Download/readme/#instructions","title":"Instructions","text":"<p>Follow these instructions to use the manual download mechanism to install the SDK.</p> <ol> <li> <p>Download the SDK.</p> <p>See the SDK home page https://developer.vmware.com/web/sdk/Native/airwatch-android for links to the download portal.</p> </li> <li> <p>Unzip the SDK download under this directory.</p> </li> <li> <p>Copy the root of the SDK to the following location:</p> <p><code>/wherever/you/pulled/this/repository/IntegrationGuideForAndroid/Download/Android SDK v*major*.*minor*</code></p> <p>Leave the sub-directories as they are in the download.</p> <p>For example, if you are using the 21.7 version, you will have a structure like this:</p> <pre><code>IntegrationGuideForAndroid/Download/Android SDK v21.7/\n|\n+-- Documentation/...\n|\n+-- Libs/\n|   |\n|   +-- AWFramework/...\n|   |\n|   +-- AWNetworkLibrary/...\n|   |\n|   +-- AWPrivacy/...\n|   |\n|   +-- ClientSDK/...\n|\n+-- Sample Code/...\n</code></pre> </li> <li> <p>Check the version of the privacy agreements module.</p> <p>The required version number appears as a suffix to the .aar file in the Libs/AWPrivacy/ sub-directory.</p> <p>For example, the path in the 21.7 SDK download is: <code>IntegrationGuideForAndroid/Download/Android SDK v21.7/Libs/AWPrivacy/AWPrivacy-21.5.1.aar</code> The privacy agreements module has 21.5.1 as its version number.</p> </li> <li> <p>Set the versions in the build configuration.</p> <p>The project build.gradle file, Apps/build.gradle, defines <code>ext</code> variables, <code>airwatchVersion</code> and <code>privacyVersion</code>, with the versions.</p> <p>Update the values of the variables if you are using different versions to those in the revision controlled file.</p> <p>Look for code like the following.</p> <pre><code>ext {\n    airwatchVersion = '21.7'\n    privacyVersion = '21.5.1'\n\n    ...\n}\n</code></pre> </li> </ol> <p>That concludes the installation of the SDK for the repository.</p>"},{"location":"IntegrationGuideforAndroid/Download/readme/#notes","title":"Notes","text":"<p>The following notes give some details on how to make the build configuration pick up the SDK from this directory.</p>"},{"location":"IntegrationGuideforAndroid/Download/readme/#project-build","title":"Project Build","text":"<p>The project build.gradle file, Apps/build.gradle, defines the following <code>ext</code> variables and methods.</p> <ul> <li><code>airwatchVersion</code> variable which you update to the required version.</li> <li><code>sdkVersionFile</code> and <code>sdkVersionDir</code> methods which return paths under the     SDK download directory for the airwatchVersion.</li> </ul> <p>In case this has been copied and pasted far away from the original project, the definitions are like this:</p> <pre><code>ext {\n    airwatchVersion = '21.7'\n    sdkVersionPath = {\n        boolean endsWithFile, String[] segments -&gt; new RelativePath(\n            endsWithFile,\n            \"Download\", \"Android SDK v${airwatchVersion}\", *segments\n        ).getFile(new File(rootDir.getParent()))\n    }\n    sdkVersionFile = { String[] segments -&gt; sdkVersionPath(true, segments) }\n    sdkVersionDir = { String[] segments -&gt; sdkVersionPath(false, segments) }\n}\n</code></pre>"},{"location":"IntegrationGuideforAndroid/Download/readme/#application-builds","title":"Application Builds","text":"<p>Repository declarations can be based on the above variables, like this:</p> <pre><code>repositories {\n    flatDir { dirs sdkVersionDir('Libs', 'ClientSDK') }\n    flatDir { dirs sdkVersionDir('Libs', 'ClientSDK', 'dependencies') }\n}\n</code></pre>"},{"location":"IntegrationGuideforAndroid/Download/readme/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/Guides/readme/","title":"Workspace ONE Integration Guide Documents for Android","text":"<p>Android applications can be integrated with the VMware Workspace ONE\u00ae platform, by using its mobile software development kit. The Workspace ONE Integration Guide for Android is a set of documents that contain instructions for integration.</p> <p>Under this directory are the following.</p> <ul> <li>Markdown files for the main text content of the guide documents.</li> <li>Image files for the main graphics of the guide documents, for example screen     capture images and diagrams.</li> </ul> <p>To read the guide documents, start with the Integration Overview file.</p> <p>For the sample code in the guides, see the parent directory readme file.</p>"},{"location":"IntegrationGuideforAndroid/Guides/readme/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/Guides/01Overview/WorkspaceONE_Android_IntegrationOverview/","title":"Integration Overview","text":""},{"location":"IntegrationGuideforAndroid/Guides/01Overview/WorkspaceONE_Android_IntegrationOverview/#workspace-one-for-android","title":"Workspace ONE for Android","text":"<p>Android applications can be integrated with the VMware Workspace ONE\u00ae platform, by using its mobile software development kit. An application that has been integrated can use the features of the platform, such as:</p> <ul> <li>Detection of device compromise.</li> <li>Encrypted storage of application data on the device.</li> <li>Single sign-on authentication with enterprise services.</li> </ul> <p>This document is part of the Workspace ONE Integration Guide for Android set.</p>"},{"location":"IntegrationGuideforAndroid/Guides/01Overview/WorkspaceONE_Android_IntegrationOverview/#table-of-contents","title":"Table of Contents","text":"<p>{{TOC}}</p>"},{"location":"IntegrationGuideforAndroid/Guides/01Overview/WorkspaceONE_Android_IntegrationOverview/#introduction","title":"Introduction","text":"<p>Android applications can be integrated with the Workspace ONE platform, by using its mobile software development kit. An application that has been integrated can use the features of the platform.</p> <p>The Workspace ONE mobile Software Development Kit (SDK) can be integrated to different levels, depending on requirements.</p>"},{"location":"IntegrationGuideforAndroid/Guides/01Overview/WorkspaceONE_Android_IntegrationOverview/#client-integration","title":"Client Integration","text":"<p>Client integration is the lowest level, and requires the least work by the application developer.</p> <p>Client integration makes available the following features:</p> <ul> <li>Enrolment status.</li> <li>User information.</li> <li>Partial SDK profile.</li> <li>Device compromise detection, i.e. detection of rooted status.</li> </ul> <p>None of these features require user interaction in the application. Client integration doesn't require modification of the application user interface.</p>"},{"location":"IntegrationGuideforAndroid/Guides/01Overview/WorkspaceONE_Android_IntegrationOverview/#framework-integration","title":"Framework Integration","text":"<p>Framework is the level of integration above Client, and requires more work by the application developer.</p> <p>Framework integration makes available the following features:</p> <ul> <li>Enrolment status.</li> <li>User information.</li> <li>Full SDK profile.</li> <li>Device compromise detection.</li> <li>Single Sign On (SSO) for apps.</li> <li>End user authentication.</li> <li>Inactivity lock.</li> <li>Application data encryption.</li> <li>Copy paste restrictions.</li> </ul> <p>Some of these features require user interaction in the application. Framework integration will require modifications to the application user interface. Branding can be applied to the SDK user interface, to make it appear as part of the application whole.</p>"},{"location":"IntegrationGuideforAndroid/Guides/01Overview/WorkspaceONE_Android_IntegrationOverview/#networking-integration","title":"Networking Integration","text":"<p>Networking is the level of integration above Framework, and requires more work by the application developer.</p> <p>Networking integration makes available the following features:</p> <ul> <li>All Framework integration features.</li> <li>Tunneling of application data.</li> <li>NTLM and Basic Authentication.</li> <li>Certificate-based authentication.</li> </ul> <p>Networking integration is based on Framework integration and requires modifications to the application user interface.</p>"},{"location":"IntegrationGuideforAndroid/Guides/01Overview/WorkspaceONE_Android_IntegrationOverview/#privacy-module","title":"Privacy Module","text":"<p>The Workspace ONE Privacy Module is independent of Client, Framework, and Networking integration.</p>"},{"location":"IntegrationGuideforAndroid/Guides/01Overview/WorkspaceONE_Android_IntegrationOverview/#operational-data","title":"Operational Data","text":"<p>VMware collects a limited set of information from the Workspace ONE SDK to operate and support the SDK within third-party apps, such as notifying customers about feature removal or platform compatibility. This data is anonymized and analyzed in aggregate, and cannot be used to identify the application containing the SDK or end user. This data is sent to scapi.vmware.com. Please refer to VMware's Privacy Notices online for more information about VMware data collection and privacy policies.</p>"},{"location":"IntegrationGuideforAndroid/Guides/01Overview/WorkspaceONE_Android_IntegrationOverview/#tasks-and-documentation","title":"Tasks and Documentation","text":"<p>Integration of an Android application with the Workspace ONE platform includes a number of tasks for the application developer. Instructions for these tasks are given in a set of documents: the Workspace ONE Integration Guide for Android.</p>"},{"location":"IntegrationGuideforAndroid/Guides/01Overview/WorkspaceONE_Android_IntegrationOverview/#integration-guide-structure","title":"Integration Guide Structure","text":"<p>The Workspace ONE Integration Guide for Android is a particular set of documents. Other documents exist, either legacy or maintained outside the Integration Guide set.</p> <p>Documents in the Integration Guide set contain:</p> <ul> <li>Step-by-step instructions.</li> <li>Snippets of Java and Kotlin code.</li> <li>Discussion of features.</li> <li>Explanatory diagrams.</li> <li>Screen capture images.</li> </ul> <p>Some documents include instructions for tasks in the Workspace ONE management console. These will be for a simplified version of the task that is focussed on a particular integration activity. They aren't intended to replace the system administrator documentation.</p> <p>At time of writing, the following documents in the Integration Guide set are available.</p>"},{"location":"IntegrationGuideforAndroid/Guides/01Overview/WorkspaceONE_Android_IntegrationOverview/#integration-preparation-guide","title":"Integration Preparation Guide","text":"<p>The Integration Preparation guide includes instructions for tasks to complete before starting integration, for example:</p> <ul> <li>Install the mobile application via Workspace ONE.</li> <li>Obtain the software development kit.</li> </ul> <p>Note that it is recommended to install the application via Workspace ONE before integration work begins. An alternative could be to complete Client or Framework integration first but this isn't recommended. The rationale is as follows.</p> <p>Installing the application will require the following steps:</p> <ul> <li>Installing the Workspace ONE Intelligent Hub on a developer device.</li> <li>Generating a signed Android Package (APK) for the application.</li> <li>Uploading the APK file to the Workspace ONE management console.</li> <li>Installing the application from the Hub.</li> </ul> <p>It should be easier to do these steps, and verify correct execution, with a known working mobile application. The other way round, integration then installation, is a kind of big bang approach in which everything has to have been done right or nothing works.</p>"},{"location":"IntegrationGuideforAndroid/Guides/01Overview/WorkspaceONE_Android_IntegrationOverview/#base-integration-guide","title":"Base Integration Guide","text":"<p>The Base Integration guide includes instructions for:</p> <ul> <li>Client integration.</li> <li>Framework integration.</li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/01Overview/WorkspaceONE_Android_IntegrationOverview/#branding-integration-guide","title":"Branding Integration Guide","text":"<p>The Branding Integration guide includes instructions for user interface customisation tasks, including the following.</p> <ul> <li>Implement static application branding.</li> <li>Set a notification icon.</li> <li>Configure dark mode selection.</li> <li>Support enterprise branding.</li> <li>Implement dynamic branding.</li> </ul> <p>Most tasks are for customization of the SDK user interface, so that it appears as part of the application whole. The guide also includes instructions for how to access branding resources in the enterprise management console that could be used to customize the application user interface.</p>"},{"location":"IntegrationGuideforAndroid/Guides/01Overview/WorkspaceONE_Android_IntegrationOverview/#links","title":"Links","text":"<p>The integration guides are available</p> <ul> <li> <p>in Markdown format, in the repository that also holds the sample code: https://github.com/vmware-samples/workspace-ONE-SDK-integration-samples</p> </li> <li> <p>in Portable Document Format (PDF), on the VMware website. https://developer.vmware.com/web/sdk/Native/airwatch-android</p> </li> </ul> <p>The VMware website also has links to other integration resources, including earlier versions of the Developer Guide documentation, other technical documentation, and the SDK itself. You will require a My Workspace One login in order to download the SDK. Speak with your Workspace ONE representative for access.</p> <p>The following table lists the guides and gives links to their published locations in different formats.</p> Document Markdown PDF Integration Overview (this document) IntegrationOverview.md IntegrationOverview.pdf Integration Preparation Guide IntegrationPreparation.md IntegrationPreparation.pdf Base Integration Guide BaseIntegration.md BaseIntegration.pdf Branding Integration Guide Branding.md Branding.pdf"},{"location":"IntegrationGuideforAndroid/Guides/01Overview/WorkspaceONE_Android_IntegrationOverview/#integration-paths-diagram","title":"Integration Paths Diagram","text":"<p>The following diagram shows the tasks involved in integrating an Android application with the Workspace ONE platform. The document in the Integration Guide for Android set that includes the instructions for each task is also indicated, where there is a current document in the set.</p> <p>The Privacy Module is independent of the Client, Framework, Networking path.</p> <p></p>"},{"location":"IntegrationGuideforAndroid/Guides/01Overview/WorkspaceONE_Android_IntegrationOverview/#document-information","title":"Document Information","text":""},{"location":"IntegrationGuideforAndroid/Guides/01Overview/WorkspaceONE_Android_IntegrationOverview/#published-locations","title":"Published Locations","text":"<p>This document is available</p> <ul> <li> <p>in Markdown format, in the repository that also holds the sample code: https://github.com/vmware-samples/...IntegrationOverview.md</p> </li> <li> <p>in Portable Document Format (PDF), on the VMware website: https://developer.vmware.com/...IntegrationOverview.pdf</p> </li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/01Overview/WorkspaceONE_Android_IntegrationOverview/#revision-history","title":"Revision History","text":"Date Revision 03jul2020 First publication, for 20.4 SDK for Android. 22jul2020 Updated for 20.7 SDK for Android. 11oct2020 Updated URL paths to default branch main."},{"location":"IntegrationGuideforAndroid/Guides/01Overview/WorkspaceONE_Android_IntegrationOverview/#legal","title":"Legal","text":"<ul> <li>VMware, Inc. 3401 Hillview Avenue Palo Alto CA 94304 USA     Tel 877-486-9273 Fax 650-427-5001 www.vmware.com</li> <li>Copyright \u00a9 2022 VMware, Inc. All rights reserved.</li> <li>This content is protected by U.S. and international copyright and     intellectual property laws. VMware products are covered by one     or more patents listed at     https://www.vmware.com/go/patents.     VMware is a registered trademark or trademark of VMware, Inc. and its     subsidiaries in the United States and other jurisdictions. All other marks     and names mentioned herein may be trademarks of their respective companies.</li> <li>The Workspace ONE Software Development Kit integration samples are     licensed under a two-clause BSD license.     SPDX-License-Identifier: BSD-2-Clause</li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/02Preparation/WorkspaceONE_Android_IntegrationPreparation/","title":"Integration Preparation Guide","text":""},{"location":"IntegrationGuideforAndroid/Guides/02Preparation/WorkspaceONE_Android_IntegrationPreparation/#workspace-one-for-android","title":"Workspace ONE for Android","text":"<p>Android applications can be integrated with the VMware Workspace ONE\u00ae platform, by using its mobile software development kit. Complete the tasks below to prepare for integration.</p> <p>This document is part of the Workspace ONE Integration Guide for Android set.</p>"},{"location":"IntegrationGuideforAndroid/Guides/02Preparation/WorkspaceONE_Android_IntegrationPreparation/#table-of-contents","title":"Table of Contents","text":"<p>{{TOC}}</p>"},{"location":"IntegrationGuideforAndroid/Guides/02Preparation/WorkspaceONE_Android_IntegrationPreparation/#introduction","title":"Introduction","text":"<p>The tasks detailed below should be done first, to prepare for integration of your Android application with the Workspace ONE platform. After completing these tasks, you will be ready to begin the integration.</p>"},{"location":"IntegrationGuideforAndroid/Guides/02Preparation/WorkspaceONE_Android_IntegrationPreparation/#integration-guides","title":"Integration Guides","text":"<p>This document is part of the Workspace ONE Integration Guide for Android set. An overview that includes links to all the guides is available</p> <ul> <li> <p>in Markdown format, in the repository that also holds the sample code: https://github.com/vmware-samples/...IntegrationOverview.md</p> </li> <li> <p>in Portable Document Format (PDF), on the VMware website: https://developer.vmware.com/...IntegrationOverview.pdf</p> </li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/02Preparation/WorkspaceONE_Android_IntegrationPreparation/#prerequisite-conditions","title":"Prerequisite Conditions","text":"<p>Before you begin, you will need the following.</p> <ul> <li> <p>Access to a Workspace ONE management console.</p> <p>You will need access to a Workspace ONE management console to work on application integration. The management console is sometimes referred to as the UEM, an abbreviation for Unified Endpoint Manager.</p> <p>You will need to know the following:</p> <ul> <li>Server address.</li> <li>Administrative login credentials.</li> </ul> <p>You will need the following privileges:</p> <ul> <li>Upload an application package (APK) file.</li> <li>Either create an organisation group for an end user, or get the name of     an existing group.</li> <li>Either create a new end user with a suitable profile for development     purposes, or get the name of an existing suitable user.</li> <li>Either create enrolment credentials for an end user, or get existing     credentials.</li> </ul> <p>Best practice is to have a separate console, or organisation group, for  software development.</p> <p>Check the [Compatibility] table for a recommended version.</p> </li> <li> <p>Developer environment.</p> <p>The instructions in the integration guide documents assume you use the Android Studio integrated developer environment (IDE). Check the [Compatibility] table for a recommended version.</p> </li> <li> <p>Android application source code.</p> <p>Integrating an application with Workspace ONE will involve changes to the application source code. You will need access to the Java or Kotlin source, to the manifest and resources, and to any other files required to build the application.</p> <p>You can integrate Workspace ONE with an existing Android application of your own, or with an Android sample application, or start a new application from an Android Studio template, for example.</p> <p>The instructions in the integration guide documents assume your application uses AndroidX instead of the original support library. Instructions for migrating from the support library to AndroidX can be found on the Android developer website, for example here: https://developer.android.com/jetpack/androidx/migrate</p> </li> <li> <p>Developer device.</p> <p>You will need a physical Android device to to work on application integration.</p> <p>The Android emulator cannot be used because emulated devices may appear as rooted or otherwise compromised to the Workspace ONE Intelligent Hub application. The Hub must be used to install the application that is being integrated at least once during the integration work.</p> <p>After the first installation via Hub, subsequent installations can be made using the Android Debug Bridge (adb) tool. The device must be set up for developer use. Instructions for setting up a developer device can be found on the Android developer website, for example on the following pages.</p> <ul> <li>https://developer.android.com/studio/debug/dev-options.html</li> <li>https://developer.android.com/studio/run/device</li> </ul> <p>Don't use a device that is already enrolled with a production Workspace ONE console. A device can be unenrolled by removing or resetting the Hub application on the device, and uninstalling any associated applications.</p> </li> </ul> <p>When the prerequisite conditions are met, you can start the first [Task: Install application via Workspace ONE].</p>"},{"location":"IntegrationGuideforAndroid/Guides/02Preparation/WorkspaceONE_Android_IntegrationPreparation/#compatibility","title":"Compatibility","text":"<p>Instructions in this document have been followed with the Workspace ONE Software Development Kit (SDK) for Android and other software, to confirm compatibility.</p> <p>The following table shows the software versions used for the instructions, and the minimum supported versions if different.</p> Software Instructions Supported Workspace ONE software development kit for Android 24.01 Workspace ONE management console 2306 2206 Workspace ONE Intelligent Hub application 24.01 22.02 Android Operating System Android 13 Android 5 Android Studio integrated development environment 2022.3.1 2020.3.1 Gradle plugin for Android 7.2.2 7.2.1"},{"location":"IntegrationGuideforAndroid/Guides/02Preparation/WorkspaceONE_Android_IntegrationPreparation/#task-install-application-via-workspace-one","title":"Task: Install application via Workspace ONE","text":"<p>Installing the application via Workspace ONE is a platform integration task for Android application developers. It applies to all levels of platform integration.</p>"},{"location":"IntegrationGuideforAndroid/Guides/02Preparation/WorkspaceONE_Android_IntegrationPreparation/#installation-order","title":"Installation Order","text":"<p>If you follow the integration guide, you will install your application on a developer device as follows.</p> <ul> <li> <p>The first installation will be of a non-integrated version of the     application via Workspace ONE, by following the instructions below.</p> </li> <li> <p>Subsequent installations will be of integrated versions of the application,     via the Android Debug Bridge (adb) tool.</p> </li> </ul> <p>The adb installations will be upgrades. The application won't ever be uninstalled after the first installation via Workspace ONE.</p> <p>It actually isn't necessary to install an application via Workspace ONE if it isn't integrated. It might therefore seem natural to delay installation via Workspace ONE until some integration work has been done. This guide doesn't follow that order though.</p> <p>The rationale is that installation via Workspace ONE involves activities with which you may be unfamiliar, such as setting up signed builds, and use of the Workspace ONE management console. It's better to do those activities with the application in a known working state.</p>"},{"location":"IntegrationGuideforAndroid/Guides/02Preparation/WorkspaceONE_Android_IntegrationPreparation/#instructions","title":"Instructions","text":"<p>The instructions assume that the [Prerequisite Conditions] are all met.</p> <p>Proceed as follows.</p> <ol> <li> <p>Install and enrol the Hub application.</p> <p>Install the Workspace ONE Intelligent Hub application on the device and complete enrolment. The Hub can be installed from Google Play. Search for \"workspace one intelligent hub\", for example.</p> <p>Follow the instructions in the Hub application to complete enrolment. You will need to know the server address and a set of end user enrolment credentials.</p> <p>Tip: Set a device passcode before you begin enrolment. Typical UEM configurations will require a passcode, as a security policy. If a device passcode isn't set at the start of the enrolment interaction, you will be forced to  set it as an enrolment step, which sometimes doesn't go smoothly.</p> <p>Warning: The Hub application cannot be enrolled with more than one management console at a time. If the Hub is already installed and enrolled on your developer device, then it must now be removed and re-installed, or must be reset, i.e. have its storage cleared. Removing or resetting the Hub may cause removal of any associated applications from the device.</p> <p>Check the [Compatibility] table for a recommended version of Hub.</p> </li> <li> <p>Generate a signed package file for your application.</p> <p>You will need a signed Android package (APK) file for your application. A signed APK can be generated by Android Studio. If you need instructions, see the [Appendix: How to generate a signed Android package every build].</p> <p>Note that you don't need to do any Workspace ONE integration in the application at this stage.</p> <p>You can use any key store to sign the APK, even one you create ad hoc now. You don't have to use the same key your organisation uses to sign APK files for production.</p> </li> <li> <p>Upload your application to the management console.</p> <p>Upload the APK file from the previous step to the Workspace ONE management console.</p> <p>If you need instructions, see the [Appendix: How to upload an Android application to the management console].</p> <p>The signing details from the uploaded APK will be used by the Hub for verification going forwards.</p> </li> <li> <p>Install your application from Hub.</p> <p>Your application can now be installed from the Hub on the device. Find it in the App Catalog section, or in the  and select to install it.</p> <p>Warning: If the App Catalog opens in the browser instead of in Hub, don't install your app from there. If you do, then the application under development won't work later when installed via the Android Debug Bridge (adb). Instead, follow the instructions in the  [Appendix: How to push installation of an application from the console].</p> <p>In case of difficulties, see the [Troubleshooting] tips.</p> </li> </ol> <p>This completes the task.</p> <p>Subsequent installations of your application can be made from Android Studio via the Android Debug Bridge (adb), if you use the same signing configuration. If you need instructions, see the [Appendix: How to generate a signed Android package every build].</p> <p>You can now proceed to the [Next Steps].</p>"},{"location":"IntegrationGuideforAndroid/Guides/02Preparation/WorkspaceONE_Android_IntegrationPreparation/#troubleshooting","title":"Troubleshooting","text":"<p>In case the App Catalog section doesn't appear in the Hub app on your device, try navigating in Hub to This Device, Managed Apps instead.</p> <p>In case your application doesn't appear in the Hub, try pushing installation from the UEM console. For instructions, see the [Appendix: How to push installation of an application from the console].</p> <p>In case installation doesn't start immediately, try any of the following:</p> <ul> <li>Open the Hub application and select This Device, Managed Apps, and then your     application.</li> <li>Open the Hub application and select This Device, Sync device.</li> <li>Terminate the Hub using the device task manager, then open Hub again.</li> </ul> <p>There could be a number of warnings about the trustworthiness of the application, if you used an ad hoc key store to sign the APK. These warnings are generated by the device operating system because it doesn't recognise your ad hoc certificate by default.</p> <ul> <li>Accept the warnings to proceed.</li> <li>The warnings shouldn't be displayed again after first installation. The     device will recognize the certificate on subsequent installations, even if     made via adb.</li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/02Preparation/WorkspaceONE_Android_IntegrationPreparation/#next-steps","title":"Next Steps","text":"<p>This completes the preparation for integrating your Android application with the Workspace ONE platform. You are now ready to start either of the following.</p> <ul> <li>Client-level integration.</li> <li>Framework-level integration.</li> </ul> <p>See the Base Integration guide for instructions. The Base Integration Guide is available</p> <ul> <li> <p>in Markdown format, in the repository that also holds the sample code: https://github.com/vmware-samples/...BaseIntegration.md</p> </li> <li> <p>in Portable Document Format (PDF), on the VMware website: https://developer.vmware.com/...BaseIntegration.pdf</p> </li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/02Preparation/WorkspaceONE_Android_IntegrationPreparation/#appendix-how-to-generate-a-signed-android-package-file-once","title":"Appendix: How to generate a signed Android package file once","text":"<p>You can generate a signed Android package file (APK) for your application by following these instructions. These are provided here for convenience; for definitive information, see the Android developer website.</p> <ol> <li> <p>Open the project in Android Studio.</p> </li> <li> <p>In the menu, select Build, Generate Signed Bundle / APK.</p> <p>This opens the first step in the Generate Signed Bundle or APK dialog.</p> </li> <li> <p>In the dialog, select APK and then click Next.</p> <p>This opens the next step in the dialog.</p> </li> <li> <p>Select a key store path and enter the key store password.</p> <p>You can create a new key store and key ad hoc at this step. If you do then you can also set the key store password, and the individual key password here.</p> </li> <li> <p>Select a key, enter the key password, and then click Next.</p> <p>This opens the next step in the dialog.</p> </li> <li> <p>Make a note of the Destination Folder so that the APK file can be located     after.</p> </li> <li> <p>Select the release build variant.</p> <p>If you select debug, the app might be flagged as a test-only build and cause installation by Hub to fail.</p> </li> <li> <p>If given the options, select Signature Version V2 (Full APK Signature).</p> </li> <li> <p>Click Finish.</p> </li> </ol> <p>The processing runs and a notification will pop up in Android Studio. The destination folder can be opened from a link in the notification. It can also be opened from the Event Log panel, even after the notification has been dismissed.</p> <p>The .apk file is the one to upload to the management console.</p>"},{"location":"IntegrationGuideforAndroid/Guides/02Preparation/WorkspaceONE_Android_IntegrationPreparation/#appendix-how-to-generate-a-signed-android-package-every-build","title":"Appendix: How to generate a signed Android package every build","text":"<p>You can configure Gradle to build a signed Android package file (APK) every time you build the application by following these instructions. These are provided here for convenience; for definitive information, see the Android developer website.</p> <ol> <li> <p>Create a key store file.</p> <p>You can create a key store file by following the instructions in the [Appendix: How to generate a signed Android package file once].</p> <p>The details of the key and key store file will be needed for the next step.</p> </li> <li> <p>Create a script plugin for the key store.</p> <p>You can create a Gradle script plugin file that adds the signing configuration to an Android application build specification. The file could look like this:</p> <pre><code>android {\n    signingConfigs {\n        debug {\n            storeFile file('/path/to/your/keystore')\n            storePassword 'password123'\n            keyPassword 'password456'\n            keyAlias = 'key0'\n        }\n    }\n    buildTypes {\n        release {\n            signingConfig signingConfigs.debug\n        }\n    }\n}\n</code></pre> <p>The name of the file could be like <code>keystore.gradle</code> for example.</p> <p>The location of the file should be outside the application directory, unless you want to place the passwords under revision control.</p> </li> <li> <p>Apply the plugin to the application build.</p> <p>In the application module build.gradle file, after the android block, insert an apply command, for example as follows.</p> <pre><code>android {\n    // Existing configuration such as ...\n    compileSdk 33\n    defaultConfig {\n        // ...\n    }\n    buildTypes {\n        // ...\n    }\n}\n\n// Following line is inserted to apply the signing configuration.\napply from: file(\"/path/to/keystore.gradle\")\n</code></pre> </li> </ol> <p>Every time the application is built, it will now be signed.</p>"},{"location":"IntegrationGuideforAndroid/Guides/02Preparation/WorkspaceONE_Android_IntegrationPreparation/#appendix-how-to-verify-that-an-android-package-file-is-signed","title":"Appendix: How to verify that an Android package file is signed","text":"<p>You can verify that an APK file is signed, by using the apksigner tool. The following notes are provided for convenience; for definitive information, see the Android developer website.</p> <p>The tool comes with Android Studio. The command line is like this:</p> <pre><code>/path/to/Android/sdk/build-tools/version/apksigner verify --verbose /path/to/App-release.apk\n</code></pre> <p>The top of the output should be like this:</p> <pre><code>Verifies\nVerified using v1 scheme (JAR signing): true\nVerified using v2 scheme (APK Signature Scheme v2): true\nNumber of signers: 1\n</code></pre> <p>After that, there could be a large number of warnings. Those can be ignored.</p>"},{"location":"IntegrationGuideforAndroid/Guides/02Preparation/WorkspaceONE_Android_IntegrationPreparation/#appendix-how-to-upload-an-android-application-to-the-management-console","title":"Appendix: How to upload an Android application to the management console","text":"<p>You can upload an APK file to the Workspace ONE management console by following these instructions. These are provided here for application developer convenience and aren't intended to replace the system administrator user guides for the Workspace ONE product.</p> <p>For context of when these instructions would be followed, see the [Task: Install application via Workspace ONE].</p>"},{"location":"IntegrationGuideforAndroid/Guides/02Preparation/WorkspaceONE_Android_IntegrationPreparation/#upload-for-registered-mode-and-device-owner-managed-mode","title":"Upload for Registered mode and Device Owner managed mode","text":"<p>If you are using registered mode or Device Owner (DO) managed mode enrollment on your Android developer device, proceed as follows.</p> <ol> <li> <p>Log in to the UEM and select the Organization Group (OG) of the end user     that you are using for development.</p> </li> <li> <p>Navigate to: Apps &amp; Books, Applications, Native.</p> <p>This opens a list of applications.</p> </li> <li> <p>Select the Internal tab if it isn't selected by default.</p> </li> <li> <p>Expand the Add control and select Application File.</p> <p>The following screen capture shows the location in the user interface.</p> <p></p> <p>This opens the Add Application dialog.</p> </li> <li> <p>Select the group of the end user that you are using for development if it     isn't selected by default.</p> </li> <li> <p>Click Upload, which opens the Add dialog.</p> </li> <li> <p>On the Add dialog: select Local File, then click Choose file.</p> <p>This opens a file chooser dialog.</p> </li> <li> <p>Locate and select your signed APK file, then click Save.</p> <p>The file will be uploaded and progress will be indicated on the screen.</p> <p>When the upload finishes, the Add dialog closes and you return to the Add Application dialog. The file name will have been filled in.</p> </li> <li> <p>On the Add Application dialog, click Continue.</p> <p>This opens the next step, which is a dialog in which the details can be edited.</p> </li> <li> <p>Append your user name to the application name, if you like.</p> <p>Appending your user name will make clear, to anybody with access to the console, that you are responsible for this application.</p> </li> <li> <p>Ensure that an SDK profile is selected.</p> <p>Select the SDK tab in the dialog, then select an SDK profile if one isn't selected already. The following screen captures show the interaction and a selected profile.</p> <p></p> <p></p> <p>(In the above screen capture, the selected profile is \"Android Default Settings @ Global\".)</p> <p>Click Save &amp; Assign. The Assignment Distribution dialog will open.</p> </li> </ol> <p>Continue with the [Set App Assignment] instructions, below.</p>"},{"location":"IntegrationGuideforAndroid/Guides/02Preparation/WorkspaceONE_Android_IntegrationPreparation/#set-app-assignment","title":"Set App Assignment","text":"<p>Setting app assignment is a step in adding an app to the management console. The instructions are the same for all enrollment modes.</p> <p>Proceed as follows.</p> <ol> <li> <p>Set the Name and Assignment Groups as follows.</p> <ul> <li>Set a Name that includes your user name.</li> <li>Select the assignment group for all devices in the OG.</li> </ul> <p>The following screen capture shows selection of the group.</p> <p></p> <p>(In the above screen capture the OG name is Root.)</p> <p>There is no need to add or enable any other items, like restrictions, at this time.</p> <p>Click Create and a dialog will open in which you can review the new assignment.</p> </li> <li> <p>On the assignment review dialog, click Save.</p> <p>This opens the Preview Assigned Devices dialog.</p> </li> <li> <p>Check that your developer device appears in the preview of assigned devices.</p> <p>If it doesn't appear, retrace your steps and check you followed all the instructions.</p> </li> <li> <p>Click Publish.</p> <p>This finalizes the addition and returns you to the Applications part of the console. The detail view of the app you just added will be open.</p> </li> </ol> <p>The application that you uploaded can now be installed from the Workspace ONE Hub application.</p> <p>See also the [Troubleshooting] tips elsewhere in this document.</p>"},{"location":"IntegrationGuideforAndroid/Guides/02Preparation/WorkspaceONE_Android_IntegrationPreparation/#upload-for-profile-owner-mode","title":"Upload for Profile Owner mode","text":"<p>If you are using Profile Owner (PO) managed mode, sometimes referred to as Work Profile mode, enrollment on your Android developer device, proceed as follows.</p> <ol> <li> <p>Log in to the UEM and select the Organization Group (OG) of the end user     that you are using for development.</p> </li> <li> <p>Navigate to: Apps &amp; Books, Applications, Native.</p> <p>This opens a list of applications.</p> </li> <li> <p>Select the Public tab.</p> </li> <li> <p>Click the Add Application button.</p> <p>If the button doesn't appear, then you can't proceed. The following screen  capture shows the location in the user interface.</p> <p></p> <p>This opens an Add Application dialog</p> </li> <li> <p>Select and enter values as follows.</p> <ul> <li>Managed by: the group of the end user that you are using for development     if it isn't selected by default.</li> <li>Platform: Android.</li> <li>Source: Search App Store, even though this seems incorrect.</li> <li>Name: Any text you like, this will be ignored in the ensuing     interaction.</li> </ul> <p>Click Next. This opens a view of the Google Play store in a frame. If you are prompted to do so, accept that the site uses cookies.</p> </li> <li> <p>In the Google Play side navigation, click the padlock Private Apps icon.</p> <p>The following screen capture shows the location in the user interface.</p> <p></p> <p>This opens the enterprise private apps page of your Google Play store.</p> </li> <li> <p>On the Private apps screen, click the plus button.</p> <p>The plus button is towards the bottom right corner of the frame.</p> <p>A screen will open from which you can create a new private app by uploading an APK file.</p> </li> <li> <p>On the add Private app screen, select and enter values as follows.</p> <ul> <li>Set the Title to a display name for your app, and add your username if     you like.</li> <li>Click the button to upload an APK file. This opens a file chooser     dialog. Locate and select your signed APK file.</li> </ul> <p>In case of difficulties, check the [Tips for the app store used in Profile Owner mode], below.</p> <p>Click Create when you're ready to proceed. This returns you to the Private apps screen. Your new app will be shown.</p> <p>The new app might be flagged as unavailable for a time. If this happens and you close the app store, you can return to it by following the above instructions up to step 6. Don't click the plus button.</p> </li> <li> <p>On the Private apps screen, click on your new app.</p> <p>This opens a management page for the app. The page should be like the following screen capture.</p> <p></p> <p>Click the button to Select the app. The button is shown in the above screen capture, in the bottom right corner.</p> <p>The Google Play store will close. An Edit Application dialog opens.</p> </li> <li> <p>Append your user name to the application name, if you like.</p> <p>Appending your user name will make clear, to anybody with access to the console, that you are responsible for this application.</p> </li> <li> <p>Ensure that an SDK profile is selected.</p> <p>Select the SDK tab in the dialog, then select an SDK profile if one isn't selected already. The following screen capture show the tab location and a selected profile.</p> <p></p> <p>Click Save &amp; Assign. The Assignment Distribution dialog will open.</p> </li> </ol> <p>Continue with the [Set App Assignment] instructions, above.</p>"},{"location":"IntegrationGuideforAndroid/Guides/02Preparation/WorkspaceONE_Android_IntegrationPreparation/#tips-for-the-app-store-used-in-profile-owner-mode","title":"Tips for the app store used in Profile Owner mode","text":"<p>Note the following in relation to the Android app store used in Profile Owner managed mode, sometimes referred to as Work Profile mode.</p> <ul> <li> <p>Private apps that you upload can't be removed from the store.</p> </li> <li> <p>Creating a private app can fail with the error:     Upload an APK with an unrestricted package name.</p> <p>Some internet domains names aren't allowed for the package name prefix. One domain that isn't allowed is example.com so you couldn't upload an APK for an app with com.example.myfirstapp as its package name.</p> <p>If you attempt to create a private app with a banned internet domain in its prefix, you get the above error message.</p> </li> <li> <p>Creating a private app can fail with the error:     Upload a new APK file with a different package name.</p> <p>This means that there is already an app in the store with the same package name as the app in the APK file you are uploading.</p> <p>If you wanted to upload a new version of a private app, do this as an upgrade, using a slightly different user interaction.</p> </li> <li> <p>To upload an upgrade to a private app in the store, proceed as follows.</p> <ol> <li> <p>Follow the [Upload for Profile Owner mode] instructions up to step 6.</p> </li> <li> <p>Click on the app.</p> </li> <li> <p>Select to edit the APK file and choose the file for the new version.</p> </li> </ol> <p>The version number in the new APK must be later than the incumbent.</p> <p>Note that there is no need to upload during development. Install your app once via Workspace ONE Hub and then side load upgrades in development from Android Studio as usual.</p> </li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/02Preparation/WorkspaceONE_Android_IntegrationPreparation/#appendix-how-to-push-installation-of-an-application-from-the-console","title":"Appendix: How to push installation of an application from the console","text":"<p>You can push installation of an app from the Workspace ONE management console by following these instructions. These are provided here for application developer convenience and aren't intended to replace the system administrator user guides for the Workspace ONE product.</p> <p>Push installation will sometimes work when installing an app from the Hub on the device doesn't work.</p> <ol> <li> <p>Open the Workspace ONE management console in a web browser and log in.</p> <p>This opens a dashboard.</p> </li> <li> <p>From the dashboard, navigate to: Devices and select the List View.</p> <p>This opens a list of enrolled devices.</p> </li> <li> <p>Select the latest enrollment of your developer device.</p> <p>This opens a detailed view of the selected device.</p> </li> <li> <p>Select the Apps tab.</p> <p>This opens a list of the apps that are assigned to the device.</p> </li> <li> <p>Select the circle on the row of the app you wish to install.</p> <p>Buttons for install and other actions will appear as shown in the following screen capture.</p> <p></p> <p>(In this screen capture, the selected application is named App+WS1.)</p> <p>Buttons for other actions might appear next to the install button. Ignore them.</p> </li> <li> <p>Click the install button, and click OK to confirm if prompted.</p> <p>A message confirming successful save of the request to install will appear.</p> </li> <li> <p>On your developer device, launch the Hub app.</p> <p>If installation hasn't started automatically, navigate to the App Catalog section and select to install it.</p> </li> </ol> <p>The application that you pushed should now install on the device.</p> <p>If it doesn't see the other [Troubleshooting] tips elsewhere in this document.</p>"},{"location":"IntegrationGuideforAndroid/Guides/02Preparation/WorkspaceONE_Android_IntegrationPreparation/#appendix-how-to-run-integrated-applications-on-huawei-devices","title":"Appendix: How to run integrated applications on Huawei devices","text":"<p>Additional preparation of some Huawei mobile devices is required in order to run applications that have integrated the Workspace ONE mobile software development kit.</p> <p>On some devices, an integrated application will crash when launched, if the anchor app, either Workspace ONE Intelligent Hub or Workspace ONE, isn't already running.</p> <p>The crash can be prevented by setting up Secondary Launch Management on the device. Proceed as follows.</p> <ol> <li>On the device, launch the Tablet Manager or Phone Manager app.</li> <li>Select the Auto-Launch option and Secondary Launch Management.</li> <li>Enable for Secondary Launch whichever anchor app is installed, either     Workspace ONE Intelligent Hub or Workspace ONE.</li> </ol> <p>This completes the additional preparation.</p>"},{"location":"IntegrationGuideforAndroid/Guides/02Preparation/WorkspaceONE_Android_IntegrationPreparation/#document-information","title":"Document Information","text":""},{"location":"IntegrationGuideforAndroid/Guides/02Preparation/WorkspaceONE_Android_IntegrationPreparation/#published-locations","title":"Published Locations","text":"<p>This document is available</p> <ul> <li> <p>in Markdown format, in the repository that also holds the sample code: https://github.com/vmware-samples/...IntegrationPreparation.md</p> </li> <li> <p>in Portable Document Format (PDF), on the VMware website: https://developer.vmware.com/...IntegrationPreparation.pdf</p> </li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/02Preparation/WorkspaceONE_Android_IntegrationPreparation/#revision-history","title":"Revision History","text":"Date Revision 03jul2020 First publication, for 20.4 SDK for Android. 31jul2020 to 09dec2021 Updated for 20.7 to 21.11 SDK for Android releases. 26Jan2022 Updated for 22.1 SDK for Android. 28Feb2022 Updated for 22.2 SDK for Android. 04Apr2022 Updated for 22.3 SDK for Android. 29Apr2022 Updated for 22.4 SDK for Android. 06Jun2022 Updated for 22.5 SDK for Android. 05Jul2022 Updated for 22.6 SDK for Android. 23Aug2022 Updated for 22.8 SDK for Android. 04Nov2022 Updated for 22.10 SDK for Android. 08nov2022 Add instructions and tips for app store in PO mode. 13Dec2022 Updated for 22.11 SDK for Android. 25Jan2023 Updated for 23.01 SDK for Android. 15Mar2023 Updated for 23.03 SDK for Android. 27Apr2023 Updated for 23.04 SDK for Android. 06Jun2023 Updated for 23.06 SDK for Android. 24Jul2023 Updated for 23.07 SDK for Android. 07Sep2023 Updated for 23.09 SDK for Android. 25Oct2023 Updated for 23.10 SDK for Android. 18Dec2023 Updated for 23.12 SDK for Android. 25Jan2024 Updated for 24.01 SDK for Android."},{"location":"IntegrationGuideforAndroid/Guides/02Preparation/WorkspaceONE_Android_IntegrationPreparation/#legal","title":"Legal","text":"<ul> <li>VMware LLC 3401 Hillview Avenue Palo Alto CA 94304 USA     Tel 877-486-9273 Fax 650-427-5001 www.vmware.com</li> <li>Copyright \u00a9 2024 VMware LLC All rights reserved.</li> <li>This content is protected by U.S. and international copyright and     intellectual property laws. VMware products are covered by one     or more patents listed at     https://www.vmware.com/go/patents.     VMware is a registered trademark or trademark of VMware LLC and its     subsidiaries in the United States and other jurisdictions. All other marks     and names mentioned herein may be trademarks of their respective companies.</li> <li>The Workspace ONE Software Development Kit integration samples are     licensed under a two-clause BSD license.     SPDX-License-Identifier: BSD-2-Clause</li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/","title":"Base Integration Guide","text":""},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#workspace-one-for-android","title":"Workspace ONE for Android","text":"<p>Android applications can be integrated with the VMware Workspace ONE\u00ae platform, by using its mobile software development kit. Complete the tasks below as a base for feature integration.</p> <p>This document is part of the Workspace ONE Integration Guide for Android set.</p>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#table-of-contents","title":"Table of Contents","text":"<p>{{TOC}}</p>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#introduction","title":"Introduction","text":"<p>The tasks detailed below represent the basic steps in integrating your Android application with the Workspace ONE platform. The tasks you will complete depend on the required integration level of your application.</p> <p>Integration at the Framework level is necessary if the application will make use of platform features such as authentication, single sign-on, data encryption, or networking.</p> <p>To integrate at the Client level, do the following tasks:</p> <ol> <li>[Add the Client SDK].</li> <li>[Initialize the Client SDK].</li> </ol> <p>To integrate at the Framework level, do the following tasks:</p> <ol> <li>[Add the Client SDK].</li> <li>[Add the Framework].</li> <li>[Initialize the Framework].</li> </ol> <p>Note that you don't add Client SDK initialization if you are integrating at the Framework level.</p>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#agreement","title":"Agreement","text":"<p>Before downloading, installing or using the VMware Workspace ONE SDK you must:</p> <ul> <li> <p>Review the     VMware Workspace ONE Software Development Kit License Agreement.     By downloading, installing, or using the VMware Workspace ONE SDK you agree     to these license terms. If you disagree with any of the terms, then do not     use the software.</p> </li> <li> <p>Review the VMware Privacy Notice     and the     Workspace ONE UEM Privacy Disclosure,     for information on applicable privacy policies.</p> </li> </ul> <p>That applies however you obtain or integrate the software.</p>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#integration-guides","title":"Integration Guides","text":"<p>This document is part of the Workspace ONE Integration Guide for Android set.</p> <p>See other guides in the set for</p> <ul> <li>an overview of integration levels and the benefits of each.</li> <li>details of the integration preparation tasks, which must be done before the     tasks in this document.</li> </ul> <p>An overview that includes links to all the guides is available</p> <ul> <li> <p>in Markdown format, in the repository that also holds the sample code: https://github.com/vmware-samples/...IntegrationOverview.md</p> </li> <li> <p>in Portable Document Format (PDF), on the VMware website: https://developer.vmware.com/...IntegrationOverview.pdf</p> </li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#compatibility","title":"Compatibility","text":"<p>Instructions in this document have been tested with the following software versions.</p> Software Version Workspace ONE SDK for Android 24.01 Workspace ONE management console 2306 Android Studio integrated development environment 2022.3.1 Gradle plugin for Android 7.2.2 Kotlin language 1.8.21"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#integration-paths-diagram","title":"Integration Paths Diagram","text":"<p>The following diagram shows the tasks involved in base integration and the order in which they can be completed. Integration Preparation is a prerequisite to base integration. Framework integration is a prerequisite to integrating any of the framework features, which are covered by other guides.</p> <p></p>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#task-add-client-sdk-add-the-client-sdk","title":"Task: Add Client SDK [Add the Client SDK]","text":"<p>Adding the Client SDK is a Workspace ONE platform integration task for Android application developers. It applies to all levels of platform integration.</p> <p>If you haven't installed your application via Workspace ONE at least once, then do so now. If you don't, the application under development won't work when installed via the Android Debug Bridge (adb). Instructions for installing via Workspace ONE can be found in the [Integration Guides] document set, in the Integration Preparation guide.</p> <p>The first step will be to set up the build configuration and files. These instructions assume that your application has a typical project structure, as follows:</p> <ul> <li>Project files in the root directory.</li> <li>Application module in a sub-directory.</li> <li>Separate <code>build.gradle</code> files for the project and application.</li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#project-structure-diagram","title":"Project Structure Diagram","text":"<p>The following diagram illustrates the expected project directory structure, and the locations of changes to be made.</p> <p></p> <p>Tip: It might be easier to see the structure, and identify which Gradle file is which, in the Android Studio project navigator if you select the Project view, instead of the Android view.</p>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#software-development-kit-download-structure-diagram","title":"Software Development Kit Download Structure Diagram","text":"<p>The following diagram illustrates the directory structure of the SDK download. </p> <p></p> <p>Files from within the above structure are copied under your application project in the following instructions.</p> <p></p>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#instructions","title":"Instructions","text":"<p>Proceed as follows.</p>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#build-configuration-and-files-buildconfigurationandfilesclientsdkintegration","title":"Build Configuration and Files [BuildConfigurationAndFilesClientSDKIntegration]","text":"<p>First, update the build configuration and add the required library files.</p> <ol> <li> <p>Update the Gradle Android plugin version, if necessary.</p> <p>In the project build.gradle file, check the Android plugin version. This is typically near the top of the file, inside the <code>buildscript</code> block, in the <code>dependencies</code> sub-block. The top of the file might look like this:</p> <pre><code>buildscript {\n    ...\n    repositories {\n        ...\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:7.2.2'\n        ...\n    }\n}\n</code></pre> <p>In this example, the Gradle Android plugin version is 7.2.2</p> <p>Ensure that the plugin version is at least 7.2.1</p> <p>The location of this change is shown in the [Project Structure Diagram].</p> </li> <li> <p>Add the required packaging and compile options.</p> <p>In the application build.gradle file, in the <code>android</code> block, add the Java version compatibility declarations shown in the following snippet.</p> <pre><code>...\nandroid {\n    compileSdk 33\n\n    // Following blocks are added.\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n    kotlinOptions {\n        jvmTarget = \"1.8\"\n    }\n    packagingOptions {\n       exclude 'META-INF/kotlinx-serialization-runtime.kotlin_module'\n    }\n    // End of added blocks.\n\n    defaultConfig {\n        targetSdk 33\n        ...\n    }\n    buildTypes {\n        ...\n    }\n}\n</code></pre> </li> <li> <p>Add the required libraries to the build.</p> <p>Still in the application build.gradle file, in the <code>dependencies</code> block, add references to the required libraries. For example:</p> <pre><code>repositories {\n    maven {\n        url 'https://vmwaresaas.jfrog.io/artifactory/Workspace-ONE-Android-SDK/'\n    }\n}\n\ndependencies {\n    // Integrate Workspace ONE at the Client level.\n    //\n    // Before downloading, installing, or using the VMware Workspace ONE\n    // SDK you must:\n    //\n    // -   Review the VMware Workspace ONE Software Development Kit License \n    //     Agreement that is posted here.\n    //     https://developer.vmware.com/docs/12215/WorkspaceONE_SDKLicenseAgreement.pdf\n    //\n    //     By downloading, installing, or using the VMware Workspace ONE SDK you \n    //     agree to these license terms. If you disagree with any of the terms, then\n    //     do not use the software.\n    //\n    // -   Review the VMware Privacy Notice and the Workspace ONE UEM Privacy\n    //     Disclosure for information on applicable privacy policies.\n    //     https://www.vmware.com/help/privacy.html\n    //     https://www.vmware.com/help/privacy/uem-privacy-disclosure.html\n    implementation \"com.airwatch.android:AirWatchSDK:24.01\"\n}\n</code></pre> <p>The location of this change is shown in the [Project Structure Diagram].</p> </li> </ol> <p>This completes the required changes to the build configuration. Build the application to confirm that no mistakes have been made. After that, continue with the next step, which is [Anchor Event Handler Implementation].</p> <p>In case you encounter an error, check the [Early Version Support Build Error] first.</p> <p>If you haven't installed your application via Workspace ONE at least once, then the application under development won't work when installed via the Android Debug Bridge (adb). Instructions for installing via Workspace ONE can be found in the [Integration Guides] document set, in the Integration Preparation guide.</p> <p></p>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#anchor-event-handler-implementation","title":"Anchor Event Handler Implementation","text":"<p>The Workspace ONE Client SDK runtime receives various essential notifications from the management console. An implementation of a specific Android broadcast receiver and action handler must be added to your application to support this. From SDK 23.04 onwards, application need not add implementation for  AirWatchSDKBaseIntentService, and must be removed.</p> <p>Proceed as follows.</p> <ol> <li> <p>Implement a Workspace ONE SDK Event handler class.</p> <ul> <li>Add a new class to your application.</li> <li>Declare the new class and implement     <code>WS1AnchorEvents</code> interface. </li> <li>While upgrading to SDK 23.04 or above, migrate AirWatchSDKBaseIntentService API implementation to WS1AnchorEvents.</li> </ul> <p>In Java, the class could look like this:</p> <pre><code>public class AppWS1AnchorEvents implements WS1AnchorEvents {\n    @Override\n    public void onClearAppDataCommandReceived(Context context, ClearReasonCode reasonCode) {}\n\n    @Override\n    public void onApplicationConfigurationChange(Bundle applicationConfiguration, Context context) {}\n\n    @Override\n    public void onApplicationProfileReceived(\n        Context context,\n        String profileId,\n        ApplicationProfile awAppProfile) {}\n\n    @Override\n    public void onAnchorAppStatusReceived(Context context, AnchorAppStatus awAppStatus) {}\n\n    @Override\n    public void onAnchorAppUpgrade(Context context, boolean isUpgrade) {}\n}\n</code></pre> <p>In Kotlin, the class could look like this:</p> <pre><code>class AppWS1AnchorEvents : WS1AnchorEvents {\n    override fun onClearAppDataCommandReceived(context: Context?, reasonCode: ClearReasonCode?) {}\n\n    override fun onApplicationConfigurationChange(\n        applicationConfiguration: Bundle?,\n        context: Context?,\n    ) {}\n\n    override fun onApplicationProfileReceived(\n        context: Context?,\n        profileId: String?,\n        awAppProfile: ApplicationProfile?) {}\n\n    override fun onAnchorAppStatusReceived(context: Context?, awAppStatus: AnchorAppStatus?) {}\n\n    override fun onAnchorAppUpgrade(context: Context?, isUpgrade: Boolean) {}\n}\n</code></pre> </li> <li> <p>Declare the permission and interaction filter.</p> <p>In the Android manifest file, inside the <code>manifest</code> block but outside the <code>application</code> block, add declarations like the following.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;manifest ...&gt;\n\n&lt;!-- Following declarations are added --&gt;\n&lt;uses-permission android:name=\"com.airwatch.sdk.BROADCAST\" /&gt;\n\n&lt;!-- Following tag applies to compileSdkVersion 30 or later. --&gt;\n&lt;queries&gt;\n    &lt;intent&gt;\n        &lt;action android:name=\"com.airwatch.p2p.intent.action.PULL_DATA\" /&gt;\n    &lt;/intent&gt;\n&lt;/queries&gt;\n\n&lt;!-- End of added declarations.&gt;\n\n&lt;application ...&gt;\n...\n</code></pre> </li> <li> <p>Declare the notification receiver. From SDK 23.04 onwards,      declaration for AirWatchSDKBaseIntentService must be removed from manifest.</p> <p>In the Android manifest file, inside the <code>application</code> block, add <code>receiver</code> declaration like the following.</p> <pre><code>&lt;application&gt;\n\n    ...\n\n    &lt;receiver\n        android:name=\"com.airwatch.sdk.AirWatchSDKBroadcastReceiver\"\n        android:permission=\"com.airwatch.sdk.BROADCAST\" &gt;\n        &lt;intent-filter&gt;\n            &lt;action android:name=\"${applicationId}.airwatchsdk.BROADCAST\" /&gt;\n        &lt;/intent-filter&gt;\n        &lt;intent-filter&gt;\n            &lt;action\n                android:name=\"com.airwatch.intent.action.APPLICATION_CONFIGURATION_CHANGED\"\n                /&gt;\n\n            &lt;!--\n            In the host attribute, replace com.your.package with the package name of your\n            application.\n            --&gt;\n            &lt;data android:scheme=\"app\" android:host=\"com.your.package\" /&gt;\n\n        &lt;/intent-filter&gt;\n        &lt;intent-filter&gt;\n            &lt;action android:name=\"android.intent.action.PACKAGE_ADDED\" /&gt;\n            &lt;action android:name=\"android.intent.action.PACKAGE_REMOVED\" /&gt;\n            &lt;action android:name=\"android.intent.action.PACKAGE_REPLACED\" /&gt;\n            &lt;action android:name=\"android.intent.action.PACKAGE_CHANGED\" /&gt;\n            &lt;action android:name=\"android.intent.action.PACKAGE_RESTARTED\" /&gt;\n            &lt;data android:scheme=\"package\" /&gt;\n        &lt;/intent-filter&gt;\n    &lt;/receiver&gt;\n\n&lt;/application&gt;\n</code></pre> </li> <li> <p>Apps need to implement SDKClientConfig in     their Application class and override getEventHandler()     and return WS1AnchorEvents Implementation object.      From SDK 23.04 onwards, application need to migrate to SDKClientConfig instead of AirWatchSDKBaseIntentService.</p> <pre><code>    public class AppApplication extends Application implements SDKClientConfig {\n       @NonNull\n       @Override\n       public WS1AnchorEvents getEventHandler() {\n          return new AppWS1AnchorEvents();\n       }\n    }`\n</code></pre> </li> </ol> <p>This completes the required anchor event handler implementation. Build the application to confirm that no mistakes have been made.</p> <p>If you haven't installed your application via Workspace ONE at least once, then the application under development won't work when installed via the Android Debug Bridge (adb). Instructions for installing via Workspace ONE can be found in the [Integration Guides] document set, in the Integration Preparation guide.</p>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#next-steps","title":"Next Steps","text":"<p>After completing the above, continue with the next task, which could be either of the following.</p> <ul> <li>[Initialize the Client SDK], if your application will use only Client-level     integration.</li> <li>[Add the Framework], otherwise.</li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#task-initialize-client-sdk-initialize-the-client-sdk","title":"Task: Initialize Client SDK [Initialize the Client SDK]","text":"<p>Client SDK initialization is a Workspace ONE platform integration task for Android application developers. It applies only to Client-level integration, not to Framework integration.</p> <p>The Client SDK initialization task is dependent on the [Add the Client SDK] task. The following instructions assume that the dependent task is complete already.</p>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#sdkmanager","title":"SDKManager","text":"<p>The main class of the Client SDK is SDKManager. It must be initialized before use. Initialize it by calling the <code>init</code> class method. The call must be on a background thread. An Android Context object is required, which could be an Activity instance for example.</p> <p>In Java, code for an Activity that initializes the SDKManager could look like this:</p> <pre><code>public class MainActivity extends Activity {\n    SDKManager sdkManager = null;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        ...\n        startSDK();\n    }\n\n    private void startSDK() { new Thread(new Runnable() {\n        @Override\n        public void run() {\n            try {\n                final SDKManager initSDKManager = SDKManager.init(MainActivity.this);\n                sdkManager = initSDKManager;\n                toastHere(\n                    \"Workspace ONE console version:\" + initSDKManager.getConsoleVersion());\n            }\n            catch (Exception exception) {\n                sdkManager = null;\n                toastHere(\n                    \"Workspace ONE failed \" + exception + \".\");\n            }\n        }\n    }).start(); }\n\n    private void toastHere(final String message) {runOnUiThread(new Runnable() {\n        @Override\n        public void run() {\n            Toast.makeText(MainActivity.this, message, Toast.LENGTH_LONG).show();\n        }\n    });}\n\n    ...\n}\n</code></pre> <p>In Kotlin, code for an Activity that initializes the SDKManager could look like this:</p> <pre><code>class MainActivity : Activity() {\n\n    private var sdkManager: SDKManager? = null\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        ...\n        startSDK()\n    }\n\n    private fun startSDK() { thread {\n        try {\n            val initSDKManager = SDKManager.init(this)\n            sdkManager = initSDKManager\n            toastHere(\"Workspace ONE console version:${initSDKManager.consoleVersion}\")\n        }\n        catch (exception: Exception) {\n            sdkManager = null\n            toastHere(\"Workspace ONE failed $exception.\")\n        }\n    } }\n\n    private fun toastHere(message: String) { runOnUiThread {\n        Toast.makeText(this, message, Toast.LENGTH_LONG).show()\n    } }\n\n    ...\n}\n</code></pre> <p>Calling the <code>init</code> method completes SDK Manager initialization. Build and run the application to verify that no mistakes have been made.</p>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#next-steps-nextstepsclientsdkinitialization","title":"Next Steps [NextStepsClientSDKInitialization]","text":"<p>After the SDKManager instance has been received from the init call, its other methods can be called. Check the reference documentation for details of the programming interface.</p> <p>This completes Client-level integration.</p>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#task-add-framework-add-the-framework","title":"Task: Add Framework [Add the Framework]","text":"<p>Adding the Framework is a Workspace ONE platform integration task for Android application developers. Adding the Framework is necessary if the application will make use of platform features such as authentication, single sign-on, data encryption, or networking.</p> <p>This task is dependent on the [Add the Client SDK] task. The following instructions assume that the dependent task is complete already.</p>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#build-configuration-and-files-buildconfigurationandfilesframeworkintegration","title":"Build Configuration and Files [BuildConfigurationAndFilesFrameworkIntegration]","text":"<p>This task involves changing your application project's build configuration and files. These instructions assume that your application has a typical project structure, same as the Add Client SDK task, as shown in the [Project Structure Diagram].</p> <p>A number of libraries will be added to the project. These can be divided into the following categories.</p> <ul> <li>Workspace ONE libraries that are part of the SDK.</li> <li>Third party libraries that are distributed with the SDK.</li> <li>Third party libraries that are hosted remotely, for example in a Maven     repository, and included via Gradle.</li> </ul> <p>Proceed as follows.</p> <p></p> <ol> <li> <p>Add the required libraries to the build.</p> <p>In the application build.gradle file, in the <code>dependencies</code> block, add references to the required libraries. For example: <p></p></p> <pre><code>repositories {\n    maven {\n        url 'https://vmwaresaas.jfrog.io/artifactory/Workspace-ONE-Android-SDK/'\n    }\n}\n\ndependencies {\n    // Integrate Workspace ONE at the Framework level.\n    //\n    // Before downloading, installing, or using the VMware Workspace ONE\n    // SDK you must:\n    //\n    // -   Review the VMware Workspace ONE Software Development Kit License \n    //     Agreement that is posted here.\n    //     https://developer.vmware.com/docs/12215/WorkspaceONE_SDKLicenseAgreement.pdf\n    //\n    //     By downloading, installing, or using the VMware Workspace ONE SDK you \n    //     agree to these license terms. If you disagree with any of the terms, then\n    //     do not use the software.\n    //\n    // -   Review the VMware Privacy Notice and the Workspace ONE UEM Privacy\n    //     Disclosure for information on applicable privacy policies.\n    //     https://www.vmware.com/help/privacy.html\n    //     https://www.vmware.com/help/privacy/uem-privacy-disclosure.html\n    implementation \"com.airwatch.android:AWFramework:24.01\"\n}\n</code></pre> <p>Your application might already require different versions of some of the same libraries required by the SDK. Warning messages will be generated in the build output in that case, for example stating that there are incompatible JAR files in the classpath.</p> <p>You can resolve this by selecting one or other version, either the SDK requirement or your app's original requirement. In principle, the SDK isn't supported with versions other than those given in the above. In practice however, problems are unlikely to be encountered with later versions.</p> </li> <li> <p>Add annotation processor support.</p> <p>In the application build.gradle file, add the <code>kotlin-kapt</code> plugin. The plugin can be added in the plugins block at the start of the file, for example as shown in the following snippet.</p> <pre><code>plugins {\n    id 'com.android.application'\n    id 'kotlin-android'\n    id 'kotlin-android-extensions'\n\n    // Following line adds the required plugin.\n    id 'kotlin-kapt'\n}\n...\n</code></pre> </li> <li> <p>Add the required packaging and compile options.</p> <p>Still in the application build.gradle file, in the <code>android</code> block, add the packaging option shown in the following snippet.</p> <pre><code>...\nandroid {\n    compileSdk 33\n\n    // Following block is added.\n    packagingOptions {\n        pickFirst '**/*.so'\n    }\n    // End of added block.\n\n    defaultConfig {\n        targetSdk 33\n        ...\n    }\n    buildTypes {\n        ...\n    }\n}\n...\n</code></pre> <p>The above assumes that support for earlier Android operating system versions and processor architectures isn't required in the application. If support is required, also follow the instructions in the [Appendix: Early Version Support].</p> </li> <li> <p>App targeting API level 31 or above, override getEventHandler() in App's Application class to return     WS1AnchorEvents object.</p> <pre><code>    public class AppApplication extends AWApplication {\n       @NonNull\n       @Override\n       public WS1AnchorEvents getEventHandler() {\n          return new AppWS1AnchorEvents();\n       }\n    }\n</code></pre> </li> </ol> <p>This completes the required changes to the build configuration. Build the application to confirm that no mistakes have been made. After that, continue with the next task, which is to [Initialize the Framework].</p> <p>In case you encounter an error, check the [Early Version Support Build Error] first.</p>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#task-initialize-framework-initialize-the-framework","title":"Task: Initialize Framework [Initialize the Framework]","text":"<p>Framework initialization is a Workspace ONE platform integration task for Android application developers. It applies to Framework-level integration, not to Client-level integration.</p> <p>The Framework initialization task is dependent on the [Add the Framework] task. The following instructions assume that the dependent task is complete already.</p>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#select-initialization-class","title":"Select initialization class","text":"<p>Framework initialization can start from either an Android Application subclass, referred to as initialization by delegation, or from a Workspace ONE SDK AWApplication subclass, referred to as initialization by extension. Choose the better option for your application, as follows.</p> <ul> <li> <p>If your application has an Android Application subclass, then choose it     as the Framework initialization class. Proceed to these instructions:     [Initialize by delegation from an Android application subclass].</p> </li> <li> <p>Otherwise, create a Workspace ONE SDK AWApplication subclass and it will     be the Framework initialization class. Proceed to these instructions:     [Create an initialization subclass by extension].</p> </li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#initialize-by-delegation-from-an-android-application-subclass","title":"Initialize by delegation from an Android Application subclass","text":"<p>Follow these instructions to initialize from an Android Application subclass. This is an alternative to creating an AWApplication subclass. See [Select initialization class] for a discussion of the alternatives.</p> <p>Update your Android Application subclass as follows.</p> <ul> <li> <p>Declare that the class implements the AWSDKApplication interface.</p> </li> <li> <p>Add an AWSDKApplicationDelegate instance as a property.</p> </li> <li> <p>Move the code from the body of your onCreate method, if any, to an override     of the AWSDKApplication onPostCreate method.</p> </li> <li> <p>Override the AWSDKApplication getMainActivityIntent() method to return an     Intent for the application's main Activity.</p> </li> <li> <p>Override the following Android Application methods:</p> <ul> <li>onCreate</li> <li>getSystemService</li> <li>attachBaseContext</li> </ul> <p>The required overrides are shown in the code snippets below, in Kotlin and in Java.</p> </li> <li> <p>Implement all the other AWSDKApplication methods by calling the same method     in the AWSDKApplicationDelegate instance.</p> <p>Kotlin delegation-by can be used for the implementation. This is illustrated in the [Initialization by delegation in Kotlin] code snippet below.</p> </li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#initialization-by-delegation-in-java","title":"Initialization by delegation in Java","text":"<p>In Java, the class could look like this:</p> <pre><code>public class Application extends android.app.Application implements AWSDKApplication {\n    // SDK Delegate.\n    private final AWSDKApplicationDelegate awDelegate = new AWSDKApplicationDelegate();\n    @NotNull\n    @Override\n    public AWSDKApplication getDelegate() { return awDelegate; }\n\n    // Android Application overrides for integration.\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        this.onCreate(this);\n    }\n\n    @Override\n    public Object getSystemService(String name) {\n        return this.getAWSystemService(name, super.getSystemService(name));\n    }\n\n    @Override\n    public void attachBaseContext(@NotNull Context base) {\n        super.attachBaseContext(base);\n        attachBaseContext(this);\n    }\n\n    // Application-specific overrides.\n    @Override\n    public void onPostCreate() {\n        // Code from the application's original onCreate() would go here.\n    }\n\n    @NonNull\n    @Override\n    public Intent getMainActivityIntent() {\n        // Replace MainActivity with application's original main activity.\n        return new Intent(getApplicationContext(), MainActivity.class);\n    }\n\n    // Mechanistic AWSDKApplication abstract method overrides.\n\n    // Methods that return a value could follow this as a template:\n    @Nullable\n    @Override\n    public Object getAWSystemService(@NotNull String name, @Nullable Object systemService) {\n        return awDelegate.getAWSystemService(name, systemService);\n    }\n\n    // Methods that return void could follow this as a template:\n    @Override\n    public void attachBaseContext(@NotNull android.app.Application application) {\n        awDelegate.attachBaseContext(application);\n    }\n\n\n\n    // ... Many more overrides here.\n}\n</code></pre>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#initialization-by-delegation-in-kotlin","title":"Initialization by delegation in Kotlin","text":"<p>In Kotlin, the class could look like this:</p> <pre><code>// This class uses Kotlin delegation to implement the AWSDKApplication\n// interface.  \n// A new AWSDKApplicationDelegate instance is allocated on the fly as the\n// delegate. For background on Kotlin delegation, see:\n// https://kotlinlang.org/docs/reference/delegation.html\nopen class Application:\n    android.app.Application(),\n    AWSDKApplication by AWSDKApplicationDelegate()\n{\n    // Android Application overrides for integration.\n    override fun onCreate() {\n        super.onCreate()\n        onCreate(this)\n    }\n\n    override fun getSystemService(name: String): Any? {\n        return getAWSystemService(name, super.getSystemService(name))\n    }\n\n    override fun attachBaseContext(base: Context?) {\n        super.attachBaseContext(base)\n        attachBaseContext(this)\n    }\n\n    // Application-specific overrides.\n    override fun onPostCreate() {\n        // Code from the application's original onCreate() would go here.\n    }\n\n    override fun getMainActivityIntent(): Intent {\n        // Replace MainActivity with application's original main activity.\n        return Intent(applicationContext, MainActivity::class.java)\n    }\n}\n</code></pre>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#next","title":"Next","text":"<p>This completes initialization from an Android Application subclass. Now continue with the next step, which is to [configure the initialization class in the manifest].</p>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#create-an-initialization-subclass-by-extension","title":"Create an initialization subclass by extension","text":"<p>Follow these instructions to create a Framework initialization AWApplication subclass. This is an alternative to initialising from an Android Application subclass. See [Select initialization class] for a discussion of the alternatives.</p> <p>Add to your application code a new class that:</p> <ul> <li>Is declared as an AWApplication subclass.</li> <li>Overrides the getMainActivityIntent() method to return an Intent for the     application's main Activity.</li> <li>Implements the other required methods with dummies.</li> </ul> <p>In Java, the class could look like this:</p> <pre><code>// Note the fully qualified class name in the extends declaration.\npublic class AWApplication extends com.airwatch.app.AWApplication {\n    @NotNull\n    @Override\n    public Intent getMainActivityIntent() {\n        return new Intent(getApplicationContext(), MainActivity.class);\n    }\n\n    @Override\n    public void onSSLPinningRequestFailure(\n            @NotNull String host, X509Certificate x509Certificate\n    ) {\n    }\n\n    @Override\n    public void onSSLPinningValidationFailure(\n            @NotNull String host, X509Certificate x509Certificate\n    ) {\n    }\n}\n</code></pre> <p>In Kotlin, the class could look like this:</p> <pre><code>// Note the fully qualified base class name.\nopen class AWApplication: com.airwatch.app.AWApplication() {\n    override fun getMainActivityIntent(): Intent {\n        return Intent(applicationContext, MainActivity::class.java)\n    }\n\n    override fun onSSLPinningRequestFailure(\n        host: String,\n        serverCACert: X509Certificate?\n    ) {\n    }\n\n    override fun onSSLPinningValidationFailure(\n        host: String,\n        serverCACert: X509Certificate?\n    ) {\n    }\n\n}\n</code></pre> <p>This completes the creation of an initialization subclass. Now continue with the next step, which is to [configure the initialization class in the manifest].</p>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#configure-the-initialization-class-in-the-manifest-configure-the-initialization-class-in-the-manifest","title":"Configure the initialization class in the manifest [configure the initialization class in the manifest]","text":"<p>Follow these instructions to configure your selected initialization class in the Android manifest. The initialization class will be either the existing Android Application subclass, or a new AWApplication subclass that was just created. See [Select initialization class] for a discussion of the alternatives.</p> <p>Proceed as follows.</p> <ol> <li> <p>Add the Android schema tools.</p> <p>The tools can be added at the top of the file, in the manifest tag, for example like this:</p> <pre><code>&lt;manifest\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.integrationguide\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    &gt;\n</code></pre> </li> <li> <p>Update the application declaration.</p> <p>The application declaration must be updated to:</p> <ul> <li>Declare an application class name, if it wasn't already declared.</li> <li>Replace the label.</li> <li>Override the allowBackup flag with the setting from the SDK manifest.</li> </ul> <p>These updates can be made in the application tag, for example like this:</p> <pre><code>&lt;application\n    android:name=\".YourApplicationOrAWApplicationSubClass\"\n    android:label=\"@string/app_name\"\n    ...\n    tools:replace=\"android:label, android:allowBackup, android:networkSecurityConfig\"\n    &gt;\n</code></pre> </li> <li> <p>Set the launcher and main Activity to be from the Framework.</p> <p>If the application had a previous declaration for launcher and main Activity, remove it. Instead, declare the Framework SDKSplashActivity as launcher and main.</p> <p>New declarations could look like this, for example:</p> <pre><code>&lt;activity\n    android:name=\".MainActivity\"\n    &gt;\n    &lt;!-- Original launcher and main declarations removed. --&gt;\n&lt;/activity&gt;\n&lt;activity\n    android:name=\"com.airwatch.login.ui.activity.SDKSplashActivity\"\n    android:label=\"@string/app_name\"\n    &gt;\n    &lt;intent-filter&gt;\n        &lt;action android:name=\"android.intent.action.MAIN\" /&gt;\n        &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;\n    &lt;/intent-filter&gt;\n&lt;/activity&gt;\n</code></pre> </li> <li> <p>From SDK 23.04 onwards, application need not add implementation for AirWatchSDKBaseIntentService, and must be removed while upgrading SDK.</p> </li> <li> <p>Declare the required permission.</p> </li> </ol> <p>If your app targets Android 13 or higher, then in order to see notifications declare the    below permission in your app's manifest file if not present already.    developer.android.com/...13/...#notification-permission</p> <pre><code>   &lt;uses-permission android:name=\"android.permission.POST_NOTIFICATIONS\"/&gt;\n</code></pre> <p>This completes the initialization class configuration.</p>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#request-the-required-permissions","title":"Request the required Permissions","text":"<p>If your app targets Android 13 or higher, request the new notification permission from your app's MainActivity if not requested already. developer.android.com/...13/...#notification-permission</p> <p>Below is the code snippet, for example:</p> <pre><code>    private void setupPermissions() {\n        if(Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {\n            int permission = ContextCompat.checkSelfPermission(\n                this,\n                Manifest.permission.POST_NOTIFICATIONS\n            );\n\n            if (permission != PackageManager.PERMISSION_GRANTED) {\n                ActivityCompat.requestPermissions(\n                    this,\n                    new String[]{Manifest.permission.POST_NOTIFICATIONS},\n                    NOTIFICATION_REQ_CODE\n                );\n            }\n        }\n    }\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n\n        if (requestCode == NOTIFICATION_REQ_CODE){\n            if (grantResults.length == 0 || grantResults[0] != PackageManager.PERMISSION_GRANTED) {\n            toastHere(\"Notification Permission has been denied by user\");\n            } else {\n            toastHere(\"Notification Permission has been granted by user\");\n            }\n        }\n    }\n</code></pre> <p>This completes requesting the required permissions.</p>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#next-steps-nextstepsframeworkinitialization","title":"Next Steps [NextStepsFrameworkInitialization]","text":"<p>Build and run the application to confirm that no mistakes have been made.</p> <p>The Workspace ONE splash screen should be shown at launch, Other SDK screens might also be shown depending on the configuration in the management console. See the [Appendix: User Interface Screen Capture Images].</p> <p>After completing the above, you can proceed to:</p> <ul> <li>Networking integration.</li> <li>Branding integration.</li> <li>Integration of other framework features.</li> </ul> <p>See the respective documents in the Workspace ONE Integration Guide for Android set. An overview that includes links to all the guides in the set is available</p> <ul> <li> <p>in Markdown format, in the repository that also holds the sample code: https://github.com/vmware-samples/...IntegrationOverview.md</p> </li> <li> <p>in Portable Document Format (PDF), on the VMware website: https://developer.vmware.com/...IntegrationOverview.pdf</p> </li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#appendix-early-version-support","title":"Appendix: Early Version Support","text":"<p>The Workspace ONE SDK can be integrated with early versions of Android, by following some additional steps. Early versions here means back to 5.0 Android, which is API level 21. If your application won't support devices running early Android versions, skip the instructions in this section.</p> <p>To support early versions, change the build configuration to:</p> <ul> <li>Enable Multidex explicitly.</li> </ul> <p>To make the changes, proceed as follows.</p> <ol> <li> <p>Configure the build.</p> <p>In the application build.gradle file, in the <code>android</code> block, within the <code>defaultConfig</code> block, add the required settings, for example:</p> <pre><code>...\nandroid {\n    ...\n    defaultConfig {\n        ...\n        multiDexEnabled true\n        ...\n    }\n    ...\n}\n...\n</code></pre> </li> </ol> <p>This concludes the required changes to support early Android versions. Build the application to confirm that no mistakes have been made.</p> <p>In case the above changes don't seem to work, you can instead try the changes in the [Alternative Early Version Support] section, below.</p> <p>All being well, continue with other integration tasks.</p>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#alternative-early-version-support","title":"Alternative Early Version Support","text":"<p>The following code snippet shows an alternative approach to early version support to the above build configuration change. The alternative is to specify a conditional minimum SDK version, dependent on the build type.</p> <p>Use this approach in case the first approach doesn't work or isn't suitable for your app.</p> <pre><code>ext {\n\u00a0\u00a0\u00a0\u00a0minSdkVersion = 21\n}\nandroid {\n    defaultConfig {\n        minSdkVersion getMinSDK()\n    }\n}\nbuildTypes {\n    release {\n        minifyEnabled true\n        signingConfig signingConfigs.debug\n    }\n}\ndef getMinSDK() {\n\u00a0\u00a0\u00a0\u00a0if (gradle.startParameter.taskNames.toString().contains(\"Debug\")) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 23\n\u00a0\u00a0\u00a0\u00a0} else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return minSdkVersion\n\u00a0\u00a0\u00a0\u00a0}\n}\n</code></pre>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#early-version-support-build-error","title":"Early Version Support Build Error","text":"<p>If early version support is required but hasn't been implemented, error messages like the following will be shown at build time.</p> <pre><code>Caused by: com.android.tools.r8.utils.AbortException: Error: null, \nCannot fit requested classes in the main-dex file (# methods: 66121 &gt; 65536)\nCaused by: java.lang.RuntimeException:\ncom.android.builder.dexing.DexArchiveMergerException: Error while merging dex archives\n</code></pre> <p>To resolve the error, make the build configuration changes at the start of this [Appendix: Early Version Support].</p>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#background-reading-for-early-version-support","title":"Background Reading for Early Version Support","text":"<p>For background, see these pages on the Android developer website.</p> <ul> <li>Multidex: https://developer.android.com/...multidex#mdex-on-l</li> </ul> <p>(Some PDF viewers incorrectly escape the hash anchor marker in the above links. If that happens, edit the link in the browser address bar.)</p>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#appendix-user-interface-screen-capture-images","title":"Appendix: User Interface Screen Capture Images","text":"<p>The following images show screens that are part of the Workspace ONE SDK user interface.</p> <p></p> <p></p> <p>The splash screen should be shown during every launch of an application that is integrated to the Framework level. The login screen might be shown afterwards, depending on the application state and the configuration in the management console.</p>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#appendix-troubleshooting","title":"Appendix: Troubleshooting","text":""},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#kotlin-compatibility","title":"Kotlin Compatibility","text":"<p>Occasionally, one may encounter an exception containing the message \"Class 'kotlin.Unit' was compiled with an  incompatible version of Kotlin. The binary version of its metadata is 1.7.1, expected version is  1.5.1.\" during compilation. This exception is due to incompatible versions of your app with the  Workspace One SDK. As of Release 23.03, all apps consuming WS1 will be required to use Kotlin v1.7.1 or higher. </p>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#empty-response-from-airwatch-mdm-service","title":"Empty Response from AirWatch MDM Service","text":"<p>Occasionally, one may encounter the message \"Empty Response from Airwatch MDM Service\"  in the adb log during app integration into Workspace ONE. This error message is triggered  when the app was not installed via Intelligent Hub. </p> <p>To resolve this error, it is recommended to upload the APK to the UEM once, then install the  app through Intelligent Hub. </p> <p>For detailed instructions please refer to the Integration Preperation Guide, specifically </p> <p>Appendix: How to upload an Android application to the management console  - as Markdown: Preperation Guide - Appendix: How to upload an Android application to the management console  - as PDF: Preperation Guide - Appendix: How to upload an Android application to the management console </p> <p>and </p> <p>Task: Install application via Workspace ONE  - as Markdown: Preparation Guide - Task: Install application via Workspace ONE  - as PDF: Preparation Guide - Task: Install application via Workspace ONE </p> <p>Once the APK has been uploaded to the UEM and installed via Workspace ONE, the app can then  be subsequently side-loaded by the ABD provided the side load is signed by the same developer  key as the original upload. To ensure your APK is signed on every build please refer to the  Preperation Guide, specifically </p> <p>Appendix: How to generate a signed Android package every build  - as Markdown Preparation Guide - How to generate a signed Android package every build  - as PDF: Preparation Guide - How to generate a signed Android package every build </p>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#document-information","title":"Document Information","text":""},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#published-locations","title":"Published Locations","text":"<p>This document is available</p> <ul> <li> <p>in Markdown format, in the repository that also holds the sample code: https://github.com/vmware-samples/...BaseIntegration.md</p> </li> <li> <p>in Portable Document Format (PDF), on the VMware website: https://developer.vmware.com/...BaseIntegration.pdf</p> </li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#revision-history","title":"Revision History","text":"Date Revision 03jul2020 First publication, for 20.4 SDK for Android. 31jul2020 to 09dec2021 Updated for 20.7 to 21.11 SDK for Android releases. 26Jan2022 Update for 22.1 SDK for Android. 28Feb2022 Update for 22.2 SDK for Android. 04Apr2022 Updated for 22.3 SDK for Android. 29Apr2022 Updated for 22.4 SDK for Android. 06Jun2022 Updated for 22.5 SDK for Android. 05Jul2022 Updated for 22.6 SDK for Android. 23Aug2022 Updated for 22.8 SDK for Android. 04Nov2022 Updated for 22.10 SDK for Android. 13Dec2022 Updated for 22.11 SDK for Android. 25Jan2023 Updated for 23.01 SDK for Android. 15Mar2023 Updated for 23.03 SDK for Android. 27Apr2023 Updated for 23.04 SDK for Android. 06Jun2023 Updated for 23.06 SDK for Android. 24Jul2023 Updated for 23.07 SDK for Android. 07Sep2023 Updated for 23.09 SDK for Android. 25Oct2023 Updated for 23.10 SDK for Android. 18Dec2023 Updated for 23.12 SDK for Android. 25Jan2024 Updated for 24.01 SDK for Android."},{"location":"IntegrationGuideforAndroid/Guides/03BaseIntegration/WorkspaceONE_Android_BaseIntegration/#legal","title":"Legal","text":"<ul> <li>VMware LLC 3401 Hillview Avenue Palo Alto CA 94304 USA     Tel 877-486-9273 Fax 650-427-5001 www.vmware.com</li> <li>Copyright \u00a9 2024 VMware LLC All rights reserved.</li> <li>This content is protected by U.S. and international copyright and     intellectual property laws. VMware products are covered by one     or more patents listed at     https://www.vmware.com/go/patents.     VMware is a registered trademark or trademark of VMware LLC and its     subsidiaries in the United States and other jurisdictions. All other marks     and names mentioned herein may be trademarks of their respective companies.</li> <li>The Workspace ONE Software Development Kit integration samples are     licensed under a two-clause BSD license.     SPDX-License-Identifier: BSD-2-Clause</li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/","title":"Branding Integration Guide","text":""},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#workspace-one-for-android","title":"Workspace ONE for Android","text":"<p>Android applications can be integrated with the VMware Workspace ONE\u00ae platform, by using its mobile software development kit. Complete the tasks below to utilize the branding features of the platform.</p> <p>This document is part of the Workspace ONE Integration Guide for Android set.</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#table-of-contents","title":"Table of Contents","text":"<p>{{TOC}}</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#introduction","title":"Introduction","text":"<p>The Workspace ONE platform supports the following types of branding.</p> <ul> <li>Static application branding.</li> <li>Enterprise branding.</li> <li>Dynamic branding.</li> </ul> <p>For a quick overview of the elements that can be branded in the Workspace ONE user interface, see the [Splash Screen] and [Login Screen] images in the appendix to this document. The images are annotated to show brand elements in the SDK user interface.</p> <p>This guide also covers the following independent branding options.</p> <ul> <li>Dark mode configuration.</li> <li>Notification icon.</li> </ul> <p>Branding is implemented by the following platform components:</p> <ul> <li>Workspace ONE Unified Endpoint Manager (UEM) console.</li> <li>Workspace ONE mobile Software Development Kit (SDK).</li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#integration-tasks","title":"Integration Tasks","text":"<p>The tasks detailed below will integrate your Android application with the branding support of the Workspace ONE platform. The tasks you will complete depend on which branding features are required.</p> <ul> <li> <p>Static application branding.</p> <p>Branding colors and images to be applied by the SDK can be configured in the application code. This is static application branding. Static application branding is built on the Android resources system.</p> <p>To add static application branding to your application, follow the [Implement Static Application Branding] instructions.</p> </li> <li> <p>Enterprise branding support.</p> <p>Branding colors and images for mobile applications can be configured in the UEM. This is enterprise branding. The enterprise branding configuration from the UEM gets applied by the SDK to its own user interface elements, such as the splash screen and the login screen.</p> <p>Adding support for enterprise branding to an application is only a small amount of work for the developer, see [Support Enterprise Branding].</p> </li> <li> <p>Dynamic Branding.</p> <p>Branding colors and images to be applied by the SDK can be provided at run time by the application code. This is dynamic branding. Dynamic branding requires implementation of a branding manager interface in the application code.</p> <p>Dynamic branding offers the most flexibility to the application developer. To add dynamic branding to your application, follow the [Implement Dynamic Branding] instructions.</p> </li> <li> <p>Dark mode configuration.</p> <p>The SDK user interface supports Android dark mode. The SDK will select dark mode according to configuration from the application code.</p> <p>This is an independent branding option, separate to the other branding features. To use this option, follow the [Configure Dark Mode Selection] instructions.</p> </li> <li> <p>Notification icon.</p> <p>The application code can provide a small icon for the SDK to apply to notifications that it posts, for example in the device status bar.</p> <p>This is an independent branding option, separate to the other branding features. To use this option, follow the [Set a Notification Icon] instructions.</p> </li> </ul> <p>Some requirements analysis, leading to suggestions for which features to integrate in your application, may be found under [Use Cases]. Compatibility of these features with each other is discussed under [Branding Feature Compatibility]. </p> <p>Screen capture images, annotated to show the elements that can be branded in the Workspace ONE user interface, can be found in the [Splash Screen] and [Login Screen] images in the appendix to this document.</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#integration-guides","title":"Integration Guides","text":"<p>This document is part of the Workspace ONE Integration Guide for Android set.</p> <p>See other guides in the set for</p> <ul> <li>an introduction to SDK integration in general.</li> <li>details of the base integration tasks for the Framework integration level,     which must be done before the tasks in this document.</li> </ul> <p>An overview that includes links to all the guides is available</p> <ul> <li> <p>in Markdown format, in the repository that also holds the sample code: https://github.com/vmware-samples/...IntegrationOverview.md</p> </li> <li> <p>in Portable Document Format (PDF), on the VMware website: https://developer.vmware.com/...IntegrationOverview.pdf</p> </li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#compatibility","title":"Compatibility","text":"<p>Instructions in this document have been tested with the following software versions.</p> Software Version Workspace ONE SDK for Android 24.01 Workspace ONE management console 2306 Android Studio integrated development environment 2022.3.1"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#use-cases","title":"Use Cases","text":"<p>The following use cases can be read as a starting point for requirements analysis of branding.</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#use-case-customer-application","title":"Use Case: Customer Application","text":"<p>In some cases, a mobile application will be developed by a team at the same enterprise as its end users, and integrated with Workspace ONE. This type of application is referred to here as a customer application.</p> <p>The following questions can be discussed to help establish the branding requirements for a customer application.</p> <ul> <li> <p>What brand images should be shown in the SDK user interface when it appears     in the application?</p> <p>The answer could be one of the following, for example.</p> <ul> <li>No required images.</li> <li>The application's own images, if the application has a brand.</li> <li>The corporate logo, or other enterprise brand images.</li> <li>Image requirement is more complicated than any of the above.</li> </ul> </li> <li> <p>Are application branding resources configured in the management console?</p> <p>See the instructions for [how to configure enterprise branding] in the appendix to this document in case you need to check.</p> </li> <li> <p>If resources are configured, do they reflect the desired brand for the     application user interface?</p> </li> </ul> <p>If there are no required images, then the default SDK branding can be left in  place. There is no need to implement static, enterprise, nor dynamic branding.</p> <p>If the required images are from the enterprise's corporate brand, and they are configured in the console, then the suggested integration is to [Support Enterprise Branding]. This will be the least amount of work and maintenance for the application development team.</p> <p>If the required images are from the application's brand, then the suggested integration is to [Implement Static Application Branding]. That is also the suggested integration if the required images are from the enterprise's corporate brand, but they aren't configured in the console.</p> <p>If the image requirement is more complicated, then the suggested integration is to [Implement Dynamic Branding].</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#use-case-branded-partner-application","title":"Use Case: Branded Partner Application","text":"<p>In some cases, a mobile application will be developed by an Independent Software Vendor (ISV) or other third party, and integrated with the Workspace ONE SDK for use at more than one customer enterprise. This type of application is referred to here as a partner application.</p> <p>The typical partner application has its own brand, for example a logo that appears on the device home screen, app store, and elsewhere. The default integration would be to [Implement Static Application Branding]. You will need to obtain or create image files and other resources that reflect the application brand.</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#use-case-branded-partner-application-with-optional-override","title":"Use Case: Branded Partner Application with Optional Override","text":"<p>In some cases a branded partner application, as described above, is required to support overriding of its branding by some customer enterprises that deploy the application.</p> <p>For example, some customers might want to have their corporate logo shown instead of the application brand. Showing the corporate logo to end users might be felt to reinforce the association of the application with their employer.</p> <p>This option can be supported by doing both integrations: [Implement Static Application Branding] and [Support Enterprise Branding].</p> <p>Customers that want the override would configure their required logo as an application branding resource in their UEM console. See the instructions for [how to configure enterprise branding] in the appendix for the location of the configuration in the console.</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#other-use-cases-complex-branding-requirements","title":"Other Use Cases: Complex Branding Requirements","text":"<p>Some branding requirements are more complex than those covered by the above use cases. Some examples are:</p> <ul> <li>Generate brand images at run time.</li> <li>Change brand images without re-enrolment and without app upgrade on the     device.</li> <li>Retrieve resources from the management console after enrolment has started     but before completion, like the Workspace ONE Intelligent Hub.</li> </ul> <p>In these cases, the suggested integration is to [Implement Dynamic Branding].</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#branding-feature-compatibility","title":"Branding Feature Compatibility","text":"<p>The branding features are compatible with each other as follows.</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#static-application-branding-and-enterprise-branding","title":"Static application branding and enterprise branding","text":"<p>Your application can have both its own static branding resources, and support enterprise branding as an override. In that case, the SDK will apply one or other branding, as follows.</p> <ul> <li> <p>When the application starts for the first time after installation, the SDK     will apply the static application branding.</p> </li> <li> <p>When the UEM server has been contacted by the SDK and at least the     organizational group has been specified, the SDK will check whether     enterprise branding has been configured.</p> </li> <li> <p>If enterprise branding isn't configured, then the SDK will continue to     apply the static application branding.</p> </li> <li> <p>Otherwise, the SDK will retrieve the enterprise branding resources and     apply them going forwards.</p> </li> </ul> <p>The enterprise branding can be partial, omitting some configurable images or colors. The SDK will apply static application branding resources where a UEM resource is omitted.</p> <p>It can occur that enterprise branding resources are fetched and applied in the early stages of registration, but the end user then cancels, or registration isn't finalized for some other reason. In that case, enterprise branding will be applied next time the application starts.</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#dynamic-branding-and-other-types-of-branding","title":"Dynamic branding and other types of branding","text":"<p>A dynamic branding implementation can, at run time:</p> <ul> <li>Access static application resources.</li> <li>Access enterprise branding resources that have been retrieved from the UEM.</li> <li>Fetch custom branding resources from a server associated with the     application.</li> <li>Generate branding resources programmatically.</li> </ul> <p>The SDK will apply any or all of the above types of branding resources as directed by the dynamic branding implementation.</p> <p>Dynamic branding can be compatible with static branding and with enterprise branding, depending on how it is implemented.</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#independent-branding-options","title":"Independent branding options","text":"<p>The independent branding option implementations are compatible with static branding, enterprise branding, and dynamic branding.</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#integration-paths-diagram","title":"Integration Paths Diagram","text":"<p>The following diagram shows the tasks and options for integrating each of the branding features. Framework base integration is a prerequisite to branding integration.</p> <p></p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#task-implement-static-application-branding-implement-static-application-branding","title":"Task: Implement Static Application Branding [Implement Static Application Branding]","text":"<p>Implementing static application branding is an optional Workspace ONE platform integration task for Android application developers.</p> <p>Static application branding is configured in the application code, using Android resources. The configuration can include colors and images. If your application has static branding resources, the SDK will render the configured colors and images in its own user interface elements.</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#add-brand-resources-to-the-project","title":"Add brand resources to the project","text":"<p>First, add brand resources for colors and images to your Android Studio project. If you don't have final brand resources, you can create placeholders using the tools that come with Android Studio.</p> <ul> <li> <p>You can create simple image resources with the Image Asset Studio.</p> <p>Instructions can be found here: https://developer.android.com/studio/write/image-asset-studio#access</p> <p>The instructions in either of the following sections will help you create a suitable placeholder image.</p> <ul> <li>Create adaptive and legacy launcher icons.</li> <li>Create a notification icon.</li> </ul> <p>Save your image either in <code>res/drawable</code>, or in <code>res/mipmap</code> for example.</p> </li> <li> <p>You can configure color values in Android Studio.</p> <p>Instructions for [how to add a color resource to an Android application] can be found in the appendix to this document, if needed.</p> </li> </ul> <p>After adding your brand resources, you can move on to the next step.</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#static-style-configuration","title":"Static style configuration","text":"<p>Add references to your brand resources to the application styles configuration.</p> <p>The styles configuration can be opened as follows.</p> <ol> <li>Open your project in Android Studio.</li> <li>Under the application module, expand <code>res</code>, <code>values</code>, and then open the     <code>styles.xml</code> file.</li> </ol> <p>This snippet illustrates the configuration:</p> <pre><code>&lt;resources xmlns:tools=\"http://schemas.android.com/tools\"&gt;\n    &lt;style tools:override=\"true\" name=\"SDKBaseTheme\" parent=\"SDKVisionBaseTheme\"&gt;\n        &lt;item name=\"awsdkSplashBrandingIcon\"&gt;@mipmap/ic_splash&lt;/item&gt;\n        &lt;item name=\"awsdkLoginBrandingIcon\"&gt;@mipmap/ic_login&lt;/item&gt;\n        &lt;item name=\"awsdkApplicationColorPrimary\"&gt;@color/appLine&lt;/item&gt;\n    &lt;/style&gt;\n    &lt;!-- Other style definitions here. --&gt;\n&lt;/resources&gt;\n</code></pre> <p>Note the following:</p> <ul> <li> <p>The Android schema tools have been added, in the resources tag. The tools     enable override declarations in the rest of the configuration, to suppress     warnings.</p> </li> <li> <p>The style tag with name \"SDKBaseTheme\" holds the items the are relevant to     the SDK. The parent attribute must be set to \"SDKVisionBaseTheme\".</p> </li> </ul> <p>See also the [Splash Screen] and [Login Screen] images in the appendix to this document. The images are annotated to show brand elements in the SDK user interface.</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#static-style-configuration-item-tags","title":"Static style configuration item tags","text":"<p>Item tags within the base theme with the following names are relevant to the SDK.</p> <ul> <li> <p>awsdkSplashBrandingIcon</p> <p>Sets the image on the SDK splash screen, ic_splash in the mipmap resources in the above snippet.</p> </li> <li> <p>awsdkLoginBrandingIcon</p> <p>Sets the image on the SDK login screen, ic_login in the mipmap resources in the above snippet.</p> </li> <li> <p>awsdkApplicationColorPrimary</p> <p>Sets the color for certain user interface elements, for example:</p> <ul> <li>The progress bar on the splash screen.</li> <li>The background of the Next and Confirm navigations on the login     screen.</li> </ul> <p>In the above snippet, the color is set to the value of the color  resource <code>appLine</code>. That value could be defined in the <code>colors.xml</code> file, for example.</p> <p>This color will be overridden by the enterprise branding configuration, if specified.</p> </li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#next-steps-implementstaticapplicationbrandingnextsteps","title":"Next steps [ImplementStaticApplicationBrandingNextSteps]","text":"<p>This completes static application branding implementation. Build and run the application to confirm that your brand is displayed.</p> <p>Note that your application branding mightn't be applied to all screens in the enrolment and unlock interactions. This is true of screens whose Activity code is in the Hub application, such as the Single Sign-On login screen for example.</p> <p>Consider whether to support branding override by the enterprise.</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#enterprise-branding-considerations","title":"Enterprise Branding Considerations","text":"<p>Enterprise branding can override static application branding. This depends on the following factors.</p> <ul> <li> <p>If the application doesn't support enterprise branding, then its static     branding won't be overridden.</p> </li> <li> <p>If enterprise branding hasn't been configured in the UEM with which an     application instance is enrolled, then static branding won't be overridden.</p> </li> </ul> <p>Enterprise branding configurations can be changed by UEM administrators at any time. Changes are retrieved and applied by the SDK at run time, without the need for an application upgrade.</p> <p>If your application branding shouldn't be overridden:</p> <ul> <li> <p>Don't add support for enterprise branding.</p> <p>If support has already been added, then remove it. See [Support Enterprise Branding] for the code changes. In those instructions, either set the support flag to false instead of true, or you can remove the override because false is the default.</p> </li> <li> <p>Advise the appropriate system administrators, depending on your application     type.</p> <p>For a Customer Application, this could be your own IT department or helpdesk.</p> <p>For other application types, this would be all the customer enterprises that deploy the application.</p> <p>Application types are introduced in the [Use Cases] requirements analysis discussion.</p> </li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#task-set-a-notification-icon-set-a-notification-icon","title":"Task: Set a Notification Icon [Set a Notification Icon]","text":"<p>Setting a notification icon is an optional Workspace ONE platform integration task for Android application developers.</p> <p>Notification icon setting is implemented in the application code, using Android resources and a method override. If an icon is set, the SDK will apply it as the small icon to notifications that it posts, for example in the device status bar. The SDK posts a notification when, for example, authentication is required.</p> <p>If the application doesn't set a notification icon, the SDK applies a built-in Workspace ONE brand icon.</p> <p>See also the [Notification Icon Screen Capture] in the appendix.</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#add-notification-icon-resource","title":"Add notification icon resource","text":"<p>First, add a suitable resource for a notification icon to your Android Studio project. If you don't have final brand resources, you can create placeholders using the tools that come with Android Studio.</p> <p>If you are unfamiliar with Android notification icon requirements, these tips might help.</p> <ul> <li> <p>Use a simple, single-color graphic, on a transparent background, as your     notification icon.</p> </li> <li> <p>A typical representation is a small portable network graphics (PNG) format     file. The file could be in the project's resources, in the <code>res</code> <code>drawable</code>     directory, for example.</p> </li> </ul> <p>See the Android developer website for official guidance on notification design.</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#register-notification-resource","title":"Register notification resource","text":"<p>Register the notification icon resource, as follows.</p> <ul> <li> <p>Identify the class in which to register the icon, depending on framework     initialization mechanism:</p> <ul> <li>The Android Application subclass, if initialized by extension.</li> <li>The AWApplication subclass, if initialized by delegation.</li> </ul> <p>Either subclass could have been created as part of the Initialize Framework task in the Base Integration guide. See that guide for a discussion of the extension and delegation mechanisms.</p> </li> <li> <p>Override <code>getNotificationIcon</code> to be a method that returns the resource     identifier of the icon graphic.</p> </li> </ul> <p>See the following code snippets for examples. Note that the same code applies to the extension and delegation mechanisms.</p> <p>In Java, the override method could look like this:</p> <pre><code>@Override\npublic int getNotificationIcon() { return R.drawable.brand_logo_onecolour; }\n</code></pre> <p>In Kotlin, the override method could look like this:</p> <pre><code>override fun getNotificationIcon(): Int { return R.drawable.brand_logo_onecolour }\n</code></pre>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#next-steps-notificationiconnextsteps","title":"Next Steps [NotificationIconNextSteps]","text":"<p>This completes notification icon implementation.</p> <p>Test the changes by causing the SDK to post a notification. How to do this depends on the UEM configuration. In some deployments, power cycling the mobile device will trigger a notification that the application requires authentication.</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#task-configure-dark-mode-selection-configure-dark-mode-selection","title":"Task: Configure Dark Mode Selection [Configure Dark Mode Selection]","text":"<p>Configuring Android dark mode selection by the SDK is an optional Workspace ONE platform integration task for Android application developers. Dark mode is sometimes referred to as night mode.</p> <p>The SDK user interface supports dark mode. Depending on the application configuration and device settings, the SDK may select to display its user interface in dark mode. Dark mode selection configuration is implemented in the application code, by a method override.</p> <p>By default, if the application doesn't configure dark mode selection, the SDK user interface won't be displayed in dark mode.</p> <p>For details of dark mode, see this page on the Android developer website: https://developer.android.com/guide/topics/ui/look-and-feel/darktheme</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#determine-required-dark-mode-selection","title":"Determine required dark mode selection","text":"<p>First, determine what dark mode selection is required by your application.</p> <p>Your application might support device dark mode selection, for example by applying one of the Android application compatibility <code>DayNight</code> themes to its user interface. In that case, the requirement would be to follow the system selection.</p> <p>For other selections, see the Android developer website page mentioned above.</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#override-dark-mode-selection-method","title":"Override dark mode selection method","text":"<p>Override the dark mode selection method, as follows.</p> <ul> <li> <p>Identify the class in which to configure dark mode selection by the SDK,     depending on framework initialization mechanism:</p> <ul> <li>The Android Application subclass, if initialized by extension.</li> <li>The AWApplication subclass, if initialized by delegation.</li> </ul> <p>Either subclass could have been created as part of the Initialize Framework task in the Base Integration guide. See that guide for a discussion of the extension and delegation mechanisms.</p> </li> <li> <p>Override <code>getNightMode</code> to be a method that returns the dark mode selection     to be made by the SDK. The SDK supports the <code>MODE_NIGHT_</code> values documented     on the Android developer website.</p> </li> </ul> <p>See the following code snippets for examples. Note that the same code applies to the extension and delegation mechanisms.</p> <p>In Java, the override method could look like this:</p> <pre><code>@Override\npublic int getNightMode() { return AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM; }\n</code></pre> <p>In Kotlin, the override method could look like this:</p> <pre><code>override fun getNightMode(): Int { return AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM }\n</code></pre>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#next-steps-darkmodenextsteps","title":"Next Steps [DarkModeNextSteps]","text":"<p>This completes dark mode selection configuration.</p> <p>Test the changes by making different dark mode selections in the device settings and checking that the SDK user interface display is as required.</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#task-support-enterprise-branding-support-enterprise-branding","title":"Task: Support Enterprise Branding [Support Enterprise Branding]","text":"<p>Supporting enterprise branding is an optional Workspace ONE platform integration task for Android application developers.</p> <p>Enterprise branding is configured in the management console. The configuration can include colors and images. Instructions for [how to configure enterprise branding] can be found in the appendix to this document, if needed.</p> <p>If your application supports enterprise branding, the SDK will render the configured colors and images in its own user interface elements.</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#set-the-enterprise-branding-support-flag","title":"Set the enterprise branding support flag","text":"<p>You support enterprise branding by setting a flag that the SDK reads. Proceed as follows.</p> <ul> <li> <p>Identify the class in which to set the flag, depending on framework     initialization mechanism:</p> <ul> <li>The Android Application subclass, if initialized by extension.</li> <li>The AWApplication subclass, if initialized by delegation.</li> </ul> <p>Either subclass could have been created as part of the Initialize Framework task in the Base Integration guide. See that guide for a discussion of the extension and delegation mechanisms.</p> </li> <li> <p>Override <code>isInputLogoBrandable</code> to be a method that always returns <code>true</code>.</p> </li> </ul> <p>See the following code snippets for examples. Note that the same code applies to the extension and delegation mechanisms.</p> <p>In Java, the override method could look like this:</p> <pre><code>@Override\npublic boolean isInputLogoBrandable() { return true; }\n</code></pre> <p>In Kotlin, the override method could look like this:</p> <pre><code>override fun isInputLogoBrandable(): Boolean { return true }\n</code></pre>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#next-steps-supportenterprisebrandingnextsteps","title":"Next steps [SupportEnterpriseBrandingNextSteps]","text":"<p>This completes support for enterprise branding.</p> <p>Test the changes by installing the application on a device and enrolling with a UEM that has enterprise branding configured.</p> <p>See the appendix to this document for:</p> <ul> <li>Instructions for [how to configure enterprise branding], if needed.</li> <li>Annotated [Splash Screen] and [Login Screen] images that show where     configurable elements appear in the SDK user interface.</li> <li>Instructions for [how to reset application state], which could be used to     force the SDK to replay some interactions in which brand resources appear.</li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#task-implement-dynamic-branding-implement-dynamic-branding","title":"Task: Implement Dynamic Branding [Implement Dynamic Branding]","text":"<p>Implementing dynamic branding is an optional Workspace ONE platform integration task for Android application developers.</p> <p>Dynamic branding is implemented as a programming interface from the application code. The SDK will call methods in the programming interface as needed to apply branding to its user interface. The dynamic branding programming interface can be written in Java or Kotlin.</p> <p>To implement dynamic branding, you create an object that implements the BrandingManager interface, and then register it with the SDK. Your implementation can, depending on your branding requirements, make use of enterprise branding resources from the UEM.</p> <p>Follow these instructions to create a skeleton dynamic branding manager that can be the starting point for your own implementation.</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#create-a-branding-manager-object-with-access-to-enterprise-branding","title":"Create a branding manager object with access to enterprise branding","text":"<p>Add a class to your application that:</p> <ul> <li> <p>Declares that it implements the interface:     com.airwatch.login.branding.BrandingManager</p> </li> <li> <p>Delegates implementation of all methods in the interface to a property of     type:     com.airwatch.login.branding.DefaultBrandingManager</p> <p>The DefaultBrandingManager constructor isn't documented here but examples of its instantiation are given below.</p> </li> <li> <p>Facilitates creation of an instance of the required property.</p> </li> <li> <p>Is a singleton class.</p> </li> </ul> <p>See the following code snippets for examples.</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#java-branding-manager-class","title":"Java Branding Manager Class","text":"<p>In Java, the code could look like this:</p> <pre><code>class BrandingManager implements com.airwatch.login.branding.BrandingManager\n{\n    static DefaultBrandingManager createDefaultBrandingManager(\n        android.app.Application application\n    ) {\n        return new DefaultBrandingManager(\n            SDKContextManager.getSDKContext().getSDKConfiguration(),\n            new SDKDataModelImpl(application.getApplicationContext()),\n            application.getApplicationContext(),\n            true\n        );\n    }\n\n    private static BrandingManager instance = null;\n    public static BrandingManager getInstance(android.app.Application application) {\n        if (instance == null) {\n            instance = new BrandingManager(createDefaultBrandingManager(application));\n        }\n        return instance;\n    }\n    public static BrandingManager getInstance(android.app.Activity activity) {\n        return getInstance(activity.getApplication());\n    }\n    public static BrandingManager getInstance() { return instance; }\n\n    private BrandingManager(DefaultBrandingManager defaultBrandingManager) {\n        this.defaultBrandingManager = defaultBrandingManager;\n    }\n\n    private DefaultBrandingManager defaultBrandingManager;\n    public DefaultBrandingManager getDefaultBrandingManager() {\n        return this.defaultBrandingManager;\n    }\n\n    @Override\n    public void applyBranding(android.app.Activity activity) {\n        defaultBrandingManager.applyBranding(activity);\n    }\n\n    @Override\n    public void applyBranding(AWInputField inputField) {\n        defaultBrandingManager.applyBranding(inputField);\n    }\n\n    @Override\n    public void brandLoadingScreenLogo(BrandingCallBack callback) {\n        defaultBrandingManager.brandLoadingScreenLogo(callback);\n    }\n\n    @Override\n    public void brandInputScreenLogo(BrandingCallBack callback) {\n        defaultBrandingManager.brandInputScreenLogo((callback));\n    }\n\n    @Override\n    public Integer getPrimaryColor() {\n        return defaultBrandingManager.getPrimaryColor();\n    }\n\n    @Override\n    public void applyBranding(AWNextActionView nextActionView) {\n        defaultBrandingManager.applyBranding(nextActionView);\n    }\n}\n</code></pre>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#kotlin-branding-manager-class","title":"Kotlin Branding Manager Class","text":"<p>In Kotlin, the code could look like this:</p> <pre><code>open class BrandingManager private constructor (\n    val defaultBrandingManager: DefaultBrandingManager\n) : com.airwatch.login.branding.BrandingManager by defaultBrandingManager\n{\n    companion object {\n        // Helper function.\n        fun createDefaultBrandingManager(\n            application: android.app.Application\n        ): DefaultBrandingManager\n        {\n            return DefaultBrandingManager(\n                SDKContextManager.getSDKContext().sdkConfiguration,\n                SDKDataModelImpl(application.applicationContext),\n                application.applicationContext,\n                true\n            )\n        }\n\n        // Singleton business.\n        private var instance: BrandingManager? = null\n        fun getInstance(application: android.app.Application):BrandingManager {\n            return instance ?:\n            BrandingManager(createDefaultBrandingManager(application)).also {\n                instance = it\n            }\n        }\n        fun getInstance(activity: android.app.Activity):BrandingManager {\n            return getInstance(activity.application)\n        }\n        fun getInstance():BrandingManager? {\n            return instance\n        }\n    }\n}\n</code></pre>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#register-the-branding-manager","title":"Register the branding manager","text":"<p>Register your branding manager class from the previous instructions with the SDK as follows.</p> <ul> <li> <p>Identify the class in which to register the branding manager, depending on     framework initialization mechanism:</p> <ul> <li>Android Application subclass, if initialized by extension.</li> <li>AWApplication subclass, if initialized by delegation.</li> </ul> </li> <li> <p>Return the singleton instance of your branding manager from your override     for the method:     getBrandingManager()</p> </li> </ul> <p>(Note: The enterprise branding support flag is ignored if a branding manager is registered. See [Support Enterprise Branding] for usage of the flag.)</p> <p>See the following code snippets for examples. Note that the same code applies to the extension and delegation mechanisms.</p> <p>Java:</p> <pre><code>@NotNull\n@Override\npublic com.airwatch.login.branding.BrandingManager getBrandingManager() {\n    return BrandingManager.getInstance(this);\n}\n</code></pre> <p>Kotlin:</p> <pre><code>override fun getBrandingManager(): com.airwatch.login.branding.BrandingManager {\n    return BrandingManager.getInstance(this)\n}\n</code></pre> <p>Build and run the application after making these changes to check that no mistakes have been made.</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#implement-branding","title":"Implement branding","text":"<p>You are now ready to implement your own dynamic branding. Override the following methods in your BrandingManager implementation.</p> <ul> <li> <p>brandLoadingScreenLogo</p> <p>Provides the image that the SDK will show on the splash screen.</p> <p>Your method will receive as parameters a callback object and required dimensions, width and height in pixels. The callback object will have an onComplete method that you call to provide your Bitmap.</p> <p>There is also a method with the same name that receives only the callback object. The SDK will fall back to this method if your class doesn't implement the first method signature.</p> <p>For example, as shown in these snippets.</p> <p>Java code:</p> <pre><code>// Preferred, with dimensions.\n@Override\npublic void brandLoadingScreenLogo(BrandingCallBack callBack, int width, int height) {\n    callback.onComplete( yourBitmapReturningFunction(width, height) );\n}\n\n// Fallback, without dimensions.\n@Override\npublic void brandLoadingScreenLogo(BrandingCallBack callback) {\n    callback.onComplete( yourBitmapReturningFunction() );\n}\n</code></pre> <p>Kotlin code:</p> <pre><code>// Preferred, with dimensions.\noverride fun brandLoadingScreenLogo(callback: BrandingCallBack?, width: Int, height: Int) {\n    callback?.onComplete( yourBitmapReturningFunction(width, height) )\n}\n\n// Fallback, without dimensions.\noverride fun brandLoadingScreenLogo(callback: BrandingCallBack?) {\n    callback?.onComplete( yourBitmapReturningFunction() )\n}\n</code></pre> </li> <li> <p>brandInputScreenLogo</p> <p>Provides the image that the SDK will show on the login screen. The image is provided using the same callback mechanism as the previous method.</p> </li> <li> <p>getPrimaryColor</p> <p>Provides the color that the SDK will apply to certain user interface elements, for example, the progress bar on the splash screen.</p> <p>Return an Android Color value. For example, as shown in these snippets.</p> <p>Java code:</p> <pre><code>@Override\npublic Integer getPrimaryColor() { return Color.RED; }\n</code></pre> <p>Kotlin code:</p> <pre><code>override fun getPrimaryColor(): Int? { return Color.RED }\n</code></pre> </li> <li> <p>applyBranding</p> <p>For example, to set the background color of the Next and Confirm navigations on the login screen.</p> <p>Your method will receive as a parameter an object on which to call methods  in order to apply branding. You can first pass the object to the default branding manager, to apply a default. For example, as shown in these  snippets.</p> <p>Java code:</p> <pre><code>@Override\npublic void applyBranding(AWNextActionView nextActionView) {\n    // Apply default overall.\n    defaultBrandingManager.applyBranding(nextActionView);\n\n    // Apply a specific override.\n    nextActionView.setBackgroundColor(Color.RED);\n}\n</code></pre> <p>Kotlin code:</p> <pre><code>override fun applyBranding(nextActionView: AWNextActionView) {\n    // Apply default overall.\n    defaultBrandingManager.applyBranding(nextActionView)\n\n    // Apply a specific override.\n    nextActionView.setBackgroundColor(Color.RED)\n}\n</code></pre> </li> </ul> <p>This is an incomplete list but covers the main customizable brand resources.</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#apply-enterprise-branding-to-the-app-user-interface","title":"Apply enterprise branding to the app user interface","text":"<p>Enterprise branding resources from the UEM can be applied to the user interface of your application. (The preceding section deals with the opposite case, customizing the SDK user interface.)</p> <p>Access the image and color branding resources via an instance of: DefaultBrandingManager</p> <p>The code snippets under [Java Branding Manager Class] and [Kotlin Branding Manager Class] show how DefaultBrandingManager can be instantiated. DefaultBrandingManager implements the SDK BrandingManager interface and has the same methods listed in the preceding section.</p> <p>One use of UEM resources could be to show the splash screen logo in an Activity in the application, for example. The following snippets illustrate how that could be coded, in the onCreate method.</p> <p>The UEM resources can contain multiple branding images, of different sizes. DefaultBrandingManager will select the most suitable image resource based on the display characteristics of the device. Also, if a width and height are specified and the most suitable resource is too big, DefaultBrandingManager will scale it down to fit within the specified dimensions and preserve aspect ratio.</p> <p>Java:</p> <pre><code>// With specified width and height.\nBrandingManager.getInstance(this).getDefaultBrandingManager().brandLoadingScreenLogo( bitmap -&gt; {\n    ((ImageView)findViewById(R.id.imageViewEnterpriseLogo)).setImageBitmap(bitmap);\n}, width, height);\n\n// Without specified width and height.\nBrandingManager.getInstance(this).getDefaultBrandingManager().brandLoadingScreenLogo( bitmap -&gt; {\n    ((ImageView)findViewById(R.id.imageViewEnterpriseLogo)).setImageBitmap(bitmap);\n});\n</code></pre> <p>Kotlin:</p> <pre><code>// With specified width and height.\n BrandingManager.getInstance(this).defaultBrandingManager.brandLoadingScreenLogo({\n        findViewById&lt;ImageView&gt;(R.id.imageViewEnterpriseLogo).setImageBitmap(it)\n }, width, height)\n\n// Without specified width and height.\nBrandingManager.getInstance(this).defaultBrandingManager.brandLoadingScreenLogo {\n    findViewById&lt;ImageView&gt;(R.id.imageViewEnterpriseLogo).setImageBitmap(it)\n}\n</code></pre> <p>Another use of UEM resources could be to apply the primary color to some user interface elements. The color can be accessed via the getPrimaryColor method. The method returns null if a primary color isn't configured in the UEM.</p> <p></p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#next-steps-implementdynamicbrandingnextsteps","title":"Next steps [ImplementDynamicBrandingNextSteps]","text":"<p>This completes initial implementation of dynamic branding.</p> <p>Test the changes by installing the application on a device, perhaps enrolling with a UEM that has enterprise branding configured if you made use of enterprise branding resources.</p> <p>See the appendix to this document for:</p> <ul> <li>Instructions for [how to configure enterprise branding], if needed.</li> <li>Annotated [Splash Screen] and [Login Screen] images that show where     configurable elements appear in the SDK user interface.</li> <li>Instructions for [how to reset application state], which could be used to     force the SDK to replay some interactions in which brand resources appear.</li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#task-configure-android-12-splashscreen","title":"Task: Configure Android 12 Splashscreen","text":"<p>Android 12, enables a new launch animation with system splashscreen using application launcher icon. https://developer.android.com/develop/ui/views/launch/splash-screen</p> <p>To replace Android 12 splashscreen icon, override splash logo attribute, in <code>res/values-v31/styles.xml</code>. Splashscreen icon should be vector drawable, and must be sized as per the adaptive icon guideline for a smoother transition from Android 12 splashscreen to sdk splashscreen.</p> <p>This snippet illustrates the configuration:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;resources xmlns:tools=\"http://schemas.android.com/tools\"&gt;\n    &lt;style tools:override=\"true\" name=\"VisionTheme.System.SplashScreen\"\n           parent=\"VisionTheme.System.BaseSplashScreen\"&gt;\n        &lt;item name=\"splashLogo\"&gt;@drawable/ic_splash&lt;/item&gt;\n    &lt;/style&gt;\n    &lt;!-- Other style definitions here. --&gt;\n&lt;/resources&gt;\n</code></pre> <p>Above configuration is used to customize Android 12 splashscreen logo, and application should [Implement Static Application Branding] to setup static branding.</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#appendix-how-to-configure-enterprise-branding-in-the-management-console-how-to-configure-enterprise-branding","title":"Appendix: How to configure enterprise branding in the management console [how to configure enterprise branding]","text":"<p>You can configure enterprise branding in the Workspace ONE management console by following these instructions. These are provided here for application developer convenience and aren't intended to replace the system administrator user guides for the Workspace ONE product.</p> <p>For context of when these instructions would be followed, see [Support Enterprise Branding].</p> <ol> <li> <p>Open the Workspace ONE management console in a web browser and log in.</p> <p>This opens the dashboard.</p> </li> <li> <p>Select an organization group.</p> <p>By default, the Global group is selected.</p> </li> <li> <p>Navigate to: Groups &amp; Settings, All Settings, Apps, Settings and Policies,     Settings.</p> <p>This opens a configuration screen, on which a number of settings can be switched on and off, and configured.</p> </li> <li> <p>For the Branding setting, select Enabled.</p> <p>When Enabled is selected, further controls will be displayed.</p> </li> <li> <p>Use the controls to configure the enterprise branding.</p> <p>For example:</p> <ul> <li> <p>Upload images to all the Android Background Image slots. It is     recommended to use small image files, no more than 100kb in size.</p> <p>One of the images that you upload will appear on the SDK splash screen that is displayed when the application starts cold.</p> </li> <li> <p>Upload images to all the Android Company Logo Phone and Tablet slots. It     is recommended to use small image files, no more than 100kb in size.</p> <p>One of the images that you upload will appear on the SDK login screen that is displayed when, for example, the end user sets a passcode after registration.</p> </li> <li> <p>Set the Primary Color value.</p> <p>The progress bar on the SDK splash screen will be the color that you set.</p> <p>The background of, for example, the Next and Confirm navigation controls in the set passcode interaction will be the color that you set.</p> </li> </ul> </li> <li> <p>Select Save to commit your changes to the configuration.</p> </li> </ol> <p>See also the console user interface screen capture, below.</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#console-user-interface-screen-capture","title":"Console User Interface Screen Capture","text":"<p>The following screen capture shows configuration of enterprise brand colors in the management console. Configuration of brand images would be accessed by scrolling down in the same location.</p> <p></p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#appendix-branding-elements-on-the-splash-screen-splash-screen","title":"Appendix: Branding elements on the splash screen [Splash Screen]","text":"<p>The following screen capture shows brand elements in the SDK splash screen.</p> <p></p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#appendix-branding-elements-on-the-login-screen-login-screen","title":"Appendix: Branding elements on the login screen [Login Screen]","text":"<p>The following screen capture shows brand elements in the SDK login screen.</p> <p></p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#appendix-notification-icon-notification-icon-screen-capture","title":"Appendix: Notification Icon [Notification Icon Screen Capture]","text":"<p>The following screen captures show the notification icon that can be branded.</p> <p></p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#appendix-how-to-reset-application-state-how-to-reset-application-state","title":"Appendix: How to reset application state [how to reset application state]","text":"<p>You can reset an application to its just-installed state by following these instructions. Some SDK user interactions only take place once per installation. In case you are testing the appearance of a branding resource in one of those interactions, resetting the application might force the SDK to show that interaction.</p> <ol> <li> <p>Open the App Info screen for the application whose data you want to reset.</p> <p>For example, do one of the following.</p> <ul> <li>From the device home screen, long press the application icon and then     select App info in the context menu that appears.</li> <li>Open the device Settings and search for the application by its long     name. (The long name isn't necessarily the same as the package     identifier.)</li> <li>Open the device Settings and navigate to Apps and notifications, then     select the application from the recent list, or from the all list.</li> </ul> </li> <li> <p>Select Storage &amp; cache.</p> <p>This opens the Storage management screen for the application.</p> </li> <li> <p>Select to Clear Storage, and confirm this if prompted.</p> </li> </ol> <p>All application data has now been deleted and the SDK instance will have been reset to the just-installed state.</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#appendix-how-to-add-a-color-resource-to-an-android-application-how-to-add-a-color-resource-to-an-android-application","title":"Appendix: How to add a color resource to an Android application [how to add a color resource to an Android application]","text":"<p>You can configure color resources in Android Studio by following these instructions. These are provided here for convenience; for definitive information, see the Android developer website.</p> <ol> <li> <p>Open your project in Android Studio.</p> </li> <li> <p>Under the application module, expand <code>res</code>, <code>values</code>, and then open the     <code>colors.xml</code> file.</p> </li> <li> <p>Add a new <code>&lt;color&gt;</code> item inside the <code>&lt;resources&gt;</code>.</p> </li> <li> <p>Set the <code>name</code> attribute, which you will need later.</p> </li> <li> <p>Enter an initial hexadecimal value inside the item tags. For example:</p> <pre><code>&lt;color name=\"appLine\"&gt;#000000&lt;/color&gt;\n</code></pre> </li> <li> <p>Click the coloured square that appears in the left margin of the editor,     next to the line number.</p> <p>This opens a color picker control, populated with the current color.</p> </li> <li> <p>Click or enter a color in the picker and it will overwrite the value in the     tag.</p> </li> <li> <p>Close the picker by clicking anywhere outside it in the editor.</p> </li> </ol> <p>Save the file and the color will have been added to the application resources.</p>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#document-information","title":"Document Information","text":""},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#published-locations","title":"Published Locations","text":"<p>This document is available</p> <ul> <li> <p>in Markdown format, in the repository that also holds the sample code: https://github.com/vmware-samples/...Branding.md</p> </li> <li> <p>in Portable Document Format (PDF), on the VMware website: https://developer.vmware.com/...Branding.pdf</p> </li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#revision-history","title":"Revision History","text":"Date Revision 03jul2020 First publication, for 20.4 SDK for Android. 31jul2020 to 09dec2021 Updated for 20.7 to 21.11 SDK for Android releases. 26Jan2022 Updated for 22.1 SDK for Android. 28Feb2022 Updated for 22.2 SDK for Android. 04Apr2022 Updated for 22.3 SDK for Android. 29Apr2022 Updated for 22.4 SDK for Android. 06Jun2022 Updated for 22.5 SDK for Android. 05Jul2022 Updated for 22.6 SDK for Android. 23Aug2022 Updated for 22.8 SDK for Android. 04Nov2022 Updated for 22.10 SDK for Android. 13Dec2022 Updated for 22.11 SDK for Android. 25Jan2023 Updated for 23.01 SDK for Android. 15Mar2023 Updated for 23.03 SDK for Android. 27Apr2023 Updated for 23.04 SDK for Android. 06Jun2023 Updated for 23.06 SDK for Android. 24Jul2023 Updated for 23.07 SDK for Android. 07Sep2023 Updated for 23.09 SDK for Android. 25Oct2023 Updated for 23.10 SDK for Android. 18Dec2023 Updated for 23.12 SDK for Android. 25Jan2024 Updated for 24.01 SDK for Android."},{"location":"IntegrationGuideforAndroid/Guides/04Branding/WorkspaceONE_Android_Branding/#legal","title":"Legal","text":"<ul> <li>VMware LLC 3401 Hillview Avenue Palo Alto CA 94304 USA     Tel 877-486-9273 Fax 650-427-5001 www.vmware.com</li> <li>Copyright \u00a9 2024 VMware LLC All rights reserved.</li> <li>This content is protected by U.S. and international copyright and     intellectual property laws. VMware products are covered by one     or more patents listed at     https://www.vmware.com/go/patents.     VMware is a registered trademark or trademark of VMware LLC and its     subsidiaries in the United States and other jurisdictions. All other marks     and names mentioned herein may be trademarks of their respective companies.</li> <li>The Workspace ONE Software Development Kit integration samples are     licensed under a two-clause BSD license.     SPDX-License-Identifier: BSD-2-Clause</li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/","title":"Privacy Agreement Module Integration Guide","text":""},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#workspace-one-for-android","title":"Workspace ONE for Android","text":"<p>VMware Workspace ONE\u00ae for Android can be used to present privacy agreements and track their acceptance by the end user. Presentation and tracking of agreements is handled by a separate privacy module in the software development kit for Android. Use of the module in an app isn't dependent on integration with the rest of the Workspace ONE platform.</p> <p>This document is part of the Workspace ONE Integration Guide for Android set.</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#table-of-contents","title":"Table of Contents","text":"<p>{{TOC}}</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#introduction","title":"Introduction","text":"<p>Privacy agreements are commonplace for enterprise applications on mobile devices. Enterprise end users typically must agree to some data collection and app permissions in order to make use of mobile apps.</p> <p>The VMware Workspace ONE privacy module for Android can be used to present privacy agreements and track their acceptance by the end user. Note that the privacy module doesn't itself collect data, protect the privacy of the user, nor protect application data.</p> <p>For an overview of privacy agreement configuration, see the  [Configuration Screen Capture Images] section.</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#features","title":"Features","text":"<p>The privacy agreements module supports the following types of agreement.</p> <ul> <li>Mandatory privacy agreement.</li> <li>Optional privacy agreement.</li> <li>Additional data sharing opt-in.</li> </ul> <p>The privacy module supports the following interactions.</p> <ul> <li>Accept the privacy agreement.</li> <li>Open a privacy policy web page.</li> <li>Opt in or out of additional data sharing.</li> <li>Check if the privacy agreement has been accepted before opening the app user     interface.</li> <li>Check if the privacy agreement has changed since it was accepted.</li> <li>Review the privacy agreement from within the app user interface.</li> <li>Revoke acceptance of the privacy agreement.</li> </ul> <p>The module is configurable, for example in the following aspects.</p> <ul> <li>Descriptions, titles, and clauses in the privacy agreement are configurable.<ul> <li>An icon can be configured for each clause in the agreement.</li> </ul> </li> <li>A privacy policy web address can be configured, if required.</li> <li>The additional data sharing opt-in, if required, can be configured.</li> </ul> <p>For an overview of privacy agreement configuration, see the  [Configuration Screen Capture Images] section.</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#integration-guides","title":"Integration Guides","text":"<p>This document is part of the Workspace ONE Integration Guide for Android set.</p> <p>See other guides in the set for an introduction to integration with the Workspace ONE platform.</p> <p>An overview that includes links to all the guides is available</p> <ul> <li> <p>in Markdown format, in the repository that also holds the sample code: https://github.com/vmware-samples/...IntegrationOverview.md</p> </li> <li> <p>in Portable Document Format (PDF), on the VMware website: https://developer.vmware.com/...IntegrationOverview.pdf</p> </li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#compatibility","title":"Compatibility","text":"<p>Instructions in this document have been followed with the Workspace ONE Software Development Kit (SDK) for Android and other software, to confirm compatibility.</p> Software Version Workspace ONE SDK for Android 24.01 Android Studio integrated development environment 2022.3.1 [Table 1: Software compatibility versions]"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#open-source-sample-code","title":"Open Source Sample Code","text":"<p>This document includes illustrative Kotlin code for some integration tasks. The code is taken from an Open Source sample application. You can use the code in the sample application as a starting point for your own implementation.</p> <p>The application is published in the Workspace ONE Software Development Kit Integration Samples repository. See: github.com/.../workspace-ONE-SDK-integration-samples/.../privacyKotlin</p> <p>You can download the application, or clone the whole repository. Build instructions are in the repository here: github.com/.../workspace-ONE-SDK-integration-samples/.../build.md</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#preparation","title":"Preparation","text":"<p>Before you begin integration of the privacy agreements module, you will need the following.</p> <ul> <li> <p>Developer environment.</p> <p>The instructions in the integration guide documents assume you use the Android Studio integrated developer environment (IDE). Check the [Compatibility] table for a recommended version.</p> </li> <li> <p>Developer device or emulator.</p> <p>You can use a physical Android device or the Android emulator to work on privacy module integration. Instructions for setting up a physical developer device, and for setting up emulated devices can be found on the Android developer website. See, for example, the following pages.</p> <ul> <li>Configure on-device developer options https://developer.android.com/studio/debug/dev-options.html</li> <li>Run apps on a hardware device https://developer.android.com/studio/run/device</li> <li>Create and manage virtual devices https://developer.android.com/studio/run/managing-avds</li> </ul> </li> <li> <p>Android application source code.</p> <p>Integrating the Workspace ONE privacy module will involve changes to the application source code. You will need access to the Java or Kotlin source, to the manifest and resources, and to any other files required to build the application.</p> <p>You can integrate Workspace ONE with an existing Android application of your own, or with an Android sample application, or start a new application from an Android Studio template, for example.</p> <p>The instructions in the integration guide documents assume your application uses AndroidX instead of the original support library. Instructions for migrating from the support library to AndroidX can be found on the Android developer website, for example here: https://developer.android.com/jetpack/androidx/migrate</p> </li> <li> <p>Workspace ONE SDK for Android.</p> <p>The privacy agreements module is distributed with the Workspace ONE SDK for Android.</p> <p>Instructions for obtaining the SDK are given in the Workspace ONE for Android Integration Preparation Guide, starting here: https://github.com/vmware-samples/...obtain-software-development-kit (Some PDF viewers incorrectly escape the hash anchor marker in the above link. If that happens, edit the link in the browser address bar.)</p> <p>The whole guide is available</p> <ul> <li> <p>in Markdown format, in the repository that also holds the sample code: https://github.com/vmware-samples/...IntegrationPreparation.md </p> </li> <li> <p>in Portable Document Format (PDF), on the VMware website: https://developer.vmware.com/...IntegrationPreparation.pdf </p> </li> </ul> <p>Go to the Task: Obtain software development kit.</p> </li> </ul> <p>This completes the preparation for integrating your Android application with the Workspace ONE privacy module. You are now ready to start the first [Task: Add the privacy module build configuration and files]</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#task-add-the-privacy-module-build-configuration-and-files","title":"Task: Add the privacy module build configuration and files","text":"<p>Adding the Workspace ONE privacy agreements module build configuration and files to your Android app is the first integration task.</p> <p>These instructions assume that your application has a typical project structure, as follows:</p> <ul> <li>Project files in the root directory.</li> <li>Application module in a sub-directory.</li> <li>Separate <code>build.gradle</code> files for the project and application.</li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#project-structure-diagram","title":"Project Structure Diagram","text":"<p>The following diagram illustrates the expected project directory structure, and the locations of changes to be made.</p> <p></p> <p>Tip: It might be easier to see the structure, and identify which Gradle file is which, in the Android Studio project navigator if you select the Project view, instead of the Android view.</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#software-development-kit-download-structure-diagram","title":"Software Development Kit Download Structure Diagram","text":"<p>The following diagram illustrates the directory structure of the SDK download. </p> <p></p> <p>Files from within the above structure are copied under your application project in the following instructions.</p> <p></p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#instructions","title":"Instructions","text":"<p>Proceed as follows.</p> <ol> <li> <p>Add the required libraries to the build.</p> <p>In the application build.gradle file, in the <code>dependencies</code> block, add references to the required libraries. (The library files will be copied in the next step.) For example:</p> <pre><code>dependencies {\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation ...\n    implementation ...\n\n    // Following lines are added to integrate the Workspace ONE privacy agreement module ...\n\n    // Workspace ONE libraries that are part of the SDK.\n    implementation(name: \"AWPrivacy-21.5.1\", ext: 'aar')\n    implementation(name: 'VisionUx-1.5.0.a', ext: 'aar')\n\n    // Third party libraries that are hosted remotely.\n    implementation 'com.google.android.material:material:1.1.0'\n\n    ...\n}\n</code></pre> <p>The location of this change is shown in the [Project Structure Diagram].</p> </li> <li> <p>Copy the required library files.</p> <p>The code snippet in the previous step indicates which libraries are part of the SDK.</p> <p>Files for those libraries can be found in the SDK distribution, under one or other of the <code>Libs</code> sub-directories or their <code>dependencies</code> sub-directories. See the [Software Development Kit Download Structure Diagram].</p> <p>Copy the files into your project, under the application module sub-directory, in the <code>libs</code> sub-directory. The location is shown in the [Project Structure Diagram]. If the sub-directory doesn't exist, create it now.</p> </li> <li> <p>Add the library files' location to the application build configuration.</p> <p>In the application build.gradle file, add a <code>repositories</code> block that specifies the location of the library file copies. For example:</p> <pre><code>repositories {\n    flatDir {\n        dirs 'libs'\n    }\n}\n</code></pre> <p>The location of this change is shown in the [Project Structure Diagram].</p> </li> </ol> <p>This completes the required changes to the build configuration. Build the application to confirm that no mistakes have been made. After that, continue with the next integration [Task: Add a consent check at application launch].</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#troubleshooting","title":"Troubleshooting","text":"<p>In case of difficulties with build integration, check the following troubleshooting tips.</p> <ul> <li> <p>Cannot find launch Activity.</p> <p>An error like this might be shown in the IDE console:</p> <pre><code>Unable to instantiate activity ComponentInfo{.../...MainActivity}:\njava.lang.ClassNotFoundException: Didn't find class \"...MainActivity\"\n</code></pre> <p>This might be resolved by specifying Java version 8 language features. You can do this by adding code like the following to the application build.gradle file.</p> <pre><code>android {\n\n    // ...\n\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n\n    kotlinOptions {\n        jvmTarget = \"1.8\"\n    }\n\n    // ...\n}\n</code></pre> </li> <li> <p>Dependencies.</p> <p>It might be necessary to add explicit dependencies such as the following.</p> <pre><code>implementation \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\nimplementation 'androidx.core:core-ktx:1.3.2'\nimplementation 'androidx.appcompat:appcompat:1.2.0'\nimplementation 'androidx.constraintlayout:constraintlayout:2.0.4'\n</code></pre> </li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#task-add-a-consent-check-at-application-launch","title":"Task: Add a consent check at application launch","text":"<p>Adding a consent check at application launch is a Workspace ONE privacy agreements integration task for Android application developers.</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#user-experience","title":"User Experience","text":"<p>These instructions assume that accepting the privacy agreement will be mandatory for end users of your app. This is the typical enterprise requirement. The user experience will therefore be as follows.</p> <ol> <li>The app is installed and launched for the first time.</li> <li>The privacy agreement is displayed.</li> <li>The user accepts the privacy agreement.</li> <li>The app's user interface is displayed.</li> <li>Later, after running other apps and maybe power cycling the device, the user     opens the app again.</li> <li>The privacy agreement isn't presented, because it has already been accepted.</li> <li>Instead, app's user interface is displayed straight away.</li> </ol> <p>By default, there is no way for the user to skip the privacy agreement and open the app user interface. If your app has some features that can be used without acceptance of the privacy agreement, you can allow rejection of the agreement. See the [Task: Configure Agreement Rejection] for instructions, but do this task first.</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#instructions_1","title":"Instructions","text":"<p>The consent check task is dependent on the [Task: Add the privacy module build configuration and files]. These instructions assume that the dependent task is complete already.</p> <p>The code snippets in this section are taken from an Open Source sample application. The application is published in the Workspace ONE Software Development Kit Integration Samples repository. See: github.com/.../workspace-ONE-SDK-integration-samples/.../privacyKotlin</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#privacy-helper-class","title":"Privacy Helper Class","text":"<p>First, create a privacy helper class. Requirements for the class are illustrated by the following Kotlin code, which can be used as an example. See the numbered notes below the code for explanations.</p> <pre><code>open class PrivacyBase(\n    private val context: Context,\n    sharedPreferencesName: String = \"com.airwatch.privacy\"\n) {\n    init {\n        // 1. Module initialization............................................\n        AWPrivacyController.initialize(\n            context.getSharedPreferences(\n                sharedPreferencesName, Context.MODE_PRIVATE\n            )\n        )\n    }\n\n    private val agreement: AWPrivacyConfig by lazy {\n        configureAgreement(context)\n    }\n\n    // 2. Content initialization..............................................\n    protected open fun configureAgreement(context: Context): AWPrivacyConfig {\n        return AWPrivacyConfig().apply {\n            applicationName = context.packageManager.getApplicationLabel(\n                context.applicationInfo).toString()\n        }\n    }\n\n    companion object {\n        fun privacyCallback(callback: (result: AWPrivacyResult) -&gt; Unit):AWPrivacyCallback {\n            return object : AWPrivacyCallback() {\n                override fun onComplete(result: AWPrivacyResult) =\n                    callback(result)\n            }\n        }\n    }\n\n    // 3. Consent check..................................................................\n    val consentRequired:Boolean get() = AWPrivacyController.getConsentRequired(agreement)\n\n    // 4.  Consent user interface flow...................................................\n    fun startPrivacyFlow(context: Context, callback: (result: AWPrivacyResult) -&gt; Unit) {\n        AWPrivacyController.startPrivacyFlow(\n            context, agreement, privacyCallback(callback)\n        )\n    }\n}\n</code></pre>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#privacy-helper-class-notes","title":"Privacy Helper Class Notes","text":"<p>These notes can be read in context of the preceding code snippet.</p> <ul> <li> <p><code>// 1. Module initialization.</code></p> <p>Initialize the privacy agreement module in the helper class.</p> <p>The module requires an Android SharedPreferences file in order to track the end user's acceptance of the privacy agreement.</p> </li> <li> <p><code>// 2. Content initialization.</code></p> <p>Initialize the privacy agreement content in the helper class.</p> <p>A minimal agreement can be used at this stage of integration. This will be enough to fit the privacy agreement into the application user interface code.</p> <p>In the sample code, only the display name of the application is configured. The content of the agreement will be configured later, in the [Task: Configure agreement content].</p> </li> <li> <p><code>// 3. Consent check.</code></p> <p>Implement a utility method that checks consent for the agreement whose content has been configured in the helper. The sample code implements the check as a property with a get accessor.</p> </li> <li> <p><code>// 4.  Consent user interface flow.</code></p> <p>Implement a utility method that starts the consent user interface flow for the agreement whose content has been configured in the helper.</p> <p>The sample code here takes as a parameter a callback to invoke with the result. The callback parameter value is a Kotlin lambda. The privacy module requires an AWPrivacyCallback instance. That's in keeping with the Java idiom but seems less suitable for Kotlin. To unify the two, the privacy helper class has code to wrap a Kotlin lambda into an AWPrivacyCallback instance.</p> </li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#next-steps","title":"Next Steps","text":"<p>Build and run the application to confirm that no mistakes have been made. After that, continue with the next step: [Launch Activity Change].</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#launch-activity-change","title":"Launch Activity Change","text":"<p>After creating the privacy helper class, add a consent check to your app's launch Activity. The changes are illustrated by the following Kotlin code, which can be used as an example. See the numbered notes below the code for explanations.</p> <pre><code>open class MainActivity : Activity() {\n    // 1. Helper instantiation.................................................\n    private val privacy by lazy {PrivacyBase(this)}\n\n    // 2. Separate user interface initialization...............................\n    private fun initializeUserInterface() {\n        setContentView(R.layout.activity_main)\n        // ...\n        // Any other user interface initialization from the onCreate goes here.\n    }\n\n    // 3. Privacy result receipt...............................................\n    private fun privacyCallback(result: AWPrivacyResult) {\n        toastHere(\n            \"Privacy agreement ${result.privacyResultType} ${result.privacyUserOptInStatus}\")\n        initializeUserInterface()\n    }\n\n    private fun toastHere(message: String) = runOnUiThread {\n        Toast.makeText(this, message, Toast.LENGTH_LONG).show()\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        // 4. Check consent requirement........................................\n        if (privacy.consentRequired) {\n\n            // 5. Consent flow launch..........................................\n            privacy.startPrivacyFlow(this, this::privacyCallback)\n        }\n        else {\n            initializeUserInterface()\n        }\n    }\n\n    ...\n}\n</code></pre>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#launch-activity-change-notes","title":"Launch Activity Change Notes","text":"<p>These notes can be read in context of the preceding code snippet.</p> <ul> <li> <p><code>// 1. Helper instantiation.</code></p> <p>Add a property for an instance of the privacy helper class from the previous step. The property can use Kotlin lazy initialization.</p> </li> <li> <p><code>// 2. Separate user interface initialization.</code></p> <p>Move the user interface initialization code from the onCreate into a new method. This could be all the code from the setContentView onwards.</p> <p>This method will be called to complete user interface initialization when it is OK to do so.</p> </li> <li> <p><code>// 3. Privacy result receipt.</code></p> <p>Create a callback method to receive the result of the user interface flow that gets consent to the privacy agreement.</p> <p>For now, the method can display the result in an Android toast message, and continue with user interface initialization, as shown in the sample code.</p> <p>There is no need to check the result because the end user won't have an option to reject the privacy agreement with the configuration used at this stage. Instructions for that are under the [Task: Configure agreement rejection].</p> </li> <li> <p><code>// 4. Check consent requirement.</code></p> <p>Add a check for whether user consent is required, or has already been given.</p> <p>Make the check in the onCreate method, after the base class call but before any user interface initialization. If consent isn't required, continue with user interface initialization.</p> </li> <li> <p><code>// 5. Consent flow launch.</code></p> <p>Start the user interface flow to get consent, if required.</p> <p>In the sample code, the callback is the privacy result receipt callback, bound to this Activity instance. It is specified by the double colon syntax.</p> </li> </ul> <p></p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#next-steps_1","title":"Next Steps","text":"<p>Build and run the application to check that the launch is as expected:</p> <ul> <li> <p>When the app starts for the first time, the privacy agreement should be     displayed. See the screen capture of the first screen, below.</p> <p>You can consent by selecting: I Understand.</p> </li> <li> <p>After you consent, the data sharing opt-in should open. See the screen     capture of the second screen, below.</p> <p>You can opt out by selecting: Not Now.</p> </li> <li> <p>If you opt out, you will be asked to confirm. You can confirm by selecting:     Don't Send.</p> </li> <li> <p>After you have consented, and opted in or out, the main app user interface     should open.</p> </li> <li> <p>If you terminate and restart the app after consenting, the main app user     interface should open. You shouldn't have to consent twice.</p> </li> </ul> <p></p> <p></p> <p>If you want to test the above interaction, you can clear the app storage and restart it. See the [Appendix: How to reset application state] for instructions, if needed.</p> <p>If everything is as expected, you are ready to proceed to the next  [Task: Add Agreement Review].</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#task-add-agreement-review","title":"Task: Add agreement review","text":"<p>Adding a review option is a Workspace ONE privacy agreements integration task for Android application developers.</p> <p>An option to review agreement content should be made available in any app that requires consent to a privacy agreement. The privacy module has a built-in user interface for this.</p> <p>In the review user interface, the user can read again the contents of the agreement that they accepted. They can also opt in or out of additional data sharing. They cannot withdraw consent to the main privacy agreement from the review user interface, but see the [Task: Add Agreement Revocation].</p> <p>The add agreement review task is dependent on the [Task: Add a consent check at application launch]. These instructions assume that the dependent task is complete already.</p> <p>The code snippets in this section are taken from an Open Source sample application. The application is published in the Workspace ONE Software Development Kit Integration Samples repository. See: github.com/.../workspace-ONE-SDK-integration-samples/.../privacyKotlin</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#instructions_2","title":"Instructions","text":"<p>Proceed as follows.</p> <ol> <li> <p>Add a utility method to the privacy helper.</p> <p>Implement a utility method that starts the review consent user interface flow for the agreement whose content has been configured in the helper.</p> <p>Kotlin code for the method could look like the following.</p> <pre><code>open class PrivacyBase(...) {\n\n    ...\n\n    fun reviewPrivacy(context: Context, callback: (result: AWPrivacyResult) -&gt; Unit) {\n        AWPrivacyController.previewPrivacy(\n            context, agreement, privacyCallback(callback)\n        )\n    }\n}\n</code></pre> <p>The new method has similar parameters and structure to the startPrivacyFlow() method.</p> </li> <li> <p>Call the utility method from a handler in an Activity.</p> <p>For example, add a TextView, button or other clickable element to the main Activity that already has a property for the privacy helper instance. In the click event listener, add code like this:</p> <pre><code>privacy.reviewPrivacy(context, this::privacyCallback)\n</code></pre> </li> </ol>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#next-steps_2","title":"Next Steps","text":"<p>Build and run the application, and test the change just made.</p> <ul> <li>The privacy agreement content should be the same as when it was accepted.</li> <li>The option to accept, I Understand, won't be present.</li> <li> <p>The user can return to the app user interface by</p> <ul> <li> <p>selecting a reverse navigation option.</p> </li> <li> <p>tapping the Android back button.</p> </li> </ul> <p>The location of the reverse navigation option is shown in the configuration screen capture images in this document. See [Privacy Splash].</p> </li> </ul> <p>If everything is as expected, you are ready to proceed to the next  [Task: Configure agreement content].</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#task-configure-agreement-content","title":"Task: Configure agreement content","text":"<p>Configuration of the agreement is a Workspace ONE privacy module integration task for Android application developers.</p> <p>The configure agreement task is dependent on the [Task: Add a consent check at application launch]. These instructions assume that the dependent task is complete already.</p> <p>There are many aspects of the privacy agreement that can be configured. The programming interface for agreement configuration is the AWPrivacyConfig and AWPrivacyContent classes. The general approach to configuration is to set the properties of an instance of one of those classes.</p> <p>If you are unfamiliar with the privacy agreement sections, take a look at the [Privacy Sections] annotated screen capture images.</p> <p>If you follow these instructions you will make minimal customizations of the app permissions section of the privacy agreement, then the data collection section. Having done that, you and your code will be ready to complete the configuration of the privacy agreement according to your requirements.</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#add-custom-app-permission-text","title":"Add custom app permission text","text":"<p>Proceed as follows.</p> <ol> <li> <p>Add a privacy content item factory function to the privacy helper.</p> <p>Implement a factory function for instantiating new privacy content items. This will facilitate building lists for configuration later.</p> <p>The Kotlin code for a factory function could look like the following.</p> <pre><code>class PrivacyBase(...) {\n\n    companion object {\n        // ... Other companion object code here.\n\n        fun privacyContent(\n            title: String, summary: String\n        ) : AWPrivacyContent = AWPrivacyContent().apply {\n            this.title = title\n            this.summary = summary\n        }\n    }\n}\n</code></pre> </li> <li> <p>Create a privacy helper subclass and override the content initialization     method.</p> <p>Use a subclass to separate general utility code from specific code for each app. The base privacy helper class can then be re-used in other apps.</p> <p>Kotlin code for the subclass declaration could look like the following.</p> <pre><code>class Privacy(context: Context) : PrivacyBase(context) {\n\n    override fun configureAgreement(context: Context): AWPrivacyConfig\n    { return super.configureAgreement(context).apply {\n\n        appPermissionTitle = \"My App Permissions\"\n        appPermissionItems = ArrayList( listOf(\n            privacyContent(\n                \"Custom permission\", \"My permission, without an icon, goes here.\")\n\n            // ToDo: More app permission items here.\n        ))\n\n        // ToDo: Other agreement configuration here.\n    } }\n\n}\n</code></pre> <p>Note that the AWPrivacyConfig appPermissionItems property is a Java-style ArrayList. It can be constructed from a Kotlin immutable list.</p> </li> <li> <p>Instantiate the subclass instead of the privacy helper base class.</p> <p>Change PrivacyBase to Privacy wherever it is used, for example as in the following code.</p> <pre><code>// private val privacy by lazy {PrivacyBase(this)}\nprivate val privacy by lazy {Privacy(this)}\n</code></pre> </li> </ol> <p>Build and run the application to test the changes just made:</p> <ul> <li>The app permissions section title in the privacy consent and review user     interfaces should be the value set in the code.</li> <li>On the screen that opens when the app permissions title is tapped, the     custom permission should appear.</li> </ul> <p>If everything is as expected, you are ready to continue to the next step.</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#add-an-app-permission-with-a-custom-icon","title":"Add an app permission with a custom icon","text":"<p>In the previous step a custom app permission was added. In this step, an icon will be added to represent a custom app permission.</p> <p>Proceed as follows.</p> <ol> <li> <p>Add an icon resource to your application.</p> <p>If you don't have an icon to hand, you can create a placeholder using the tools that come with Android Studio. Instructions can be found here, for example: https://developer.android.com/studio/write/image-asset-studio#access (Some PDF viewers incorrectly escape the hash anchor marker in the above links. If that happens, edit the link in the browser address bar.)</p> <p>The instructions in either of the following sections will help you create a suitable placeholder.</p> <ul> <li>Create adaptive and legacy launcher icons.</li> <li>Create a notification icon.</li> </ul> <p>Save your image, in <code>res/drawable</code>, or in <code>res/mipmap</code> for example. Note the resource name for later.</p> </li> <li> <p>Add a new privacy content item factory function to the privacy helper base     class.</p> <p>Implement a factory function for instantiating new privacy content items with icon resources. The function can be based on the factory function created in the preceding step.</p> <p>The Kotlin code for the factory function could look like the following.</p> <pre><code>class PrivacyBase(...) {\n\n    companion object {\n        // ... Other companion object code here and previous factory function.\n\n        fun privacyContent(\n            title: String, summary: String, id: Int\n        ) : AWPrivacyContent = privacyContent(title, summary).apply { this.id = id }\n    }\n}\n</code></pre> </li> <li> <p>Add a new item to the privacy agreement app permissions.</p> <p>In the code added in the preceding step, in the appPermissionItems list, instantiate a new item with code like the following.</p> <pre><code>appPermissionItems = ArrayList( listOf(\n    privacyContent(\n        \"Another Permission\", \"Another permission with a custom icon goes here.\",\n        R./* mipmap or drawable for example */ . /* resource name */\n    ),\n    // ... Existing custom permission here.\n) )\n</code></pre> </li> </ol> <p>Build and run the application to test that the new permission appears, with its icon.</p> <p>If everything is as expected, you are ready to continue to the next step.</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#add-an-app-permission-with-a-built-in-icon","title":"Add an app permission with a built-in icon","text":"<p>The privacy module comes with built-in icon resources that you can use in your privacy agreement, instead of creating your own custom icons.</p> <p>Built-in icons are accessed via the AWPrivacyController getPermissionResource static method. They are represented by the AWPrivacyPermissionType enumerated constants. Screen captures showing all the icons and constant names are included in this document, in the [Appendix: Built-In App Permission Icons].</p> <p>Proceed as follows.</p> <ol> <li> <p>Add a new privacy content item factory function to the privacy helper base     class.</p> <p>Implement a factory function for instantiating new privacy content items with built-in icons. The function can be based on the factory function created in the preceding step.</p> <p>The Kotlin code for the factory function could look like the following.</p> <pre><code>class PrivacyBase(...) {\n\n    companion object {\n        // ... Other companion object code here and previous factory functions.\n\n        fun privacyContent(\n            title: String, summary: String, id: AWPrivacyPermissionType\n        ) : AWPrivacyContent = privacyContent(\n            title, summary, AWPrivacyController.getPermissionResource(id)\n        )\n    }\n}\n</code></pre> </li> <li> <p>Add a new item to the privacy agreement app permissions.</p> <p>In the code added in the preceding step, in the appPermissionItems list, instantiate a new item with code like the following.</p> <pre><code>appPermissionItems = ArrayList( listOf(\n    privacyContent(\n        \"Camera\", \"Required for taking pictures.\", AWPrivacyPermissionType.PERMISSION_CAMERA),\n    // ... Existing custom permission here.\n) )\n</code></pre> <p>In this code, the camera icon has been used. For a list of all the icon names, see the [Appendix: Built-In App Permission Icons].</p> </li> </ol> <p>Build and run the application to test that the new permission appears, with its icon.</p> <p>If everything is as expected, you are ready to continue to the next step.</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#add-custom-data-collection-text","title":"Add custom data collection text","text":"<p>The previous steps customized the app permissions section of the privacy agreement. The next steps will customize the data collection section.</p> <p>Customization of the data collection section of the privacy agreement uses the same classes as customization of the app permissions section. The factory methods added to the privacy helper for app permissions will be used again.</p> <p>In the code added for app permission customization, in the configureAgreement method, customize the data collection text with code like the following.</p> <pre><code>override fun configureAgreement(context: Context): AWPrivacyConfig\n{ return super.configureAgreement(context).apply {\n\n    appPermissionTitle = \"My App Permissions\"\n    appPermissionItems = ArrayList( listOf( ... ))\n\n    // Following code is added for data collection customization.\n    dataCollectionDescription = \"Description of data collection by my app.\"\n    dataCollectionItems = ArrayList( listOf(\n        privacyContent(\n            \"Browsing history\", \"The app will log which sites you browse.\")\n    ))\n\n    // ToDo: Other agreement configuration here.\n} }\n</code></pre> <p>Build and run the application to test the change just made:</p> <ul> <li>The data collection section title in the privacy consent and review user     interfaces will be the value set in the code.</li> <li>On the screen that opens when the data collection title is tapped, the     custom privacy item appears.</li> </ul> <p>If everything is as expected, you are ready to continue to the next step.</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#add-a-built-in-data-collection-item","title":"Add a built-in data collection item","text":"<p>The privacy module comes with built-in data collection items that you can use in your privacy agreement. These are \"canned\" full items each with a short title text, longer description text, and icon.</p> <p>Built-in data collection items are accessed via the AWPrivacyController getAppDataContent static method. An Android Context is required as a parameter. Items are represented by the AWPrivacyAppDataType enumerated constants. Screen captures showing all the items and constant names are included in this document, in the [Appendix: Built-In Data Collection Types].</p> <p>In the code added in the preceding step, in the dataCollectionItems list, instantiate a new item with code like the following.</p> <pre><code>dataCollectionItems = ArrayList( listOf(\n    AWPrivacyController.getAppDataContent(\n        context, AWPrivacyAppDataType.APP_DATA_DEVICE_HARDWARE)!! ,\n\n    // ... Existing data collection items here.\n) )\n</code></pre> <p>Build and run the application to test that the new permission appears, with its icon.</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#next-steps_3","title":"Next Steps","text":"<p>You have now configured some representative parts of the privacy agreement, and your code has a structure that can accommodate all the configuration options of the privacy module.</p> <p>Think about your requirements for privacy agreements and check the [Configuration Reference] section in this document to see how they can be implemented. That section lists the configuration properties of the Workspace ONE privacy module and illustrates their positions with annotated screen capture images.</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#notes-on-content-configuration","title":"Notes on content configuration","text":"<p>The following notes apply to agreement content configuration.</p> <ul> <li> <p>The privacy module has a built-in default list of data collection items.</p> <p>A mutable copy of the built-in list can be created by calling the AWPrivacyConfig dataCollectionDefaultItems static method. An Android Context is required as a parameter. Kotlin code to access the list could be like the following.</p> <pre><code>val items = AWPrivacyConfig.dataCollectionDefaultItems(context)\n</code></pre> </li> <li> <p>The privacy module user interfaces support Android night mode, also known as     dark mode. The built-in app permission icons and data collection items come     with light- and dark-mode versions of their graphics.</p> <p>You can provide night-mode versions of custom icons in your agreement configuration. Use the Android alternative resources mechanism with the \"night\" suffix.</p> <p>The following screen capture shows a night-mode alternative for the <code>privacy_placeholder_2.png</code> resource in the Android Studio project view of the Open Source privacy module sample application.</p> <p></p> <p>For details, see the Android developer website, for example: https://developer.android.com/.../providing-resources#AlternativeResources</p> </li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#task-remove-data-sharing-opt-in","title":"Task: Remove data sharing opt-in","text":"<p>Removing the opt-in for data sharing is an optional Workspace ONE privacy agreements integration task for Android application developers.</p> <p>Data here means additional data gathered for analytical and other non-essential purposes. For example, recording which features of the app are actually used so that usage patterns can be analysed with a view to informing product development decisions. This type of data isn't essential to the operation nor security of the app.</p> <p>By default, the privacy module offers a data sharing opt-in to the user. The user can accept or decline the opt-in, separately to consenting to the main privacy agreement. For screen capture images, see [Privacy Splash] and [Data Sharing Opt In] in this document.</p> <p>If your app doesn't gather and share additional data, remove the opt-in from the privacy agreement user interface by following the instructions below.</p> <p>This task is dependent on the [Task: Configure agreement content]. These instructions assume that the dependent task is complete already.</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#instructions_3","title":"Instructions","text":"<p>Set the AWPrivacyConfig property dataSharingShow to false to remove the opt-in.</p> <p>In your privacy helper subclass, in the code added for app permission customization, in the configureAgreement method, remove the opt-in with code like the following.</p> <pre><code>override fun configureAgreement(context: Context): AWPrivacyConfig\n{ return super.configureAgreement(context).apply {\n\n    dataSharingShow = false\n\n    // ... Other agreement content configuration here.\n} }\n</code></pre>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#next-steps_4","title":"Next Steps","text":"<p>Build and run the application, and test the changes just made.</p> <ul> <li> <p>In the consent and review user interfaces, the opt-in shouldn't appear on     the privacy splash screen.</p> </li> <li> <p>After consenting to the main privacy agreement, you shouldn't be prompted to     opt in to additional data sharing.</p> </li> </ul> <p>This completes removal of the additional data sharing opt-in.</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#task-configure-agreement-rejection","title":"Task: Configure agreement rejection","text":"<p>Configuring rejection is an optional Workspace ONE privacy agreements integration task for Android application developers.</p> <p>By default, the privacy module treats the privacy agreement as mandatory. The module's consent flow user interface won't offer an option to reject the agreement unless configured to do so. For details of the consent flow, see the [Task: Add a consent check at application launch].</p> <p>If your app has some features that can be used without acceptance of the privacy agreement, you can allow rejection of the agreement. Follow the instructions below.</p> <p>The configure agreement rejection task is dependent on the [Task: Configure agreement content]. These instructions assume that the dependent task is complete already.</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#instructions_4","title":"Instructions","text":"<p>Proceed as follows.</p> <ol> <li> <p>Set privacyRejectShow:true to allow rejection of the agreement.</p> <p>In your privacy helper subclass, in the code added for app permission customization, in the configureAgreement method, allow rejection with code like the following.</p> <pre><code>override fun configureAgreement(context: Context): AWPrivacyConfig\n{ return super.configureAgreement(context).apply {\n\n    privacyRejectShow = true\n\n    // ... Other agreement content configuration here.\n} }\n</code></pre> </li> <li> <p>Update your privacy result receipt callback to recognize rejection.</p> <p>For example, in the sample code under [Launch Activity Change] the privacy receipt callback is the privacyCallback method. It receives an AWPrivacyResult as a parameter.</p> <p>You can check for rejection of the agreement with code like the following.</p> <pre><code>private fun privacyCallback(result: AWPrivacyResult) {\n    val rejected = result.privacyResultType == AWPrivacyResultType.CANCEL\n\n    // ToDo: If rejected, only show app features that can be used without\n    // acceptance of the privacy agreement.\n}\n</code></pre> </li> <li> <p>Restrict your app user interface and features in the rejected case.</p> <p>Whichever features of your app cannot be used without acceptance of the privacy agreement must be blocked if it was rejected.</p> </li> </ol>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#next-steps_5","title":"Next Steps","text":"<p>Build and run the application, and test the changes just made.</p> <ul> <li> <p>In the consent flow user interface, a reverse navigation option should     appear on the privacy splash screen. The location is shown in the     configuration screen capture images in this document. See [Privacy Splash].</p> </li> <li> <p>In case you already accepted the agreement in your app as installed, you can     do one of the following to force the consent flow to open.</p> <ul> <li>Uninstall and reinstall the app.</li> <li>Revoke the agreement and restart the app, if you have completed the     [Task: Add Agreement Revocation].</li> <li>Clear the app storage and restart it. See the     [Appendix: How to reset application state] for instructions, if needed.</li> </ul> </li> </ul> <p>This completes configuration of agreement rejection.</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#task-add-agreement-revocation","title":"Task: Add agreement revocation","text":"<p>Adding revocation is an optional Workspace ONE privacy agreements integration task for Android application developers.</p> <p>An option to revoke the privacy agreement could be an offered in your app user interface. To revoke the privacy agreement, call the AWPrivacyController reset static method. Kotlin code to do this could be as follows.</p> <pre><code>AWPrivacyController.reset()\n</code></pre> <p>After revoking the privacy agreement, the app code must re-run the consent check and any ensuing updates to its user interface. If the privacy agreement is mandatory, for example, then the main app user interface mustn't be shown after revocation until the agreement is accepted again.</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#next-steps_6","title":"Next Steps","text":"<p>Build and run the application, and test the change just made.</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#configuration-reference","title":"Configuration Reference","text":"<p>There are many aspects of the privacy agreement that can be configured. The programming interface for agreement configuration is the AWPrivacyConfig and AWPrivacyContent classes. The general approach to configuration is to set the properties of an instance of one of those classes.</p> <p>The following table lists all the configuration properties.</p> AWPrivacyConfig property Type Note Banner that appears at the top of the privacy details screen: <code>aboutPrivacyTitle</code> <code>String</code> Heading. <code>aboutPrivacyDescription</code> <code>String</code> Statement. <p>Data collection section:               ||| <code>dataCollectionTitle</code>        |<code>String</code> |Section heading. <code>dataCollectionDescription</code>  |<code>String</code> |Statement. <code>dataCollectionItems</code>        |<code>ArrayList &lt;AWPrivacyContent&gt;</code>|List of collected data types.</p> <p>App permissions section:               ||| <code>appPermissionTitle</code>         |<code>String</code> |Section heading. <code>appPermissionDescription</code>   |<code>String</code> |Statement. <code>appPermissionItems</code>         |<code>ArrayList &lt;AWPrivacyContent&gt;</code>|List of app permissions.</p> <p>Privacy policy section:                ||| <code>enterprisePolicyShow</code>       |<code>Boolean</code>|Whether to show the section. <code>enterprisePolicyTitle</code>      |<code>String</code> |Section heading. <code>enterprisePolicyDescription</code>|<code>String</code> |Statement. <code>enterprisePolicyLink</code>       |<code>String</code> |URL to open for more information.</p> <p>Additional data sharing opt in:        ||| <code>dataSharingShow</code>            |<code>Boolean</code>|Whether to show the opt in. <code>dataSharingTitle</code>           |<code>String</code> |Section heading. <code>dataSharingDescription</code>     |<code>String</code> |Statement. <code>dataSharingNavigation</code>      |<code>String</code> |How to get to the option in the app user interface.</p> <p>Other:                                 ||| <code>applicationName</code>            |<code>String</code> |App name as it should appear in the privacy agreement user interface. <code>privacyRejectShow</code>          |<code>Boolean</code>|Whether the agreement can be rejected.</p> <p>AWPrivacyContent property    | Type    | Note <code>title</code>                      |<code>String</code> |Heading. <code>summary</code>                    |<code>String</code> |Statement. <code>id</code>                         |<code>Int</code>    |Android resource identifier for the icon. [Table 2: Configuration properties]</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#agreement-structure","title":"Agreement Structure","text":"<p>The order in which the sections of the privacy agreement appear is fixed. Data collection is first, then app permissions, then privacy policy is last, if it is shown.</p> <p>The hierarchy of the privacy agreement is also fixed. The data collection and app permissions sections each have a list of constituent items. Additional custom list-based sections cannot be added. Constituent items cannot be added to any other section of the agreement.</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#agreement-consent-tracking","title":"Agreement Consent Tracking","text":"<p>The privacy module tracks end user consent to the privacy agreement. At the point of consent, the privacy module generates and stores an acceptance record for tracking purposes.</p> <p>The record includes an acceptance check value that is generated from the privacy agreement as it was configured when consent was given. The following parts of the agreement are factors in the generation of the acceptance check value.</p> <ul> <li>The enterprisePolicyLink URL.</li> <li>All of the appPermissionItems AWPrivacyContent summary texts.</li> <li>All of the dataCollectionItems AWPrivacyContent summary texts.</li> </ul> <p>The app could change the agreement configuration after end user consent in such a way that the acceptance check value would be different. In that case, the user's previous consent no longer applies. The user must be prompted to consent to the changed agreement before continuing to use the app.</p> <p>The [Task: Add a consent check at application launch] has instructions for checking the need for user consent, and for starting the consent flow.</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#see-also","title":"See Also","text":"<p>For instructions and sample code, see the following sections of this document.</p> <ul> <li>[Task: Configure agreement content].</li> <li>[Task: Configure agreement rejection].</li> </ul> <p>For pictures that show where the configurable properties appear in the privacy user interface, see the [Configuration Screen Capture Images] in this document</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#configuration-screen-capture-images","title":"Configuration Screen Capture Images","text":"<p>The following screen capture images shows configurable properties in the Workspace ONE privacy agreement user interface.</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#privacy-splash","title":"Privacy Splash","text":"<p>The following screen capture image shows configurable properties on the privacy splash screen. The splash screen is the first screen in the consent and review user interfaces.</p> <p></p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#about-privacy","title":"About Privacy","text":"<p>The following screen capture image shows configurable properties in the about privacy banner.</p> <p></p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#privacy-sections","title":"Privacy Sections","text":"<p>The following screen capture image shows configurable properties in the privacy sections.</p> <p></p> <p>Note that the Android system permission INTERNET would be required for the app to open the web page configured in the enterprisePolicyLink.</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#data-collection-items","title":"Data Collection Items","text":"<p>The following screen capture image shows configurable properties in the data collection items.</p> <p></p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#app-permission-items","title":"App Permission Items","text":"<p>The following screen capture image shows configurable properties in the app permission items.</p> <p></p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#data-sharing-opt-in","title":"Data Sharing Opt In","text":"<p>The following screen capture image shows configuration of the data sharing opt in screen.</p> <p></p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#data-sharing-navigation","title":"Data Sharing Navigation","text":"<p>The following screen capture image shows configuration of the data sharing navigation instructions.</p> <p></p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#appendix-built-in-app-permission-icons","title":"Appendix: Built-In App Permission Icons","text":"<p>The following screen capture images show the built-in app permission icons that come with the privacy module.</p> <p>For instructions how to use these icons, see [Add an app permission with a built-in icon].</p> <p></p> <p></p> <p>(There is a break in the image because the icons don't all fit on a single screen.)</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#appendix-built-in-data-collection-types","title":"Appendix: Built-In Data Collection Types","text":"<p>The following screen capture image shows the built-in data collection items that come with the privacy module.</p> <p>For instructions how to use these items, see [Add a built-in data collection item].</p> <p></p> <p></p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#appendix-how-to-reset-application-state","title":"Appendix: How to reset application state","text":"<p>You can reset an application to its just-installed state by following these instructions.</p> <ol> <li> <p>Open the App Info screen for the application whose data you want to reset.</p> <p>For example, do one of the following.</p> <ul> <li>From the device home screen, long press the application icon and then     select App info in the context menu that appears.</li> <li>Open the device Settings and search for the application by its long     name. (The long name isn't necessarily the same as the package     identifier.)</li> <li>Open the device Settings and navigate to Apps and notifications, then     select the application from the recent list, or from the all list.</li> </ul> </li> <li> <p>Select Storage &amp; cache.</p> <p>This opens the Storage management screen for the application.</p> </li> <li> <p>Select to Clear Storage, and confirm this if prompted.</p> </li> </ol> <p>All application data has now been deleted and any privacy agreement consent will have been reverted.</p>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#document-information","title":"Document Information","text":""},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#published-locations","title":"Published Locations","text":"<p>This document is available</p> <ul> <li> <p>in Markdown format, in the repository that also holds the sample code: https://github.com/vmware-samples/...Privacy.md</p> </li> <li> <p>in Portable Document Format (PDF), on the VMware website: https://developer.vmware.com/...Privacy.pdf</p> </li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#revision-history","title":"Revision History","text":"Date Revision 12jul2021 First publication, for 21.5.1 SDK for Android. 20aug2021 to 09dec2021 Updated, for 21.7 to 21.11 SDK for Android releases. 26Jan2022 Updated, for 22.1 SDK for Android. 28Feb2022 Updated, for 22.2 SDK for Android. 04Apr2022 Updated, for 22.3 SDK for Android. 29Apr2022 Updated, for 22.4 SDK for Android. 06Jun2022 Updated, for 22.5 SDK for Android. 05Jul2022 Updated, for 22.6 SDK for Android. 23Aug2022 Updated, for 22.8 SDK for Android. 04Nov2022 Updated, for 22.10 SDK for Android. 13Dec2022 Updated, for 22.11 SDK for Android. 25Jan2023 Updated, for 23.01 SDK for Android. 15Mar2023 Updated, for 23.03 SDK for Android. 27Apr2023 Updated, for 23.04 SDK for Android. 06Jun2023 Updated, for 23.06 SDK for Android. 24Jul2023 Updated, for 23.07 SDK for Android. 07Sep2023 Updated, for 23.09 SDK for Android. 25Oct2023 Updated, for 23.10 SDK for Android. 18Dec2023 Updated, for 23.12 SDK for Android. 25Jan2024 Updated, for 24.01 SDK for Android."},{"location":"IntegrationGuideforAndroid/Guides/05Privacy/WorkspaceONE_Android_Privacy/#legal","title":"Legal","text":"<ul> <li>VMware LLC 3401 Hillview Avenue Palo Alto CA 94304 USA     Tel 877-486-9273 Fax 650-427-5001 www.vmware.com</li> <li>Copyright \u00a9 2024 VMware LLC All rights reserved.</li> <li>This content is protected by U.S. and international copyright and     intellectual property laws. VMware products are covered by one     or more patents listed at     https://www.vmware.com/go/patents.     VMware is a registered trademark or trademark of VMware LLC and its     subsidiaries in the United States and other jurisdictions. All other marks     and names mentioned herein may be trademarks of their respective companies.</li> <li>The Workspace ONE Software Development Kit integration samples are     licensed under a two-clause BSD license.     SPDX-License-Identifier: BSD-2-Clause</li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/readme/","title":"UEM System Administration for Application Developers","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/readme/#workspace-one-for-android","title":"Workspace ONE for Android","text":"<p>Android applications can be integrated with the VMware Workspace ONE\u00ae platform. Integration work will require access to a Workspace ONE Unified Endpoint Manager console, and the completion of administrative tasks there. Follow the instructions below to set up and administer a Workspace ONE console that supports application development.</p> <p>This guide only covers tasks necessary to support application development. It doesn't replace the system administrator user guides for the Workspace ONE product.</p> <p>This document is part of the Workspace ONE Integration Guide for Android set.</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/readme/#introduction","title":"Introduction","text":"<p>Development of an Android application that is integrated with Workspace ONE will require access to a Workspace ONE Unified Endpoint Manager console. The console will be used to</p> <ul> <li>manage enrollment of mobile devices and applications in various modes.</li> <li>manage the availability and installation of mobile applications, including     applications under development.</li> <li>manage the configuration of applications.</li> <li>manage end users.</li> </ul> <p>This guide covers the following enrollment modes.</p> <ul> <li>Managed Android in Device Owner (DO) mode, sometimes referred to as Work     Managed mode.</li> <li>Managed Android in Profile Owner (PO) mode, sometimes referred to as Work     Profile mode.</li> <li>Unmanaged Android, known as registered mode.</li> </ul> <p>All enrollment modes can be supported by a single console. The Workspace ONE platform supports other enrollment modes for Android, such as Corporate Owned Personally Enabled (COPE), but these aren't in scope of this guide.</p> <p>Best practice is to have a separate console instance, tenant, or organisation group, set aside for software development.</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/readme/#vmware-testdrive-service","title":"VMware TestDrive service","text":"<p>VMware operates a service, VMware TestDrive, that can be used to host a management console instance for application development support. The service is free, doesn't need system administrator expertise to utilize, and doesn't require the installation of any client nor server software.</p> <p>This guide starts with instructions for setting up a TestDrive UEM. In case you don't use TestDrive, the remaining instructions will still be applicable to your UEM deployment.</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/readme/#abbreviations-and-terms","title":"Abbreviations and Terms","text":"<p>The following abbreviations and terms are used with the following meanings in this guide.</p> <ul> <li>EMM is an abbreviation for Enterprise Mobility Management.</li> <li>UEM is an abbreviation for Unified Endpoint Manager and is used here to mean     the Workspace ONE management console.</li> <li>Enrollment means the establishment of a trusted connection between a     management console and a mobile device or application.</li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/readme/#task-set-up-a-management-console","title":"Task: Set up a management console","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/readme/#task-register-for-android-enterprise-mobility-management","title":"Task: Register for Android Enterprise Mobility Management","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/readme/#task-configure-management-console-enrollment","title":"Task: Configure management console enrollment","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/readme/#recommended-organization-group-structure","title":"Recommended Organization Group Structure","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/readme/#how-to-set-up-the-recommended-organization-group-structure","title":"How to set up the recommended Organization Group structure","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/readme/#how-to-log-in-and-select-an-organization-group","title":"How to log in and select an Organization Group","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/readme/#task-set-up-the-mobile-application-catalog","title":"Task: Set up the mobile application catalog","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/readme/#task-configure-end-users","title":"Task: Configure end users","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/readme/#recommended-end-user-configuration","title":"Recommended End User Configuration","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/readme/#how-to-create-an-end-user-account","title":"How to create an end user account","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/readme/#how-to-delete-an-end-user-account","title":"How to delete an end user account","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/readme/#task-enroll-a-developer-device","title":"Task: Enroll a developer device","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/readme/#how-to-find-out-the-enrollment-server-address","title":"How to find out the enrollment server address","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/readme/#how-to-enroll-an-android-device-in-device-owner-managed-mode","title":"How to enroll an Android device in Device Owner managed mode","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/readme/#how-to-enroll-an-android-device-in-profile-owner-managed-mode","title":"How to enroll an Android device in Profile Owner managed mode","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/readme/#how-to-enroll-an-android-device-in-registered-mode","title":"How to enroll an Android device in Registered mode","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/readme/#task-configure-security-settings","title":"Task: Configure security settings","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/readme/#troubleshooting","title":"Troubleshooting","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/readme/#appendix-how-to-enroll-an-app-in-standalone-mode","title":"Appendix: How to enroll an app in standalone mode","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/readme/#document-information","title":"Document Information","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/readme/#published-locations","title":"Published Locations","text":"<p>This document is available</p> <ul> <li> <p>in Markdown format, in the repository that also holds the sample code: https://github.com/vmware-samples/...UEMSysAdminForAppDevs/</p> </li> <li> <p>in Portable Document Format (PDF), on the VMware website: https://developer.vmware.com/...UEMSysAdminForAppDevs.pdf</p> </li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/readme/#revision-history","title":"Revision History","text":"Date Revision 09nov2022 First publication."},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/readme/#legal","title":"Legal","text":"<ul> <li>VMware, Inc. 3401 Hillview Avenue Palo Alto CA 94304 USA     Tel 877-486-9273 Fax 650-427-5001 www.vmware.com</li> <li>Copyright \u00a9 2022 VMware, Inc. All rights reserved.</li> <li>This content is protected by U.S. and international copyright and     intellectual property laws. VMware products are covered by one     or more patents listed at     https://www.vmware.com/go/patents.     VMware is a registered trademark or trademark of VMware, Inc. and its     subsidiaries in the United States and other jurisdictions. All other marks     and names mentioned herein may be trademarks of their respective companies.</li> <li>The Workspace ONE Software Development Kit integration samples are     licensed under a two-clause BSD license.     SPDX-License-Identifier: BSD-2-Clause</li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/01Task_Set-up-a-management-console/readme/","title":"Task: Set up a management console","text":"<p>Setting up a management console is a system administrator task for application developers. You can skip this task if you already have an administrator account on a UEM console with the required permissions.</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/01Task_Set-up-a-management-console/readme/#app-development-support-system-administrator-permissions","title":"App Development Support System Administrator Permissions","text":"<p>To support app development, you will need the following system administrator permissions on your UEM.</p> <ul> <li>Android EMM access, which requires registration from the UEM with Google.</li> <li>Upload an application package (APK) file.</li> <li>Either create an organisation group for an end user, or get the name of an     existing group.</li> <li>Either create a new end user with a suitable profile for development     purposes, or get the name of an existing suitable user.</li> <li>Either create enrolment credentials for an end user, or get existing     credentials.</li> </ul> <p>If you have UEM access and all these permissions then you can skip this task.</p> <p>Otherwise, you can utilize the VMware TestDrive service.</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/01Task_Set-up-a-management-console/readme/#how-to-set-up-a-management-console-in-vmware-testdrive","title":"How to set up a management console in VMware TestDrive","text":"<p>VMware operates a service, VMware TestDrive, that can be used to host a Workspace ONE UEM management console to support application development efforts.</p> <p>To set up a TestDrive UEM, proceed as follows.</p> <ol> <li> <p>Register at https://testdrive.vmware.com</p> <p>When you open the above link, your browser will be redirected to the service home page. The home page will have a link or some other way to initiate the sign-up process.</p> <p>Sign up and set a passcode with one of the following email addresses.</p> <ul> <li>Your vmware.com email address if you are a member of staff at VMware, or     a contractor, or otherwise have a vmware.com email address.</li> <li>An email address from an account or domain registered in the VMware     Partner Connect portal if you are a member of the VMware Technology     Alliance Program (TAP).</li> <li>An email address from an account or domain registered in the VMware     Customer Connect portal if you are a customer of VMware.</li> </ul> </li> <li> <p>Launch the Sandbox Experience: Workspace ONE UEM.</p> <p>Navigate to My Products, Digital Workspace, Sandbox Experiences, VMware Workspace ONE UEM, and click Launch.</p> <p>Ignore the Ready to Use Experiences, which aren't suitable for support of app development.</p> <p></p> <p>The UEM login page will open, in a new browser tab or window.</p> </li> <li> <p>Log in to the UEM.</p> <p>The credentials you will need can be found in the TestDrive user interface, as follows.</p> <ul> <li>In list mode, click the expand control.</li> <li>In grid mode, click the i in a circle.</li> </ul> <p>You will need the Admin Credentials username and password.</p> </li> </ol> <p>This completes setting up a management console. You are now ready to continue with the next Task: Register for Android Enterprise Mobility Management.</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/01Task_Set-up-a-management-console/readme/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/02Task_Register-for-Android-Enterprise-Mobility-Management/readme/","title":"Task: Register for Android Enterprise Mobility Management","text":"<p>Registering for Android EMM is a system administrator task for application developers. You can skip this task if your UEM console is already registered. If you don't have access to a UEM, see the preceding Task: Set up a management console.</p> <p>Note that the UEM must be registered for EMM with Google, even if you aren't using any form of device management.</p> <p>You will need a gmail.com email address or other Google account. You might want to create one for the purpose, in case you have a personal gmail.com address already and don't want to use it for EMM registration.</p> <ol> <li> <p>Open the UEM Getting Started page.</p> <p>Launch and log in to your TestDrive sandbox UEM. Navigate to Getting Started, Workspace ONE, if it isn't open by default.</p> <p>The following screen capture shows you the location in the UEM user interface.</p> <p></p> </li> <li> <p>Select to configure Android EMM Registration.</p> <p>This opens a screen that describes the necessary interactions, which will take place in the Google Play website. The following screen capture shows the page.</p> <p></p> </li> <li> <p>Select to Register With Google.</p> <p>This will open a first page in the Google Play website. In the top right corner, check that the Google account is as expected. If it isn't, then log out and log in with the required account. The following screen capture shows the page.</p> <p></p> </li> <li> <p>Click the button: Get started.</p> <p>This will open a page on which you register a business name and EMM provider. The following screen capture shows the page.</p> <p></p> <p>You can use your own name as the business name. You'll only be managing your own devices. The EMM provider should be pre-populated.</p> </li> <li> <p>Enter your own name as the business name and click next.</p> <p>This will open a page on which you must confirm that you accept the relevant agreement. On this page you can also enter contact details, or you can leave them blank. The following screen capture shows the page.</p> <p></p> </li> <li> <p>Accept the relevant agreement and click Confirm.</p> <p>This will open a final page on which you complete registration. In the top right corner, check that the Google account is as expected. If it isn't, close the page and start again after logging in with your correct Google account. The following screen capture shows the page.</p> <p></p> </li> </ol> <p>This completes registration for Android Enterprise Mobility Management. You are now ready to continue with the next Task: Configure management console enrollment.</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/02Task_Register-for-Android-Enterprise-Mobility-Management/readme/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/03Task_Configure-management-console-enrollment/readme/","title":"Task: Configure management console enrollment","text":"<p>Configuring the management console for enrollment is a system administrator task for application developers. The enrollment configuration task is dependent on the Task: Register for Android Enterprise Mobility Management. The following instructions assume that the dependent task is complete already.</p> <p>Workspace ONE supports the following types of enrollment for Android.</p> <ul> <li>Managed Android in Device Owner (DO) mode, sometimes referred to as Work     Managed mode.</li> <li>Managed Android in Profile Owner (PO) mode, sometimes referred to as Work     Profile mode.</li> <li>Unmanaged Android, known as registered mode.</li> </ul> <p>The types of enrollment that will be available for a mobile device or app are specified in the UEM configuration, in the Organization Group structure.</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/03Task_Configure-management-console-enrollment/readme/#introduction-to-organization-groups","title":"Introduction to Organization Groups","text":"<p>The organization group (OG) is a fundamental concept of Workspace ONE UEM administration. This introduction gives an overview for application developers.</p> <p>A UEM can have multiple OGs, organized in a hierarchical tree structure. Features for enrollment, policies, and settings, are all configured in the OG structure. When an end user device or app enrolls, it will be assigned to one OG. The policies and settings of that OG then apply to that device or app.</p> <p>An OG at a lower level of the structure, referred to as a child OG, inherits the configuration of its parent OG. The configuration of the parent OG will specify which parts of the configuration can be overridden in a child OG. Each OG has up to one parent.</p> <p>Each OG has an identifier, referred to as its Group ID, and a name. The Group ID sometimes has to be entered in the mobile user interface. The name will be used for display purposes in the console and mobile user interfaces.</p> <p>When the TestDrive hosting service instantiates a sandbox UEM server, it configures one OG, referred to here as the root OG.</p> <ul> <li>You cannot remove the root OG.</li> <li>The root OG doesn't have a parent OG.</li> <li>You cannot create siblings to the root OG.</li> <li>You can rename the root OG.</li> <li>You can create child OGs under the root OG.</li> </ul> <p>This guide recommends adding a layer of child OGs to the structure so that the configuration can support all types of UEM enrollment without being changed. See the Recommended Organization Group Structure for details and a diagram.</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/03Task_Configure-management-console-enrollment/readme/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/03Task_Configure-management-console-enrollment/01Recommended-Organization-Group-Structure/readme/","title":"Readme","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/03Task_Configure-management-console-enrollment/01Recommended-Organization-Group-Structure/readme/#recommended-organization-group-structure","title":"Recommended Organization Group Structure","text":"<p>This guide recommends creating an OG structure that includes all types of UEM enrollment. This will enable the application development effort to proceed and support all types of enrollment without the need to reconfigure the UEM.</p> <p>The following recommendations are also made.</p> <ul> <li>Configure selection of enrollment type by the end user.</li> <li>Use two- or three-letter values for OG Group ID values, to facilitate manual     entry in the mobile user interface.</li> <li>Use longer, descriptive texts for OG names.</li> <li>Add a separate child OG for standalone enrollment. Standalone enrollment is     supported by the Workspace ONE Boxer email app, the Workspace ONE Web     browser, Workspace ONE PIV-D Manager, and other apps in the VMware     productivity suite.</li> </ul> <p></p> <p>This diagram represents a recommended OG structure, as a UML Object Diagram.</p> <p></p> <p>Follow the How to set up the recommended Organization Group structure instructions to set up the above OG structure.</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/03Task_Configure-management-console-enrollment/01Recommended-Organization-Group-Structure/readme/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/03Task_Configure-management-console-enrollment/02How-to-set-up-the-recommended-Organization-Group-structure/readme/","title":"Readme","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/03Task_Configure-management-console-enrollment/02How-to-set-up-the-recommended-Organization-Group-structure/readme/#how-to-set-up-the-recommended-organization-group-structure","title":"How to set up the recommended Organization Group structure","text":"<p>To set up the Recommended Organization Group Structure, proceed as follows.</p> <p></p> <ol> <li> <p>Log in to the UEM and navigate to: Groups &amp; Settings, Groups, Organization     Groups, Details.</p> <p>This opens the root OG in the Details view.</p> </li> <li> <p>Set the name and Group ID of the root OG.</p> <p>In the Details view, enter the following field values.</p> <ul> <li>Name: <code>Root</code></li> <li>Group ID: <code>og</code></li> </ul> <p>There is no need to set any other field values.</p> <p>The following screen capture shows how the screen could look when the values have been entered.</p> <p></p> <p>Click the Save button at the bottom of the screen to save the changes.</p> <p>A message will be displayed to confirm that the change has been made.</p> </li> <li> <p>Add a first child OG.</p> <p>Still in the Details view of the root OG, select the option to Add Child Organization Group. This option appears as a tab. The following screen capture shows the location and appearance after selection.</p> <p></p> <p>Enter the following field values for the first child OG.</p> <ul> <li>Name: <code>Managed</code></li> <li>Group ID: <code>ogm</code></li> </ul> <p>Click the Save button at the bottom of the screen to save the changes. This will create the child OG and select it.</p> </li> <li> <p>Select the root OG.</p> <p>At the top of the page, locate the OG selection control. It will be displaying the name of the root OG and child OG separated by an oblique, as shown in the following screen capture.</p> <p></p> <p>The name of the root OG mightn't have updated to reflect the recent name change. In that case, refresh the browser view.</p> <p>Click to expand the control and then click to select the root OG.</p> <p>The control will change to show the name of the root OG only. If it doesn't, try again.</p> <p>The following screen capture shows the required OG selection.</p> <p></p> <p>Note: Check the current OG selection whenever you make configuration changes in the UEM. Almost all configuration will be applied at the OG level.</p> </li> <li> <p>Add the other child OGs.</p> <p>Repeat the preceding steps to add the second child OG, with the following values.</p> <ul> <li>Parent: root OG.</li> <li>Child Name: <code>Profile</code></li> <li>Child Group ID: <code>ogp</code></li> </ul> <p>Save, reselect the root OG and then repeat the process again with the following values.</p> <ul> <li>Parent: root OG.</li> <li>Child Name: <code>Registered</code></li> <li>Child Group ID: <code>ogr</code></li> </ul> <p>Save, reselect the root OG and then repeat the process again with the following values.</p> <ul> <li>Parent: root OG.</li> <li>Child Name: <code>Standalone</code></li> <li>Child Group ID: <code>ogs</code></li> </ul> <p>Save and then continue to the next instruction.</p> </li> <li> <p>Configure registered mode enrollment.</p> <p>First, check that registered mode isn't the default in the root OG. Select the root OG, see above, and navigate to: Groups &amp; Settings, All Settings, Devices &amp; Users, General, Enrollment, Management Mode. By default, the option to enrol without device management should be disabled.</p> <p>The following screen capture shows the location and setting.</p> <p></p> <p>The managed OG and profile OG should inherit the same Management Mode settings. Check this by selecting each one and navigating as necessary.</p> <p>Next, select the registered OG, navigate to Management Mode and set the option to enrol without device management to enabled and in all devices in the OG. If necessary, select Current Setting: Override at the top of the settings.</p> <p>The following screen capture shows the location and setting.</p> <p></p> <p></p> <p>Save and then continue to the next instruction.</p> </li> <li> <p>Configure managed mode enrollment.</p> <p>Select the managed OG, see above, and navigate to: Groups &amp; Settings, All Settings, Devices &amp; Users, Android, Android EMM Registration, Enrollment Restrictions. Select Allow Work Profile Enrollment: disable. If necessary, select Current Setting: Override at the top of the settings.</p> <p>The following screen capture shows the location and setting.</p> <p></p> <p>Save your changes.</p> <p>Check that the root OG has the default setting, Allow Work Profile Enrollment: enable. Also check that the profile OG inherits that setting.</p> </li> <li> <p>Configure profile mode enrollment.</p> <p>Select the profile OG, see above, and navigate to: Groups &amp; Settings, All Settings, Devices &amp; Users, Android, Android EMM Registration, Enrollment Settings. Set the option Management Mode for Corporate Devices: Corporate Owned Personally Enabled. If necessary, select Current Setting: Override at the top of the settings.</p> <p>The following screen capture shows the location and setting.</p> <p></p> <p>Save and then continue to the next instruction.</p> </li> <li> <p>Configure standalone enrollment.</p> <p>First, select the standalone OG, see above, and navigate to: Groups &amp; Settings, All Settings, Content, Applications, Workspace ONE Content App. Set the option Block Enrollment via Content, Boxer, and Web: Disabled. If necessary, select Current Setting: Override at the top of the settings.</p> <p>The following screen capture shows the location and setting.</p> <p></p> <p>Next, with the standalone OG still selected, navigate to Groups &amp; Settings, All Settings, Devices &amp; Users, General, Enrollment, Management Mode and set the option to enrol without device management to enabled and in all devices in the OG. (This configuration is also required for the registered OG, above.) If necessary, select Current Setting: Override at the top of the settings.</p> <p>The following screen capture shows the location and setting.</p> <p></p> <p></p> <p>Save and then continue to the next instruction.</p> </li> <li> <p>Configure OG selection at enrollment time.</p> <p>Select the root OG, see above, and navigate to: Groups &amp; Settings, All Settings, Devices &amp; Users, General, Enrollment, Grouping. Select Group ID Assignment Mode: Prompt User To Select Group ID. If necessary, select Current Setting: Override at the top of the settings.</p> <p>The following screen capture shows the location and setting.</p> <p></p> <p>Next, select the standalone OG, see above, and navigate to the same screen: Groups &amp; Settings, All Settings, Devices &amp; Users, General, Enrollment, Grouping. For this OG, select Group ID Assignment Mode: Default. If necessary, select Current Setting: Override at the top of the settings.</p> <p>The following screen capture shows the location and setting.</p> <p></p> <p></p> </li> </ol> <p>This completes enrollment mode configuration. Check that the OG structure and settings are the same as shown in the Recommended Organization Group Structure diagram.</p> <p>Now is a good time to review How to log in and select an Organization Group.</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/03Task_Configure-management-console-enrollment/02How-to-set-up-the-recommended-Organization-Group-structure/readme/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/03Task_Configure-management-console-enrollment/03How-to-log-in-and-select-an-Organization-Group/readme/","title":"Readme","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/03Task_Configure-management-console-enrollment/03How-to-log-in-and-select-an-Organization-Group/readme/#how-to-log-in-and-select-an-organization-group","title":"How to log in and select an Organization Group","text":"<p>Whenever you log in to the UEM, you should check the OG selection. You should also check the OG selection before changing a configuration setting, creating an end user, adding an application, or taking any other system administration action. Almost all system administration is applied at the OG level.</p> <p>Proceed as follows.</p> <ol> <li> <p>Get the administrator login credentials.</p> <p>If you are using a VMware TestDrive UEM, you can get the default credentials from the service home page. Note that if you change your login credentials, the TestDrive home page won't be updated and will still show the default credentials.</p> <p>Navigate to this address in a web browser: https://testdrive.vmware.com</p> <p>When you open the above link, your browser will be redirected to the service home page. Log in to TestDrive using the credentials with which you registered.</p> <p>(If you haven't registered and don't have access to another UEM, see the Task: Set up a management console for instructions.)</p> <p>Navigate to My Products, Digital Workspace, Sandbox Experiences, VMware Workspace ONE UEM. The credentials you will need can be found as follows.</p> <ul> <li>In list mode, click the expand control.</li> <li>In grid mode, click the i in a circle.</li> </ul> <p>The following screen captures show where to click in the TestDrive user interface.</p> <p></p> <p></p> <p></p> <p>You will need the Admin Credentials username and password.</p> </li> <li> <p>Open the UEM console login page.</p> <p>If you are using TestDrive, navigate to My Products, Digital Workspace, Sandbox Experiences, VMware Workspace ONE UEM, and click Launch.</p> <p>The UEM login page will open, in a new browser tab or window.</p> </li> <li> <p>Log in to the UEM.</p> <p>The initial appearance of the login screen is shown in the following screen capture.</p> <p></p> <p>Enter the admin username if it isn't pre-populated and click Next, then enter the admin password and click Log In.</p> <p>You are now logged in to the UEM.</p> </li> <li> <p>Select the required OG.</p> <p>At the top of the page, locate the OG selection control. It might already display the required OG.</p> <p>The following screen capture shows the OG selection control.</p> <p></p> <p>In the above screen capture, the selected OG is: Root.</p> <p>If the required OG isn't already displayed then click to expand the control and then click again to select the required OG. The control will change to show the name of the required OG, and its hierarchy if it is a child OG. If it doesn't, try again.</p> </li> </ol> <p>This completes logging in to the console and selecting an OG.</p> <p>If you haven't already done so, you are now ready to continue to the next Task: Set up the mobile application catalog.</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/03Task_Configure-management-console-enrollment/03How-to-log-in-and-select-an-Organization-Group/readme/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/04Task_Set-up-the-mobile-application-catalog/readme/","title":"Task: Set up the mobile application catalog","text":"<p>Setting up the mobile application catalog is a system administrator task for application developers. This task is dependent on the Task: Configure management console enrollment. The following instructions assume that the dependent task is complete already.</p> <p>The mobile application catalog will be used to make your app in development available to install onto your developer device. Installation could be via selection in Hub, or by pushing from the UEM.</p> <p>Setting up the catalog is a common task for UEM administrators and the relevant online documentation will be used here.</p> <p>Set up the Workspace ONE mobile application catalog as follows.</p> <p></p> <ol> <li> <p>Log in to the UEM and select the root OG.</p> <p>For instructions, see How to log in and select an Organization Group.</p> </li> <li> <p>Activate Hub Services.</p> <p>Follow the instructions here: Activate Hub Services for Existing UEM Customers</p> </li> <li> <p>Create your catalog.</p> <p>Follow the instructions here: Customize the App Catalog in Hub Services</p> </li> <li> <p>Activate the AirWatch Catalog.</p> <p>In some cases, it has seemed necessary to activate the legacy AirWatch catalog feature. To do so, navigate to: Groups &amp; Settings, Apps, Workspace ONE, AirWatch Catalog, General, Publishing. Select Legacy Catalog (Android): enabled.</p> <p>The following screen capture shows the location and setting.</p> <p></p> </li> </ol> <p>This completes setting up the mobile application catalog. You are now ready to continue to the next Task: Configure end users.</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/04Task_Set-up-the-mobile-application-catalog/readme/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/05Task_Configure-end-users/readme/","title":"Task: Configure end users","text":"<p>Configuring end users in the UEM management console is a system administrator task for application developers. The following instructions refer to some concepts introduced in the Task: Configure management console enrollment.</p> <p>The end user configuration described in this guide is intended only to support application development, not for production Workspace ONE deployments. </p> <p>This guide doesn't cover end user configuration in depth. The recommendations here are intended to support application development only and aren't suitable for production Workspace ONE deployments. See the system administrator user guides for the Workspace ONE product for authoritative and complete information.</p> <p>See the Recommended End User Configuration for details.</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/05Task_Configure-end-users/readme/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/05Task_Configure-end-users/01Recommended-End-User-Configuration/readme/","title":"Readme","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/05Task_Configure-end-users/01Recommended-End-User-Configuration/readme/#recommended-end-user-configuration","title":"Recommended End User Configuration","text":"<p>This guide recommends configuring UEM Basic end users to support application development. Basic end users enroll by entering a user name and password at the device.</p> <p>Basic user accounts exist only in the UEM management console and aren't linked to, for example, users in a Lightweight Directory Access Protocol (LDAP) directory. For that reason they could be the easiest type of account to set up and manage for development purposes.</p> <p>Every UEM supports Basic users by default. In some deployments, Basic users will be the only option. </p> <p>The following recommendations are also made.</p> <ul> <li> <p>Set users as managed by, and enrolling into, the root OG. See the     Task: Configure management console enrollment for details of      what is meant by root OG.</p> </li> <li> <p>Create no more users than are needed. One might be enough.</p> </li> <li> <p>Set each user's password to be the same as its username. This would be bad     practice in production, but is OK during development.</p> </li> <li> <p>Use short values for username and password. During development you might     enroll and unenroll frequently. Single-letter values, such as \"a\", are     supported.</p> </li> </ul> <p>Your TestDrive UEM will come with a single automatic end user account. You mightn't be allowed to change the automatic account's username to comply with the above recommendations. In that case, add a new user that does comply.</p> <p>Follow the How to create an end user account instructions to create an end user with the above configuration.</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/05Task_Configure-end-users/01Recommended-End-User-Configuration/readme/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/05Task_Configure-end-users/02How-to-create-an-end-user-account/readme/","title":"Readme","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/05Task_Configure-end-users/02How-to-create-an-end-user-account/readme/#how-to-create-an-end-user-account","title":"How to create an end user account","text":"<p>To create an end user account in line with the above recommended configuration, proceed as follows.</p> <ol> <li> <p>Log in to the UEM and select the root OG.</p> <p>For instructions, see How to log in and select an Organization Group.</p> </li> <li> <p>Navigate to Accounts, Users, List View.</p> <p>Clicking on Accounts might do the whole navigation.</p> </li> <li> <p>Select to add an end user.</p> <p>The following screen capture shows the location of the control in the user interface. The Root OG has been selected.</p> <p></p> <p>The Add/Edit User screen will open.</p> </li> <li> <p>Fill in the details for the new end user, for example as follows.</p> <ul> <li>Security Type: Basic.</li> <li>Username: Enter a short value, for example \"a\".</li> <li>Password: Enter the Username value.</li> <li>Confirm Password: Enter the Username value again.</li> <li>Full Name: Enter a short value, for example \"A\" in the First Name and     Last Name fields.</li> <li>Email address: Enter your email address.</li> <li>Enrollment Organization Group: Root, the default.</li> <li>Allow user to enroll into additional Organization Groups: Disabled, the     default.</li> <li>User Role: Full Access, the default.</li> <li>Notification Message Type: None.</li> </ul> <p>The following screen capture shows sample filled-in values.</p> <p></p> <p></p> <p></p> <p></p> </li> <li> <p>Click Save to add the user account.</p> </li> </ol> <p>This completes end user account creation. The end user can be used for the Task: Enroll a developer device.</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/05Task_Configure-end-users/02How-to-create-an-end-user-account/readme/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/05Task_Configure-end-users/03How-to-delete-an-end-user-account/readme/","title":"Readme","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/05Task_Configure-end-users/03How-to-delete-an-end-user-account/readme/#how-to-delete-an-end-user-account","title":"How to delete an end user account","text":"<p>In case you want to delete an end user account, proceed as follows.</p> <p>Your TestDrive UEM will come with a single automatic end user account. You mightn't be allowed to delete the automatic account.</p> <ol> <li> <p>Log in to the UEM and select the root OG.</p> <p>For instructions, see How to log in and select an Organization Group.</p> </li> <li> <p>Navigate to Accounts, Users, List View.</p> <p>Clicking on Accounts might do the whole navigation.</p> </li> <li> <p>Click anywhere blank in the row for the end user you wish to delete.</p> <p>This opens a detailed view of the end user account.</p> </li> <li> <p>In the actions at the top right, click More to expand the actions then,     under Admin click Delete.</p> <p>The following screen capture shows the expanded actions in the user interface.</p> <p></p> <p>If the Delete action doesn't appear then the user cannot be deleted.</p> </li> <li> <p>A confirmation message will be displayed. Click OK to dismiss it.</p> </li> </ol> <p>The end user account has now been deleted.</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/05Task_Configure-end-users/03How-to-delete-an-end-user-account/readme/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/06Task_Enroll-a-developer-device/readme/","title":"Task: Enroll a developer device","text":"<p>Enrolling a developer device is a common task for application developers. The following instructions refer to some concepts introduced in the Task: Configure management console enrollment.</p> <p>This guide gives instructions for enrolling in any of the following modes.</p> <ul> <li>Managed Android in Device Owner (DO) mode, sometimes referred to as Work     Managed mode.</li> <li>Managed Android in Profile Owner (PO) mode, sometimes referred to as Work     Profile mode.</li> <li>Unmanaged Android, known as registered mode.</li> </ul> <p>You should test your application in all modes that your end users will use in production. In case you don't have known end users yet, consider the following general recommendations.</p> <ul> <li> <p>Android DO managed mode can be used on a developer device that you don't     mind resetting to its factory default state. Enrollment will delete all data     on the device.</p> </li> <li> <p>Android PO managed mode can be used on a developer device that doesn't     already have a work profile. However, PO mode isn't recommended for     application development for the following reasons.</p> <ul> <li>You will have to upload your app to an enterprise Play Store instance.     The store doesn't allow some package name prefixes, and doesn't appear     to support removal, nor replacement without upgrade.</li> <li>You will have to follow a different procedure to side load your app in     development from Android Studio or the Android Debug Bridge (adb) tool.     In PO mode, the device has an additional user account. The default     Gradle files mightn't facilitate automated testing of your app in PO     mode.</li> </ul> </li> <li> <p>Registered mode can be used on any device that isn't already enrolled     against a Workspace ONE UEM console, and doesn't have any standalone     enrolled apps. (The Workspace ONE Boxer email app, the Workspace ONE Web     browser, and other apps in the VMware productivity suite support standalone     enrollment.) No device data will be lost.</p> </li> </ul> <p>The enrollment instructions for different modes are substantially but not completely the same. Common instructions are duplicated to so that each subsection can be followed independently.</p> <p>In any mode, you will first need to know How to find out the enrollment server address.</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/06Task_Enroll-a-developer-device/readme/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/06Task_Enroll-a-developer-device/01How-to-find-out-the-enrollment-server-address/readme/","title":"Readme","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/06Task_Enroll-a-developer-device/01How-to-find-out-the-enrollment-server-address/readme/#how-to-find-out-the-enrollment-server-address","title":"How to find out the enrollment server address","text":"<p>To find out the enrollment server address for a UEM proceed as follows.</p> <ol> <li> <p>Log in to the UEM and select the root OG.</p> <p>For instructions, see How to log in and select an Organization Group.</p> </li> <li> <p>Navigate to: Groups &amp; Settings, All Settings, System, Advanced,     Site URLs.</p> <p>This opens a page with a list of site uniform resource locator (URL) values.</p> </li> <li> <p>Locate the Device Services URL in the list.</p> </li> </ol> <p>The enrollment server address is the host portion of the Device Services URL.</p> <p>The following screen capture shows the location of the required address in the user interface.</p> <p></p> <p>In the above screen capture, the enrollment server address is: <code>ds1300.awmdm.com</code></p> <p>Make a note of the address and then proceed to one of these sets of instructions, depending on which type of enrollment you are using.</p> <ul> <li>How to enroll an Android device in Device Owner managed mode</li> <li>How to enroll an Android device in Profile Owner managed mode</li> <li>How to enroll an Android device in Registered mode</li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/06Task_Enroll-a-developer-device/01How-to-find-out-the-enrollment-server-address/readme/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/06Task_Enroll-a-developer-device/02How-to-enroll-an-Android-device-in-Device-Owner-managed-mode/readme/","title":"Readme","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/06Task_Enroll-a-developer-device/02How-to-enroll-an-Android-device-in-Device-Owner-managed-mode/readme/#how-to-enroll-an-android-device-in-device-owner-managed-mode","title":"How to enroll an Android device in Device Owner managed mode","text":"<p>In general, only new or factory reset devices can be enrolled in Android Device Owner (DO) managed mode. In order to use an ordinary Android smartphone or tablet as your developer device in DO mode, you must first reset it to factory defaults and erase all data.</p> <p>These instructions assume that the Recommended Organization Group Structure has been configured in the UEM. Some steps will be different if that isn't the case.</p> <ol> <li> <p>Switch on your developer device if it is new, or reset it to factory     defaults and erase all data.</p> </li> <li> <p>Follow the out-of-box activation instructions until you reach the Google     sign-in screen.</p> <ul> <li>You can skip any instructions that don't apply to developer devices such     as restoring preferences, apps, and data from an earlier device.</li> <li>You will require an internet connection, either mobile data or Wi-Fi.</li> </ul> </li> <li> <p>On the sign-in screen, enter the Workspace ONE Intelligent Hub special     identifier instead of an email address or phone number.</p> <p>The identifier is: <code>afw#hub</code></p> <p>The following screen capture shows how this might appear as entered on the sign-in screen.</p> <p></p> </li> <li> <p>Tap Next and then follow the ensuing instructions until you reach a screen     with the Workspace ONE Intelligent Hub logo and a prompt for email address     or server.</p> <p>The instructions will include installing Workspace ONE Intelligent Hub and setting up as a work device, as well as setting some user preferences. You will be warned that the device isn't private. There is no need to switch on any optional Google Services.</p> <p>The following screen capture shows the screen with logo and prompt.</p> <p></p> </li> <li> <p>Enter the enrollment server address and tap Next.</p> <p>See the instructions How to find out the enrollment server address if necessary.</p> <p>There will be some processing and then the prompt will reappear with an additional field requiring entry: Group ID.</p> </li> <li> <p>Enter the Group ID of your root OG.</p> <p>In the Recommended Organization Group Structure the Group ID is: <code>og</code></p> <p>There will be some more processing and then you will be prompted to select a group for your device.</p> </li> <li> <p>Select the group Managed and tap to continue.</p> <p>You will be prompted for a Username and Password.</p> </li> <li> <p>Enter the username and password of an end user account and tap Next.</p> <p>If the Recommended End User Configuration has been set up then the username and password could both be: <code>a</code></p> <p>There will be some more processing. You might be prompted to save the password just entered but this can be ignored.</p> <p>When enrollment processing has finished, you will be prompted to accept a privacy agreement.</p> </li> <li> <p>Accept the privacy agreement by tapping: I Understand.</p> <p>You will be prompted to opt in to additional data sharing.</p> </li> <li> <p>Select \"Not Now\" and confirm by tapping \"Don't Send\" when prompted.</p> <p>There will be some more processing and device set-up will finalize.</p> </li> <li> <p>Set a passcode for the device if prompted to do so. Acknowledge any other     warnings.</p> </li> </ol> <p>This completes Android Device Owner managed mode enrollment. The device is now ready for developer use.</p> <p>For instructions with screen captures of every stage, see this tutorial on the VMware Tech Zone website: https://techzone.vmware.com/managing-android-devices-workspace-one-operational-tutorial#_1211546</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/06Task_Enroll-a-developer-device/02How-to-enroll-an-Android-device-in-Device-Owner-managed-mode/readme/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/06Task_Enroll-a-developer-device/03How-to-enroll-an-Android-device-in-Profile-Owner-managed-mode/readme/","title":"Readme","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/06Task_Enroll-a-developer-device/03How-to-enroll-an-Android-device-in-Profile-Owner-managed-mode/readme/#how-to-enroll-an-android-device-in-profile-owner-managed-mode","title":"How to enroll an Android device in Profile Owner managed mode","text":"<p>A device that doesn't already have a work profile have can be enrolled in Android Profile Owner (PO) managed mode. PO mode isn't recommended for general application development for the reasons given in the introduction to this Task: Enroll a developer device but might be required as a test case.</p> <p>Warnings</p> <ul> <li> <p>The Workspace ONE Intelligent Hub application cannot be enrolled with more     than one management console at a time. If Hub is already installed and     enrolled on your developer device, then it must now be removed and     re-installed, or must be reset, i.e. have its storage cleared. Removing or     resetting the Hub may cause removal of any associated applications from the     device.</p> </li> <li> <p>Any VMware productivity apps already installed on an unmanaged developer     device might stop working when it is enrolled in PO mode. This applies     whether the apps were enrolled standalone or through Hub running in     registered mode. The VMware productivity apps include the Workspace ONE     Boxer email app, and the Workspace ONE Web browser, for example.</p> </li> </ul> <p>Tip: Set a device passcode before you begin enrolment. Typical UEM configurations will require a passcode, as a security policy. If a device passcode isn't set at the start of the enrolment interaction, you will be forced to set it as an enrolment step, which sometimes doesn't go smoothly.</p> <p>These instructions assume that the Recommended Organization Group Structure has been configured in the UEM. Some steps will be different if that isn't the case.</p> <p>Proceed as follows.</p> <ol> <li> <p>Install the Workspace ONE Intelligent Hub mobile application.</p> <p>The Hub can be installed from the Google Play Store. Search for \"workspace one intelligent hub\", for example.</p> </li> <li> <p>Open the Hub app.</p> <p>The screen will show the Workspace ONE Intelligent Hub logo and a prompt for email address or server, as in the following screen capture.</p> <p></p> </li> <li> <p>Enter the enrollment server address and tap Next.</p> <p>See the instructions How to find out the enrollment server address if necessary.</p> <p>There will be some processing and then the prompt will reappear with an additional field requiring entry: Group ID.</p> </li> <li> <p>Enter the Group ID of your root OG.</p> <p>In the Recommended Organization Group Structure the Group ID is: <code>og</code></p> <p>There will be some more processing and then you will be prompted to select a group for your device.</p> </li> <li> <p>Select the group Profile and tap to continue.</p> <p>You will be prompted for a Username and Password.</p> </li> <li> <p>Enter the username and password of an end user account and tap Next.</p> <p>If the Recommended End User Configuration has been set up then the username and password could both be: <code>a</code></p> <p>There will be some more processing. You might be prompted to save the password just entered. Ignore or decline the option.</p> <p>When enrollment processing has finished, you will be prompted to accept a privacy agreement.</p> </li> <li> <p>Accept the privacy agreement by tapping: I Understand.</p> <p>You will be prompted to opt in to additional data sharing.</p> </li> <li> <p>Select \"Not Now\" and confirm by tapping \"Don't Send\" when prompted.</p> <p>There will be some more processing then you will be prompted to change the way that you work.</p> </li> <li> <p>Tap Accept &amp; Continue.</p> <p>There will be some more processing and notification that Hub configuration is in process.</p> </li> </ol> <p>This completes Android Profile Owner mode enrollment. The device is now ready for developer use.</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/06Task_Enroll-a-developer-device/03How-to-enroll-an-Android-device-in-Profile-Owner-managed-mode/readme/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/06Task_Enroll-a-developer-device/04How-to-enroll-an-Android-device-in-Registered-mode/readme/","title":"Readme","text":""},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/06Task_Enroll-a-developer-device/04How-to-enroll-an-Android-device-in-Registered-mode/readme/#how-to-enroll-an-android-device-in-registered-mode","title":"How to enroll an Android device in Registered mode","text":"<p>A device that isn't already enrolled with Workspace ONE, and doesn't have any standalone enrolled apps installed, can be enrolled in registered mode.</p> <p>The Workspace ONE Boxer email app, the Workspace ONE Web browser, and other apps in the VMware productivity suite support standalone enrollment. Any of those apps that are on the device might stop working when the device is enrolled in registered mode.</p> <p>These instructions assume that the Recommended Organization Group Structure has been configured in the UEM. Some steps will be different if that isn't the case.</p> <p>Proceed as follows.</p> <ol> <li> <p>Install the Workspace ONE Intelligent Hub mobile application.</p> <p>The Hub can be installed from the Google Play Store. Search for \"workspace one intelligent hub\", for example.</p> </li> <li> <p>Open the Hub app.</p> <p>The screen will show the Workspace ONE Intelligent Hub logo and a prompt for email address or server, as in the following screen capture.</p> <p></p> </li> <li> <p>Enter the enrollment server address and tap Next.</p> <p>See the instructions How to find out the enrollment server address if necessary.</p> <p>There will be some processing and then the prompt will reappear with an additional field requiring entry: Group ID.</p> </li> <li> <p>Enter the Group ID of your root OG.</p> <p>In the Recommended Organization Group Structure the Group ID is: <code>og</code></p> <p>There will be some more processing and then you will be prompted to select a group for your device.</p> </li> <li> <p>Select the group Registered and tap to continue.</p> <p>You will be prompted for a Username and Password.</p> </li> <li> <p>Enter the username and password of an end user account and tap Next.</p> <p>If the Recommended End User Configuration has been set up then the username and password could both be: <code>a</code></p> <p>There will be some more processing. You might be prompted to save the password just entered. Ignore or decline the option.</p> <p>When enrollment processing has finished, you will be prompted to accept a privacy agreement.</p> </li> <li> <p>Accept the privacy agreement by tapping: I Understand.</p> <p>You will be prompted to opt in to additional data sharing.</p> </li> <li> <p>Select \"Not Now\" and confirm by tapping \"Don't Send\" when prompted.</p> <p>There will be some more processing.</p> </li> </ol> <p>This completes Registered mode enrollment. The device is now ready for developer use.</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/06Task_Enroll-a-developer-device/04How-to-enroll-an-Android-device-in-Registered-mode/readme/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/07Task_Configure-security-settings/readme/","title":"Task: Configure security settings","text":"<p>Configuring security settings is a system administrator task for application developers. This is an optional task that you may do in order to demonstrate or test the features of the Workspace ONE software development kit (SDK).</p> <p>This guide doesn't cover security settings configuration in depth. See the system administrator user guides for the Workspace ONE product for authoritative and complete information.</p> <p>Default security settings are set at the organization group (OG) level. For an introduction to the OG concept, see the Task: Configure management console enrollment. Security settings from the OG can be overridden for specific apps, by using a custom SDK profile.</p> <p>Security settings includes data loss prevention (DLP) settings. Those will be used as an example here.</p> <p></p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/07Task_Configure-security-settings/readme/#how-to-configure-data-loss-prevention-at-the-organization-group-level","title":"How to configure data loss prevention at the Organization Group level","text":"<p>To configure DLP settings at the OG level proceed as follows.</p> <ol> <li> <p>Log in to the UEM and select an OG.</p> <p>See the instructions How to log in and select an Organization Group if necessary.</p> <p>If you are unsure which OG to select, use the one that is managing your app. You can find out the OG name by navigating to Resources (or it may be labelled Apps or Apps &amp; Books), Apps, Native. Then select the tab on which your app appears. This will be Internal if your app APK was uploaded directly to the UEM, or Public if the APK was uploaded to your enterprise app store.</p> <p>This screen capture shows how the list view might appear in the console user interface.</p> <p></p> <p>In this screen capture there are two apps: App+WS1 hawkinsji and DevDetOne. Both are managed by the OG: Root.</p> </li> <li> <p>Navigate to: Groups &amp; Settings, All Settings, Apps, Settings and Policies,     Security Policies.</p> <p>This opens the Security Policies configuration screen, on which a number of settings can be switched on and off, and configured.</p> </li> <li> <p>For the Data Loss Prevention setting, select Enabled.</p> <p>When Enabled is selected, further controls will be displayed.</p> <p>This screen capture shows the location of the setting in the console user interface.</p> <p></p> </li> <li> <p>For actions that end users aren't allowed to do, select No.</p> <p>If you find the console user interface difficult to interpret, here's are some tips.</p> <ul> <li> <p>To check which setting is in effect, check if the Yes or No next to the     action has the same color scheme as the Enabled next to Data Loss     Prevention. For example, if the Yes next to Enable Copy and Paste Out     has the same color scheme as the Enabled next to Data Loss Prevention,     then copy and paste out is allowed.</p> </li> <li> <p>Most of the individual action selectors have the opposite sense to the     Data Loss Prevention (DLP) selector. DLP Enabled means that restrictions     are in effect; Enable Printing Yes means that printing isn't restricted.</p> </li> </ul> </li> <li> <p>To superimpose a watermark on the app user interface (UI), select Enable     Watermark: Yes.</p> <p>UI Watermark is only supported by the SDK for Android at time of writing.</p> </li> <li> <p>Select Save to commit your changes to the configuration.</p> </li> </ol> <p>This concludes DLP configuration at the OG level.</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/07Task_Configure-security-settings/readme/#how-to-override-data-loss-prevention-configuration-for-a-specific-app","title":"How to override data loss prevention configuration for a specific app","text":"<p>You can override the DLP configuration for a specific app by setting up a custom SDK profile and assigning it to the app. Proceed as follows.</p> <ol> <li> <p>Log in to the UEM and select an OG.</p> <p>See the notes on the same step in the preceding instructions [How to configure data loss prevention at the Organization Group level].</p> </li> <li> <p>Navigate to: Groups &amp; Settings, All Settings, Apps, Settings and Policies,     Profiles.</p> <p>This opens a page that lists any SDK custom profiles that have already been created.</p> <p>This screen capture shows the appearance of the Profiles page and its location in the UEM console user interface.</p> <p></p> </li> <li> <p>Either select an existing profile, or select to add a profile.</p> <p>If you selected to add a profile, a Select Configuration Type dialog will open. Select: SDK Profile. A second dialog will then open on which you have a choice of mobile operating systems, Android or Apple iOS. Select whichever your app runs on.</p> <p>A page on which you can create or edit the profile will open.</p> </li> <li> <p>Select the Restrictions item in the navigation panel.</p> <p>If you selected to edit a profile, and the profile already had a DLP configuration, the configuration will be shown. If you created a new profile, or if the profile you selected didn't have a DLP configuration, no configuration will be shown. Instead, there will be a Configure button. Click the button and a default configuration will be shown.</p> <p></p> </li> <li> <p>Configure the allowed and disallowed end user actions.</p> </li> <li> <p>Click Save to create the new profile, or to save your changes to the     existing profile.</p> <p>If you selected to create a new profile, you will have to give it a name before you can save.</p> <p>Make a note of the name of the profile that you created or edited.</p> </li> <li> <p>Close the Profiles page by clicking the X in the top left corner.</p> </li> <li> <p>Open the app list.</p> <p>Navigate to Resources (or it may be labelled Apps or Apps &amp; Books), Apps, Native. Then select the tab on which your app appears. This will be Internal if your app APK was uploaded directly to the UEM, or Public if the APK was uploaded to your enterprise app store.</p> <p>This opens a table view in which each row is either an app or an app version.</p> </li> <li> <p>Open the details of your app's configuratiion.</p> <p>Click on the pencil icon next to the version of your app. This screen capture shows the location in the UEM console user interface.</p> <p></p> <p>This opens an Edit Application dialog.</p> </li> <li> <p>Set the app to use the custom SDK profile.</p> <p>Select the More drop-down in the Edit Application dialog, and then the SDK menu item, as shown in this screen capture.</p> <p></p> <p>In the SDK Profile drop-down that appears, select the custom SDK profile  that you created or edited earlier.</p> <p></p> <p>In that screen capture the custom SDK profile being selected is: Boxer-Passcode.</p> </li> <li> <p>Finalise the SDK profile setting.</p> <p>Click Save &amp; Assign on the Edit Application dialog, then click Save on the assignment dialog, then click Publish on the preview dialog.</p> <p>The app version screen will open, on the Assignment tab.</p> </li> </ol> <p>This concludes overriding data loss prevention configuration for a specific app.</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/07Task_Configure-security-settings/readme/#next-steps","title":"Next Steps","text":"<p>Test the DLP settings in your app, or in one of the sample apps from the Open Source repository.</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/07Task_Configure-security-settings/readme/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/13Troubleshooting/readme/","title":"Troubleshooting","text":"<p>In case of difficulties, check these troubleshooting tips.</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/13Troubleshooting/readme/#security-code","title":"Security Code","text":"<p>You might be prompted to enter a security code to complete a destructive action, such as deleting an uploaded app. The default security code for a UEM hosted by the TestDrive service is 1234.</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/13Troubleshooting/readme/#apps-missing-from-list-view","title":"Apps missing from list view","text":"<p>You might find that an app you expect to see in a list view in the UEM doesn't appear. This could be due to an implicit filter.</p> <p>You can check what filters have been applied to the current list view, as follows.</p> <ol> <li> <p>Look for the word Filters in the row of controls just above the column     headings. Next to Filters will be a double chevron, &gt;&gt;, indicating     expandability. Click to expand the Filters.</p> </li> <li> <p>Check the filters in the expanded list. A common cause of missing items is     the Status filter. Expand it and check if only active apps are included, for     example.</p> </li> </ol> <p>This screen capture shows the expanded controls.</p> <p></p> <p>If you, for example, set the Status filter to All then the expected app might appear.</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/13Troubleshooting/readme/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/14Appendix_How-to-enroll-an-app-in-standalone-mode/readme/","title":"Appendix: How to enroll an app in standalone mode","text":"<p>Enrolling an app in standalone mode isn't a common task for application developers but is convenient to include here. The instructions in this guide could also be used to set up a demonstration or laboratory environment in which standalone enrollment could play a part.</p> <p>Standalone enrollment is supported by the Workspace ONE Boxer email app, the Workspace ONE Web browser, Workspace ONE PIV-D Manager, and other apps in the VMware productivity suite. However, these apps won't enroll standalone if Workspace ONE Intelligent Hub is already installed on the device.</p> <p>These instructions refer to some concepts introduced in the Task: Configure management console enrollment, and assume that the Recommended Organization Group Structure has been configured in the UEM. Some steps will be different if that isn't the case.</p> <p>Proceed as follows.</p> <ol> <li> <p>Install the mobile app, for example from the Google Play Store, and launch     it.</p> <p>The screen will show the app logo and a prompt for email address, as in the following screen capture.</p> <p></p> </li> <li> <p>Select the Manual Setup option. You will now be prompted for the Server URL     and Organization Group ID. Enter the enrollment server address and the Group     ID of the standalone OG.</p> <p>See the instructions How to find out the enrollment server address if necessary.</p> <p>In the Recommended Organization Group Structure the Group ID is: <code>ogs</code></p> <p>This screen capture shows the user interface with filled-in values.</p> <p></p> </li> <li> <p>Tap Next.</p> <p>There will be some processing and you will be prompted for a Username and Password.</p> </li> <li> <p>Enter the username and password of an end user account and tap Next.</p> <p>If the Recommended End User Configuration has been set up then the username and password could both be: <code>a</code></p> <p>There will be some more processing.</p> <p>When enrollment processing has finished, you will be prompted to accept a privacy agreement.</p> </li> <li> <p>Accept the privacy agreement by tapping: I Understand.</p> <p>You will be prompted to opt in to additional data sharing.</p> </li> <li> <p>Select \"Not Now\" and confirm by tapping \"Don't Send\" when prompted.</p> <p>There will be some more processing.</p> </li> </ol> <p>The app has now been enrolled in standalone mode and is ready for use.</p>"},{"location":"IntegrationGuideforAndroid/Guides/50UEMSysAdminForAppDevs/14Appendix_How-to-enroll-an-app-in-standalone-mode/readme/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"IntegrationGuideforAndroid/Guides/PublicMaven/WorkspaceONE_Android_PublicMavenNote/","title":"Public Maven Repository Integration Note","text":""},{"location":"IntegrationGuideforAndroid/Guides/PublicMaven/WorkspaceONE_Android_PublicMavenNote/#workspace-one-for-android","title":"Workspace ONE for Android","text":"<p>The VMware Workspace ONE\u00ae software development kit for Android can now be utilized directly from a public Maven repository. Direct utilization from the repository is an alternative to downloading the software development kit from the My Workspace ONE website.</p>"},{"location":"IntegrationGuideforAndroid/Guides/PublicMaven/WorkspaceONE_Android_PublicMavenNote/#agreement","title":"Agreement","text":"<p>Before downloading, installing or using the VMware Workspace ONE SDK you must:</p> <ul> <li> <p>Review the     VMware Workspace ONE Software Development Kit License Agreement.     By downloading, installing, or using the VMware Workspace ONE SDK you agree     to these license terms. If you disagree with any of the terms, then do not     use the software.</p> </li> <li> <p>Review the VMware Privacy Notice     and the     Workspace ONE UEM Privacy Disclosure,     for information on applicable privacy policies.</p> </li> </ul> <p>That applies however you obtain or integrate the software.</p>"},{"location":"IntegrationGuideforAndroid/Guides/PublicMaven/WorkspaceONE_Android_PublicMavenNote/#table-of-contents","title":"Table of Contents","text":"<p>{{TOC}}</p>"},{"location":"IntegrationGuideforAndroid/Guides/PublicMaven/WorkspaceONE_Android_PublicMavenNote/#tasks-and-documentation","title":"Tasks and Documentation","text":"<p>Integration of an Android application with the Workspace ONE platform includes a number of tasks for the application developer. Instructions for these tasks are given in a set of documents: the Workspace ONE Integration Guide for Android.</p> <p>The integration guide documents are available</p> <ul> <li> <p>in Markdown format, in the repository that also holds official sample code: https://github.com/vmware-samples/workspace-ONE-SDK-integration-samples</p> </li> <li> <p>in Portable Document Format (PDF), on the VMware website. https://developer.vmware.com/web/sdk/Native/airwatch-android</p> </li> </ul> <p>Most of the instructions apply the same whether the SDK is utilized directly from the public Maven repository or by downloading from My Workspace ONE. However, some instructions apply only if downloading and must be changed for direct utilization.</p> <p>Changed instructions are given below for each document in the integration guide set.</p> <p>There are no changes for the public Maven repository in the</p> <ul> <li>Integration Overview.</li> <li>Branding Integration Guide.</li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/PublicMaven/WorkspaceONE_Android_PublicMavenNote/#integration-preparation-guide-changes","title":"Integration Preparation Guide Changes","text":"<p>Follow these changed instructions instead of those in the Integration Preparation Guide to utilize the public Maven repository.</p> <p>Skip the Task: Obtain software development kit instructions.</p> <p>You should still download and review the  VMware Workspace ONE SDK License Agreement. If you don't accept the terms, stop  here and don't integrate the SDK.</p>"},{"location":"IntegrationGuideforAndroid/Guides/PublicMaven/WorkspaceONE_Android_PublicMavenNote/#base-integration-guide-changes","title":"Base Integration Guide Changes","text":"<p>Follow these changed instructions instead of those in the Base Integration Guide to utilize the public Maven repository.</p> <p>In the Task: Add Client SDK section, the Build Configuration and Files instructions are changed as follows.</p> <ul> <li> <p>In the step Add the required libraries to the build:</p> <p>Instead of adding all the separate dependencies given in the guide, add only the following.</p> <pre><code>repositories {\n    maven {\n        url 'https://vmwaresaas.jfrog.io/artifactory/Workspace-ONE-Android-SDK/'\n    }\n}\n\ndependencies {\n    // Integrate Workspace ONE at the Client level.\n    //\n    // Before downloading, installing, or using the VMware Workspace ONE\n    // SDK you must:\n    //\n    // -   Review the VMware Workspace ONE Software Development Kit\n    //     License Agreement that is posted here.\n    //     https://developer.vmware.com/docs/12215/WorkspaceONE_SDKLicenseAgreement.pdf\n    //\n    //     By downloading, installing, or using the VMware Workspace ONE SDK you\n    //     agree to these license terms. If you disagree with any of the terms, then\n    //     do not use the software.\n    //\n    // -   Review the VMware Privacy Notice and the Workspace ONE UEM Privacy\n    //     Disclosure for information on applicable privacy policies.\n    //     https://www.vmware.com/help/privacy.html\n    //     https://www.vmware.com/help/privacy/uem-privacy-disclosure.html\n    implementation \"com.airwatch.android:AirWatchSDK:21.3\"\n}\n</code></pre> </li> <li> <p>Skip the step Copy the required library files.</p> </li> <li> <p>Skip the step     Add the library files' location to the application build configuration.</p> </li> </ul> <p>In the Task: Add Framework section, the Build Configuration and Files instructions are changed as follows.</p> <ul> <li> <p>In the step Add the required libraries to the build:</p> <p>Instead of adding all the separate dependencies given in the guide, add only the following.</p> <pre><code>repositories {\n    maven {\n        url 'https://vmwaresaas.jfrog.io/artifactory/Workspace-ONE-Android-SDK/'\n    }\n}\n\ndependencies {\n    // Integrate Workspace ONE at the Framework level.\n    //\n    // Before downloading, installing, or using the VMware Workspace ONE\n    // SDK you must:\n    //\n    // -   Review the VMware Workspace ONE Software Development Kit\n    //     License Agreement that is posted here.\n    //     https://developer.vmware.com/docs/12215/WorkspaceONE_SDKLicenseAgreement.pdf\n    //\n    //     By downloading, installing, or using the VMware Workspace ONE SDK you\n    //     agree to these license terms. If you disagree with any of the terms, then\n    //     do not use the software.\n    //\n    // -   Review the VMware Privacy Notice and the Workspace ONE UEM Privacy\n    //     Disclosure for information on applicable privacy policies.\n    //     https://www.vmware.com/help/privacy.html\n    //     https://www.vmware.com/help/privacy/uem-privacy-disclosure.html\n    implementation \"com.airwatch.android:AWFramework:21.3\"\n}\n</code></pre> </li> <li> <p>Skip the step Copy the required library files.</p> </li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/PublicMaven/WorkspaceONE_Android_PublicMavenNote/#open-source-sample-code","title":"Open Source Sample Code","text":"<p>Open Source sample code for integration of Android applications with Workspace ONE is published to a GitHub repository. The build files of one set of the applications in the repository have been updated to utilize the public Maven repository.</p> <p>The sample code repository is here: github.com/vmware-samples/workspace-ONE-SDK-integration-samples</p> <p>The following sample apps have updated build files.</p> <ul> <li>brandStaticDelegateJava</li> <li>brandStaticDelegateKotlin</li> <li>brandStaticExtendJava</li> <li>brandStaticExtendKotlin</li> </ul> <p>Each app directory has the following build files.</p> <ul> <li><code>publicMavenClient.gradle</code> to integrate at the Client level.</li> <li><code>publicMavenFramework.gradle</code> to add integration at the Framework level.</li> </ul>"},{"location":"IntegrationGuideforAndroid/Guides/PublicMaven/WorkspaceONE_Android_PublicMavenNote/#document-information","title":"Document Information","text":""},{"location":"IntegrationGuideforAndroid/Guides/PublicMaven/WorkspaceONE_Android_PublicMavenNote/#revision-history","title":"Revision History","text":"Date Revision 21apr2021 First publication, for 21.3 SDK for Android."},{"location":"IntegrationGuideforAndroid/Guides/PublicMaven/WorkspaceONE_Android_PublicMavenNote/#legal","title":"Legal","text":"<ul> <li>VMware, Inc. 3401 Hillview Avenue Palo Alto CA 94304 USA     Tel 877-486-9273 Fax 650-427-5001 www.vmware.com</li> <li>Copyright \u00a9 2022 VMware, Inc. All rights reserved.</li> <li>This content is protected by U.S. and international copyright and     intellectual property laws. VMware products are covered by one     or more patents listed at     https://www.vmware.com/go/patents.     VMware is a registered trademark or trademark of VMware, Inc. and its     subsidiaries in the United States and other jurisdictions. All other marks     and names mentioned herein may be trademarks of their respective companies.</li> <li>The Workspace ONE Software Development Kit integration samples are     licensed under a two-clause BSD license.     SPDX-License-Identifier: BSD-2-Clause</li> </ul>"},{"location":"IntegrationGuideforAndroid/Resources/readme/","title":"Resources","text":"<p>This directory holds some resources used in the Workspace ONE Integration Guide for Android code. For an introduction to the repository, see the parent directory readme file.</p> <ul> <li> <p><code>brand_logo.xcf</code>     GIMP file for the application logo.</p> </li> <li> <p><code>brand_logo_onecolour.xcf</code>     GIMP file for a version of the application logo with only one colour and a     transparent background. Used for Android notifications.</p> </li> <li> <p><code>brand_logo_onecolour_small.xcf</code>     GIMP file for a smaller version of the previous application logo. Used as an     override of the VMware logo in the brandStaticExtend sample applications.</p> </li> <li> <p><code>privacy_placeholder_2_dark.xcf</code> and <code>privacy_placeholder_2_light.xcf</code>     GIMP files for a custom icon used to represent a privacy data collection     item in the privacy agreements sample code.</p> </li> <li> <p><code>copyrightnotices.txt</code>     Short form of the notices inserted into every source file.</p> </li> <li> <p><code>customSettings.json</code>     JavaScript Object Notation (JSON) file that is suitable content for the     Custom Settings text field in the Workspace ONE management console. Can be     used with the identificationDemo sample application.</p> </li> </ul> <p>For details of the applications mentioned in the above, see the Documentation/applications.md file.</p> <p>See also:</p> <ul> <li>The home page of the GIMP project:     https://www.gimp.org/</li> </ul>"},{"location":"IntegrationGuideforAndroid/Resources/readme/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"},{"location":"samples/ws1-sdk-integration-samples/IntegrationGuideForiOS/Guides/23BaseIntegration/","title":"Base Integration Guide","text":""},{"location":"samples/ws1-sdk-integration-samples/IntegrationGuideForiOS/Guides/23BaseIntegration/#workspace-one-for-ios-and-ipados","title":"Workspace ONE for iOS and iPadOS","text":"<p>Applications for iOS and iPadOS can be integrated with the VMware Workspace ONE\u00ae platform, by using its mobile software development kit. Complete the tasks below as a base for feature integration.</p> <p>This document is part of the Workspace ONE Integration Guide set.</p>"},{"location":"samples/ws1-sdk-integration-samples/IntegrationGuideForiOS/Guides/23BaseIntegration/#welcome","title":"Welcome","text":""},{"location":"samples/ws1-sdk-integration-samples/IntegrationGuideForiOS/Guides/23BaseIntegration/#agreement","title":"Agreement","text":"<p>Before downloading, installing or using the VMware Workspace ONE Software Development Kit (SDK) you must:</p> <ul> <li> <p>Review the     VMware Workspace ONE Software Development Kit License Agreement.     By downloading, installing, or using the VMware Workspace ONE SDK you agree     to these license terms. If you disagree with any of the terms, then do not     use the software.</p> </li> <li> <p>Review the VMware Privacy Notice     and the     Workspace ONE UEM Privacy Disclosure,     for information on applicable privacy policies.</p> </li> </ul> <p>That applies however you obtain or integrate the software.</p>"},{"location":"samples/ws1-sdk-integration-samples/IntegrationGuideForiOS/Guides/23BaseIntegration/#compatibility","title":"Compatibility","text":""},{"location":"samples/ws1-sdk-integration-samples/IntegrationGuideForiOS/Guides/23BaseIntegration/#task-configure-application-properties","title":"Task: Configure application properties","text":""},{"location":"samples/ws1-sdk-integration-samples/IntegrationGuideForiOS/Guides/23BaseIntegration/#task-add-the-software-development-kit-package","title":"Task: Add the software development kit package","text":""},{"location":"samples/ws1-sdk-integration-samples/IntegrationGuideForiOS/Guides/23BaseIntegration/#task-initialize-the-software-development-kit-runtime","title":"Task: Initialize the software development kit runtime","text":""},{"location":"samples/ws1-sdk-integration-samples/IntegrationGuideForiOS/Guides/23BaseIntegration/#initialize-from-swiftui","title":"Initialize from SwiftUI","text":""},{"location":"samples/ws1-sdk-integration-samples/IntegrationGuideForiOS/Guides/23BaseIntegration/#initialize-from-storyboard","title":"Initialize from Storyboard","text":""},{"location":"samples/ws1-sdk-integration-samples/IntegrationGuideForiOS/Guides/23BaseIntegration/#test-runtime-initialization","title":"Test runtime initialization","text":""},{"location":"samples/ws1-sdk-integration-samples/IntegrationGuideForiOS/Guides/23BaseIntegration/#task-declare-supported-features","title":"Task: Declare supported features","text":""},{"location":"samples/ws1-sdk-integration-samples/IntegrationGuideForiOS/Guides/23BaseIntegration/#task-demonstrate-basic-features","title":"Task: Demonstrate Basic Features","text":""},{"location":"samples/ws1-sdk-integration-samples/IntegrationGuideForiOS/Guides/23BaseIntegration/#next-steps","title":"Next Steps","text":""},{"location":"samples/ws1-sdk-integration-samples/IntegrationGuideForiOS/Guides/23BaseIntegration/#appendix-callback-scheme-sample-code","title":"Appendix: Callback Scheme Sample Code","text":""},{"location":"samples/ws1-sdk-integration-samples/IntegrationGuideForiOS/Guides/23BaseIntegration/#appendix-troubleshooting","title":"Appendix: Troubleshooting","text":""},{"location":"samples/ws1-sdk-integration-samples/IntegrationGuideForiOS/Guides/23BaseIntegration/#appendix-keychain-clearance-sample-code","title":"Appendix: Keychain Clearance Sample Code","text":""},{"location":"samples/ws1-sdk-integration-samples/IntegrationGuideForiOS/Guides/23BaseIntegration/#document-information","title":"Document Information","text":""},{"location":"samples/ws1-sdk-integration-samples/IntegrationGuideForiOS/Guides/23BaseIntegration/#published-locations","title":"Published Locations","text":"<p>This document is available</p> <ul> <li> <p>in Markdown format, in the repository that also holds the sample code: github.com/vmware-samples/.../IntegrationGuideForiOS/...BaseIntegration/</p> </li> <li> <p>in Portable Document Format (PDF), on the VMware website: developer.vmware.com/docs/.../WorkspaceONE_iOS_BaseIntegration.pdf</p> </li> </ul>"},{"location":"samples/ws1-sdk-integration-samples/IntegrationGuideForiOS/Guides/23BaseIntegration/#revision-history","title":"Revision History","text":"Date Revision 19may2023 First correct publication, for 23.04 SDK for iOS. 08jun2023 Publication for 23.06 SDK for iOS. 19jul2023 Publication for 23.07 SDK for iOS. 11sep2023 Publication for 23.09 SDK for iOS. 31oct2023 Publication for 23.10 SDK for iOS. 14Dec2023 Publication for 23.12 SDK for iOS. 29Jan2024 Publication for 24.01 SDK for iOS."},{"location":"samples/ws1-sdk-integration-samples/IntegrationGuideForiOS/Guides/23BaseIntegration/#legal","title":"Legal","text":"<ul> <li>VMware, Inc. 3401 Hillview Avenue Palo Alto CA 94304 USA     Tel 877-486-9273 Fax 650-427-5001 www.vmware.com</li> <li>Copyright \u00a9 2024 VMware LLC. All rights reserved.</li> <li>This product is protected by U.S. and international     copyright and intellectual property laws. VMware products are covered by one     or more patents listed at     https://www.vmware.com/go/patents.     VMware is a registered trademark or trademark of VMware, Inc. and its     subsidiaries in the United States and other jurisdictions. All other marks     and names mentioned herein may be trademarks of their respective companies.</li> </ul>"},{"location":"samples/ws1-sdk-integration-samples/IntegrationGuideforAndroid/","title":"WS1 SDK Integration for Android Documentation","text":"<p>This directory holds information about how to use the Workspace ONE Integration Guide for Android repository. For an introduction to the repository, see the</p>"},{"location":"samples/ws1-sdk-integration-samples/IntegrationGuideforAndroid/#license","title":"License","text":"<p>Copyright 2022 VMware, Inc. All rights reserved. The Workspace ONE Software Development Kit integration samples are licensed under a two-clause BSD license. SPDX-License-Identifier: BSD-2-Clause</p>"}]}